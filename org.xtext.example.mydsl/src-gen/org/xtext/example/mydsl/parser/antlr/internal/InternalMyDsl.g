/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSurveysSurveyParserRuleCall_1_0_0()); 
	    }
		lv_surveys_1_0=ruleSurvey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"surveys",
        		lv_surveys_1_0, 
        		"Survey");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='??????' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getQuestionMarkQuestionMarkQuestionMarkQuestionMarkQuestionMarkQuestionMarkKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSurveysSurveyParserRuleCall_1_1_1_0()); 
	    }
		lv_surveys_3_0=ruleSurvey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"surveys",
        		lv_surveys_3_0, 
        		"Survey");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getMultipleChoiceParserRuleCall_0()); 
    }
    this_MultipleChoice_0=ruleMultipleChoice
    { 
        $current = $this_MultipleChoice_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getOpenParserRuleCall_1()); 
    }
    this_Open_1=ruleOpen
    { 
        $current = $this_Open_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRating_ImplParserRuleCall_2()); 
    }
    this_Rating_Impl_2=ruleRating_Impl
    { 
        $current = $this_Rating_Impl_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRankingParserRuleCall_3()); 
    }
    this_Ranking_3=ruleRanking
    { 
        $current = $this_Ranking_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getDichotomousParserRuleCall_4()); 
    }
    this_Dichotomous_4=ruleDichotomous
    { 
        $current = $this_Dichotomous_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getSumConstantParserRuleCall_5()); 
    }
    this_SumConstant_5=ruleSumConstant
    { 
        $current = $this_SumConstant_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getStapleParserRuleCall_6()); 
    }
    this_Staple_6=ruleStaple
    { 
        $current = $this_Staple_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSurvey
entryRuleSurvey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSurveyRule()); }
	 iv_ruleSurvey=ruleSurvey 
	 { $current=$iv_ruleSurvey.current; } 
	 EOF 
;

// Rule Survey
ruleSurvey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSurveyAccess().getSurveyAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_2_0_0()); 
	    }
		lv_questions_2_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_2_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSurveyAccess().getSemicolonKeyword_2_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_2_2_0_0()); 
	    }
		lv_questions_4_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_4_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSurveyAccess().getSemicolonKeyword_2_2_1());
    }
)*)?)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRuleMultipleChoice
entryRuleMultipleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultipleChoiceRule()); }
	 iv_ruleMultipleChoice=ruleMultipleChoice 
	 { $current=$iv_ruleMultipleChoice.current; } 
	 EOF 
;

// Rule MultipleChoice
ruleMultipleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMultipleChoiceAccess().getMultipleChoiceAction_0(),
            $current);
    }
)	otherlv_1='MultipleChoice' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultipleChoiceAccess().getMultipleChoiceKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getMultipleChoiceAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleChoiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultipleChoiceAccess().getColonKeyword_3());
    }
((	otherlv_4='The' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultipleChoiceAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMultipleChoiceAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultipleChoiceAccess().getMayKeyword_5_0());
    }

    |(
(
		lv_isRequired_7_0=	'is required' 
    {
        newLeafNode(lv_isRequired_7_0, grammarAccess.getMultipleChoiceAccess().getIsRequiredIsRequiredKeyword_5_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleChoiceRule());
	        }
       		setWithLastConsumed($current, "isRequired", true, "is required");
	    }

)
))?((	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMultipleChoiceAccess().getToKeyword_6_0());
    }
)?(	otherlv_9='answer' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMultipleChoiceAccess().getAnswerKeyword_6_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getQuestionEStringParserRuleCall_6_2_0()); 
	    }
		lv_question_10_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_10_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_11='with' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMultipleChoiceAccess().getWithKeyword_7_0());
    }
)?(	otherlv_12='one of' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMultipleChoiceAccess().getOneOfKeyword_7_1_0());
    }

    |	otherlv_13='some of' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMultipleChoiceAccess().getSomeOfKeyword_7_1_1());
    }
)?(	otherlv_14='these:' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMultipleChoiceAccess().getTheseKeyword_7_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getChoiceChoiceParserRuleCall_7_3_0()); 
	    }
		lv_choice_15_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"choice",
        		lv_choice_15_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMultipleChoiceAccess().getCommaKeyword_7_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getChoiceChoiceParserRuleCall_7_4_1_0()); 
	    }
		lv_choice_17_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"choice",
        		lv_choice_17_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_18='or' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getMultipleChoiceAccess().getOrKeyword_8_0());
    }
(	otherlv_19='with' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getMultipleChoiceAccess().getWithKeyword_8_1());
    }
)?(	otherlv_20='something' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getMultipleChoiceAccess().getSomethingKeyword_8_2());
    }
)?(	otherlv_21='else' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getMultipleChoiceAccess().getElseKeyword_8_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getOtherEStringParserRuleCall_8_4_0()); 
	    }
		lv_other_22_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		set(
       			$current, 
       			"other",
        		lv_other_22_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_23='.' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getMultipleChoiceAccess().getFullStopKeyword_9());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getForkChoiceForkParserRuleCall_10_0_0()); 
	    }
		lv_Fork_24_0=ruleChoiceFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_24_0, 
        		"ChoiceFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_25=',' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getMultipleChoiceAccess().getCommaKeyword_10_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getForkChoiceForkParserRuleCall_10_1_1_0()); 
	    }
		lv_Fork_26_0=ruleChoiceFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_26_0, 
        		"ChoiceFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	 iv_ruleOpen=ruleOpen 
	 { $current=$iv_ruleOpen.current; } 
	 EOF 
;

// Rule Open
ruleOpen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOpenAccess().getOpenAction_0(),
            $current);
    }
)	otherlv_1='Open' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOpenAccess().getOpenKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getOpenAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpenRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOpenAccess().getColonKeyword_3());
    }
((	otherlv_4='The' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOpenAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOpenAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOpenAccess().getMayKeyword_5_0());
    }

    |	otherlv_7='is required' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOpenAccess().getIsRequiredKeyword_5_1());
    }
)?((	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getOpenAccess().getToKeyword_6_0());
    }
)?(	otherlv_9='answer' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getOpenAccess().getAnswerKeyword_6_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getQuestionEStringParserRuleCall_6_2_0()); 
	    }
		lv_question_10_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_10_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRating_Impl
entryRuleRating_Impl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRating_ImplRule()); }
	 iv_ruleRating_Impl=ruleRating_Impl 
	 { $current=$iv_ruleRating_Impl.current; } 
	 EOF 
;

// Rule Rating_Impl
ruleRating_Impl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRating_ImplAccess().getRatingAction_0(),
            $current);
    }
)	otherlv_1='Rating' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRating_ImplAccess().getRatingKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getRating_ImplAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRating_ImplRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRating_ImplAccess().getColonKeyword_3());
    }
((	otherlv_4='The' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRating_ImplAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRating_ImplAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRating_ImplAccess().getMayKeyword_5_0());
    }

    |	otherlv_7='is required' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRating_ImplAccess().getIsRequiredKeyword_5_1());
    }
)?((	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRating_ImplAccess().getToKeyword_6_0());
    }
)?(	otherlv_9='rate' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRating_ImplAccess().getRateKeyword_6_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getQuestionEStringParserRuleCall_6_2_0()); 
	    }
		lv_question_10_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_10_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_11='between' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRating_ImplAccess().getBetweenKeyword_7_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getMinEIntParserRuleCall_7_1_0()); 
	    }
		lv_Min_12_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_12_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_13='and' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRating_ImplAccess().getAndKeyword_8_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getMaxEIntParserRuleCall_8_1_0()); 
	    }
		lv_Max_14_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_14_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_15='where' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRating_ImplAccess().getWhereKeyword_9_0());
    }
)?(	otherlv_16='lowest' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getRating_ImplAccess().getLowestKeyword_9_1());
    }
)?(	otherlv_17='means' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getRating_ImplAccess().getMeansKeyword_9_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getFirstEStringParserRuleCall_9_3_0()); 
	    }
		lv_first_18_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_18_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_19='and' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getRating_ImplAccess().getAndKeyword_10_0());
    }
)?(	otherlv_20='highest' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getRating_ImplAccess().getHighestKeyword_10_1());
    }
)?(	otherlv_21='means' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getRating_ImplAccess().getMeansKeyword_10_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getLastEStringParserRuleCall_10_3_0()); 
	    }
		lv_last_22_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"last",
        		lv_last_22_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_23='conditionals' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getRating_ImplAccess().getConditionalsKeyword_11_0());
    }
)?	otherlv_24='(' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getRating_ImplAccess().getLeftParenthesisKeyword_11_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getForkRatingForkParserRuleCall_11_2_0()); 
	    }
		lv_Fork_25_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_25_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_26=',' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getRating_ImplAccess().getCommaKeyword_11_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getForkRatingForkParserRuleCall_11_3_1_0()); 
	    }
		lv_Fork_27_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_27_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_28=')' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getRating_ImplAccess().getRightParenthesisKeyword_11_4());
    }
)?)
;





// Entry rule entryRuleRanking
entryRuleRanking returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRankingRule()); }
	 iv_ruleRanking=ruleRanking 
	 { $current=$iv_ruleRanking.current; } 
	 EOF 
;

// Rule Ranking
ruleRanking returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Ranking' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRankingAccess().getRankingKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRankingAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRankingAccess().getColonKeyword_2());
    }
(	otherlv_3='is required' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRankingAccess().getIsRequiredKeyword_3());
    }
)?((	otherlv_4='ask' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRankingAccess().getAskKeyword_4_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getQuestionEStringParserRuleCall_4_1_0()); 
	    }
		lv_question_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_6='you' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRankingAccess().getYouKeyword_5_0());
    }
)?(	otherlv_7='can' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRankingAccess().getCanKeyword_5_1());
    }
)?	otherlv_8='choose' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRankingAccess().getChooseKeyword_5_2());
    }
(	otherlv_9='from' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRankingAccess().getFromKeyword_5_3());
    }
)?(	otherlv_10='these' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRankingAccess().getTheseKeyword_5_4());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getChoicesChoiceParserRuleCall_5_5_0()); 
	    }
		lv_choices_11_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_11_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRankingAccess().getCommaKeyword_5_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getChoicesChoiceParserRuleCall_5_6_1_0()); 
	    }
		lv_choices_13_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_13_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?((	otherlv_14='conditionals' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRankingAccess().getConditionalsKeyword_6_0());
    }
)?	otherlv_15='(' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRankingAccess().getLeftParenthesisKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getForkRankingSumForkParserRuleCall_6_2_0()); 
	    }
		lv_Fork_16_0=ruleRankingSumFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_16_0, 
        		"RankingSumFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getRankingAccess().getCommaKeyword_6_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getForkRankingSumForkParserRuleCall_6_3_1_0()); 
	    }
		lv_Fork_18_0=ruleRankingSumFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_18_0, 
        		"RankingSumFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_19=')' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getRankingAccess().getRightParenthesisKeyword_6_4());
    }
)?)
;





// Entry rule entryRuleDichotomous
entryRuleDichotomous returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDichotomousRule()); }
	 iv_ruleDichotomous=ruleDichotomous 
	 { $current=$iv_ruleDichotomous.current; } 
	 EOF 
;

// Rule Dichotomous
ruleDichotomous returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDichotomousAccess().getDichotomousAction_0(),
            $current);
    }
)	otherlv_1='Dichotomous' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDichotomousAccess().getDichotomousKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getDichotomousAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDichotomousRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDichotomousAccess().getColonKeyword_3());
    }
((	otherlv_4='The' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDichotomousAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDichotomousAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDichotomousAccess().getMayKeyword_5_0());
    }

    |	otherlv_7='is required' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDichotomousAccess().getIsRequiredKeyword_5_1());
    }
)?((	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDichotomousAccess().getToKeyword_6_0());
    }
)?(	otherlv_9='answer' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDichotomousAccess().getAnswerKeyword_6_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getQuestionEStringParserRuleCall_6_2_0()); 
	    }
		lv_question_10_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_10_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_11='if yes' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDichotomousAccess().getIfYesKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getOnYesDichotomousForkParserRuleCall_7_1_0()); 
	    }
		lv_onYes_12_0=ruleDichotomousFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		set(
       			$current, 
       			"onYes",
        		lv_onYes_12_0, 
        		"DichotomousFork");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_13='if no' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDichotomousAccess().getIfNoKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getOnNoDichotomousForkParserRuleCall_8_1_0()); 
	    }
		lv_onNo_14_0=ruleDichotomousFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		set(
       			$current, 
       			"onNo",
        		lv_onNo_14_0, 
        		"DichotomousFork");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSumConstant
entryRuleSumConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSumConstantRule()); }
	 iv_ruleSumConstant=ruleSumConstant 
	 { $current=$iv_ruleSumConstant.current; } 
	 EOF 
;

// Rule SumConstant
ruleSumConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSumConstantAccess().getSumConstantAction_0(),
            $current);
    }
)	otherlv_1='SumConstant' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSumConstantAccess().getSumConstantKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getSumConstantAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSumConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSumConstantAccess().getColonKeyword_3());
    }
((	otherlv_4='The' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSumConstantAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSumConstantAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSumConstantAccess().getMayKeyword_5_0());
    }

    |	otherlv_7='is required' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSumConstantAccess().getIsRequiredKeyword_5_1());
    }
)?((	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSumConstantAccess().getToKeyword_6_0());
    }
)?(	otherlv_9='divide' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSumConstantAccess().getDivideKeyword_6_1());
    }
)?(	otherlv_10='according' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSumConstantAccess().getAccordingKeyword_6_2());
    }
)?(	otherlv_11='to' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSumConstantAccess().getToKeyword_6_3());
    }
)?(	otherlv_12='the' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSumConstantAccess().getTheKeyword_6_4());
    }
)?(	otherlv_13='importance' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getSumConstantAccess().getImportanceKeyword_6_5());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSumConstantAccess().getQuestionEStringParserRuleCall_6_6_0()); 
	    }
		lv_question_14_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumConstantRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_14_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_15='conditionals' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getSumConstantAccess().getConditionalsKeyword_7_0());
    }
)?	otherlv_16='(' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSumConstantAccess().getLeftParenthesisKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSumConstantAccess().getForkRankingSumForkParserRuleCall_7_2_0()); 
	    }
		lv_Fork_17_0=ruleRankingSumFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumConstantRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_17_0, 
        		"RankingSumFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSumConstantAccess().getCommaKeyword_7_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSumConstantAccess().getForkRankingSumForkParserRuleCall_7_3_1_0()); 
	    }
		lv_Fork_19_0=ruleRankingSumFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumConstantRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_19_0, 
        		"RankingSumFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_20=')' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getSumConstantAccess().getRightParenthesisKeyword_7_4());
    }
)?)
;





// Entry rule entryRuleStaple
entryRuleStaple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStapleRule()); }
	 iv_ruleStaple=ruleStaple 
	 { $current=$iv_ruleStaple.current; } 
	 EOF 
;

// Rule Staple
ruleStaple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStapleAccess().getStapleAction_0(),
            $current);
    }
)	otherlv_1='Staple' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStapleAccess().getStapleKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getStapleAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStapleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStapleAccess().getColonKeyword_3());
    }
((	otherlv_4='The' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStapleAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStapleAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStapleAccess().getMayKeyword_5_0());
    }

    |	otherlv_7='is required' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStapleAccess().getIsRequiredKeyword_5_1());
    }
)?((	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStapleAccess().getToKeyword_6_0());
    }
)?(	otherlv_9='rate' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStapleAccess().getRateKeyword_6_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getQuestionEStringParserRuleCall_6_2_0()); 
	    }
		lv_question_10_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_10_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_11='between' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getStapleAccess().getBetweenKeyword_7_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMinEIntParserRuleCall_7_1_0()); 
	    }
		lv_Min_12_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_12_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_13='and' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStapleAccess().getAndKeyword_8_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMaxEIntParserRuleCall_8_1_0()); 
	    }
		lv_Max_14_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_14_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_15='where' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStapleAccess().getWhereKeyword_9_0());
    }
)?(	otherlv_16='lowest' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getStapleAccess().getLowestKeyword_9_1());
    }
)?(	otherlv_17='means' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStapleAccess().getMeansKeyword_9_2());
    }
)?(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getStapleAccess().getCommaKeyword_9_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getFirstEStringParserRuleCall_9_4_0()); 
	    }
		lv_first_19_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_19_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_20='mean' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getStapleAccess().getMeanKeyword_10_0());
    }
)?(	otherlv_21='means' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getStapleAccess().getMeansKeyword_10_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMidEStringParserRuleCall_10_2_0()); 
	    }
		lv_mid_22_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"mid",
        		lv_mid_22_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_23='and' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getStapleAccess().getAndKeyword_11_0());
    }
)?(	otherlv_24='highest' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getStapleAccess().getHighestKeyword_11_1());
    }
)?(	otherlv_25='means' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getStapleAccess().getMeansKeyword_11_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getLastEStringParserRuleCall_11_3_0()); 
	    }
		lv_last_26_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"last",
        		lv_last_26_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_27='conditionals' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getStapleAccess().getConditionalsKeyword_12_0());
    }
)?	otherlv_28='(' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getStapleAccess().getLeftParenthesisKeyword_12_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getForkRatingForkParserRuleCall_12_2_0()); 
	    }
		lv_Fork_29_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_29_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_30=',' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getStapleAccess().getCommaKeyword_12_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getForkRatingForkParserRuleCall_12_3_1_0()); 
	    }
		lv_Fork_31_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_31_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_32=')' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getStapleAccess().getRightParenthesisKeyword_12_4());
    }
)?)
;





// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	 iv_ruleChoice=ruleChoice 
	 { $current=$iv_ruleChoice.current; } 
	 EOF 
;

// Rule Choice
ruleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getChoiceAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChoiceAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceAccess().getDescriptionEStringParserRuleCall_2_0()); 
	    }
		lv_Description_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceRule());
	        }
       		set(
       			$current, 
       			"Description",
        		lv_Description_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChoiceFork
entryRuleChoiceFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceForkRule()); }
	 iv_ruleChoiceFork=ruleChoiceFork 
	 { $current=$iv_ruleChoiceFork.current; } 
	 EOF 
;

// Rule ChoiceFork
ruleChoiceFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='If' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChoiceForkAccess().getIfKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getChoiceForkAccess().getOnChoiceCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChoiceForkAccess().getCommaKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getChoiceForkAccess().getOnChoiceCrossReference_2_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getChoiceForkAccess().getThenKeyword_3());
    }
)?	otherlv_5='go to' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getChoiceForkAccess().getGoToKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getChoiceForkAccess().getQuestionsQuestionCrossReference_5_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getChoiceForkAccess().getCommaKeyword_6_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getChoiceForkAccess().getQuestionsQuestionCrossReference_6_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRatingFork
entryRuleRatingFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRatingForkRule()); }
	 iv_ruleRatingFork=ruleRatingFork 
	 { $current=$iv_ruleRatingFork.current; } 
	 EOF 
;

// Rule RatingFork
ruleRatingFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Min' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRatingForkAccess().getMinKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getMinEIntParserRuleCall_0_1_0()); 
	    }
		lv_Min_1_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_1_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_2='Max' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRatingForkAccess().getMaxKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getMaxEIntParserRuleCall_1_1_0()); 
	    }
		lv_Max_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='Questions' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRatingForkAccess().getQuestionsKeyword_2());
    }
	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRatingForkAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRatingForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getQuestionsQuestionCrossReference_4_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRatingForkAccess().getCommaKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRatingForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getQuestionsQuestionCrossReference_5_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRatingForkAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleRankingSumFork
entryRuleRankingSumFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRankingSumForkRule()); }
	 iv_ruleRankingSumFork=ruleRankingSumFork 
	 { $current=$iv_ruleRankingSumFork.current; } 
	 EOF 
;

// Rule RankingSumFork
ruleRankingSumFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='On' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRankingSumForkAccess().getOnKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingSumForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getOnChoiceCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRankingSumForkAccess().getCommaKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingSumForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getOnChoiceCrossReference_2_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_4='From' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRankingSumForkAccess().getFromKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getMaxEIntParserRuleCall_3_1_0()); 
	    }
		lv_Max_5_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingSumForkRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_5_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='To' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRankingSumForkAccess().getToKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getMinEIntParserRuleCall_4_1_0()); 
	    }
		lv_Min_7_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingSumForkRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_7_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8='Questions' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRankingSumForkAccess().getQuestionsKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingSumForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getQuestionsQuestionCrossReference_6_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRankingSumForkAccess().getCommaKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingSumForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getQuestionsQuestionCrossReference_7_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDichotomousFork
entryRuleDichotomousFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDichotomousForkRule()); }
	 iv_ruleDichotomousFork=ruleDichotomousFork 
	 { $current=$iv_ruleDichotomousFork.current; } 
	 EOF 
;

// Rule DichotomousFork
ruleDichotomousFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DichotomousFork' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDichotomousForkAccess().getDichotomousForkKeyword_0());
    }
	otherlv_1='Questions' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDichotomousForkAccess().getQuestionsKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDichotomousForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDichotomousForkAccess().getQuestionsQuestionCrossReference_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDichotomousForkAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDichotomousForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDichotomousForkAccess().getQuestionsQuestionCrossReference_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


