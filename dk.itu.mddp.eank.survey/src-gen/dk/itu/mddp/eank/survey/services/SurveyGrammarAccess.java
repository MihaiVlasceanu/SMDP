/*
* generated by Xtext
*/
package dk.itu.mddp.eank.survey.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SurveyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSurveysAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSurveysSurveyParserRuleCall_1_0 = (RuleCall)cSurveysAssignment_1.eContents().get(0);
		
		//Model:
		//	{Model} surveys+=Survey?;
		public ParserRule getRule() { return rule; }

		//{Model} surveys+=Survey?
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//surveys+=Survey?
		public Assignment getSurveysAssignment_1() { return cSurveysAssignment_1; }

		//Survey
		public RuleCall getSurveysSurveyParserRuleCall_1_0() { return cSurveysSurveyParserRuleCall_1_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultipleChoiceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOpenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRating_ImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRankingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDichotomousParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSumConstantParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStapleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Question:
		//	MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple;
		public ParserRule getRule() { return rule; }

		//MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple
		public Alternatives getAlternatives() { return cAlternatives; }

		//MultipleChoice
		public RuleCall getMultipleChoiceParserRuleCall_0() { return cMultipleChoiceParserRuleCall_0; }

		//Open
		public RuleCall getOpenParserRuleCall_1() { return cOpenParserRuleCall_1; }

		//Rating_Impl
		public RuleCall getRating_ImplParserRuleCall_2() { return cRating_ImplParserRuleCall_2; }

		//Ranking
		public RuleCall getRankingParserRuleCall_3() { return cRankingParserRuleCall_3; }

		//Dichotomous
		public RuleCall getDichotomousParserRuleCall_4() { return cDichotomousParserRuleCall_4; }

		//SumConstant
		public RuleCall getSumConstantParserRuleCall_5() { return cSumConstantParserRuleCall_5; }

		//Staple
		public RuleCall getStapleParserRuleCall_6() { return cStapleParserRuleCall_6; }
	}

	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSurveyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cQuestionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_0_0 = (RuleCall)cQuestionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cQuestionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_1_1_0 = (RuleCall)cQuestionsAssignment_3_1_1.eContents().get(0);
		
		//Survey:
		//	{Survey} name=ID ":" (questions+=Question (";" questions+=Question)*)?;
		public ParserRule getRule() { return rule; }

		//{Survey} name=ID ":" (questions+=Question (";" questions+=Question)*)?
		public Group getGroup() { return cGroup; }

		//{Survey}
		public Action getSurveyAction_0() { return cSurveyAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(questions+=Question (";" questions+=Question)*)?
		public Group getGroup_3() { return cGroup_3; }

		//questions+=Question
		public Assignment getQuestionsAssignment_3_0() { return cQuestionsAssignment_3_0; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_0_0() { return cQuestionsQuestionParserRuleCall_3_0_0; }

		//(";" questions+=Question)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//";"
		public Keyword getSemicolonKeyword_3_1_0() { return cSemicolonKeyword_3_1_0; }

		//questions+=Question
		public Assignment getQuestionsAssignment_3_1_1() { return cQuestionsAssignment_3_1_1; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_1_1_0() { return cQuestionsQuestionParserRuleCall_3_1_1_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class MultipleChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultipleChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultipleChoiceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMultipleChoiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cUserKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cMayKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cIsRequiredKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cAnswerKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cQuestionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_5_2_0 = (RuleCall)cQuestionAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Keyword cOneKeyword_6_1_0 = (Keyword)cAlternatives_6_1.eContents().get(0);
		private final Keyword cSomeOfKeyword_6_1_1 = (Keyword)cAlternatives_6_1.eContents().get(1);
		private final Keyword cTheseKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cChoiceAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cChoiceChoiceParserRuleCall_6_3_0 = (RuleCall)cChoiceAssignment_6_3.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cGroup_6.eContents().get(4);
		private final Keyword cCommaKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cChoiceAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cChoiceChoiceParserRuleCall_6_4_1_0 = (RuleCall)cChoiceAssignment_6_4_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cOrKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cWithKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cSomethingKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Keyword cElseKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cOtherAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cOtherEStringParserRuleCall_7_4_0 = (RuleCall)cOtherAssignment_7_4.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cConditionalsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cMultipleChoiceForksAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cMultipleChoiceForksMultipleChoiceForkParserRuleCall_8_2_0 = (RuleCall)cMultipleChoiceForksAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cMultipleChoiceForksAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cMultipleChoiceForksMultipleChoiceForkParserRuleCall_8_3_1_0 = (RuleCall)cMultipleChoiceForksAssignment_8_3_1.eContents().get(0);
		
		//MultipleChoice:
		//	{MultipleChoice} "MultipleChoice" ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?
		//	("with"? ("one" | "some of")? "these:"? choice+=Choice ("," choice+=Choice)*)? ("or" "with"? "something"? "else"?
		//	other=EString)? ("conditionals"? ":" MultipleChoiceForks+=MultipleChoiceFork (","
		//	MultipleChoiceForks+=MultipleChoiceFork)*)?;
		public ParserRule getRule() { return rule; }

		//{MultipleChoice} "MultipleChoice" ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?
		//("with"? ("one" | "some of")? "these:"? choice+=Choice ("," choice+=Choice)*)? ("or" "with"? "something"? "else"?
		//other=EString)? ("conditionals"? ":" MultipleChoiceForks+=MultipleChoiceFork (","
		//MultipleChoiceForks+=MultipleChoiceFork)*)?
		public Group getGroup() { return cGroup; }

		//{MultipleChoice}
		public Action getMultipleChoiceAction_0() { return cMultipleChoiceAction_0; }

		//"MultipleChoice"
		public Keyword getMultipleChoiceKeyword_1() { return cMultipleChoiceKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("The"? "user")?
		public Group getGroup_3() { return cGroup_3; }

		//"The"?
		public Keyword getTheKeyword_3_0() { return cTheKeyword_3_0; }

		//"user"
		public Keyword getUserKeyword_3_1() { return cUserKeyword_3_1; }

		//("may" | "is required")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"may"
		public Keyword getMayKeyword_4_0() { return cMayKeyword_4_0; }

		//"is required"
		public Keyword getIsRequiredKeyword_4_1() { return cIsRequiredKeyword_4_1; }

		//("to"? "answer"? question=EString)?
		public Group getGroup_5() { return cGroup_5; }

		//"to"?
		public Keyword getToKeyword_5_0() { return cToKeyword_5_0; }

		//"answer"?
		public Keyword getAnswerKeyword_5_1() { return cAnswerKeyword_5_1; }

		//question=EString
		public Assignment getQuestionAssignment_5_2() { return cQuestionAssignment_5_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_5_2_0() { return cQuestionEStringParserRuleCall_5_2_0; }

		//("with"? ("one" | "some of")? "these:"? choice+=Choice ("," choice+=Choice)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"with"?
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }

		//("one" | "some of")?
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//"one"
		public Keyword getOneKeyword_6_1_0() { return cOneKeyword_6_1_0; }

		//"some of"
		public Keyword getSomeOfKeyword_6_1_1() { return cSomeOfKeyword_6_1_1; }

		//"these:"?
		public Keyword getTheseKeyword_6_2() { return cTheseKeyword_6_2; }

		//choice+=Choice
		public Assignment getChoiceAssignment_6_3() { return cChoiceAssignment_6_3; }

		//Choice
		public RuleCall getChoiceChoiceParserRuleCall_6_3_0() { return cChoiceChoiceParserRuleCall_6_3_0; }

		//("," choice+=Choice)*
		public Group getGroup_6_4() { return cGroup_6_4; }

		//","
		public Keyword getCommaKeyword_6_4_0() { return cCommaKeyword_6_4_0; }

		//choice+=Choice
		public Assignment getChoiceAssignment_6_4_1() { return cChoiceAssignment_6_4_1; }

		//Choice
		public RuleCall getChoiceChoiceParserRuleCall_6_4_1_0() { return cChoiceChoiceParserRuleCall_6_4_1_0; }

		//("or" "with"? "something"? "else"? other=EString)?
		public Group getGroup_7() { return cGroup_7; }

		//"or"
		public Keyword getOrKeyword_7_0() { return cOrKeyword_7_0; }

		//"with"?
		public Keyword getWithKeyword_7_1() { return cWithKeyword_7_1; }

		//"something"?
		public Keyword getSomethingKeyword_7_2() { return cSomethingKeyword_7_2; }

		//"else"?
		public Keyword getElseKeyword_7_3() { return cElseKeyword_7_3; }

		//other=EString
		public Assignment getOtherAssignment_7_4() { return cOtherAssignment_7_4; }

		//EString
		public RuleCall getOtherEStringParserRuleCall_7_4_0() { return cOtherEStringParserRuleCall_7_4_0; }

		//("conditionals"? ":" MultipleChoiceForks+=MultipleChoiceFork ("," MultipleChoiceForks+=MultipleChoiceFork)*)?
		public Group getGroup_8() { return cGroup_8; }

		//"conditionals"?
		public Keyword getConditionalsKeyword_8_0() { return cConditionalsKeyword_8_0; }

		//":"
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }

		//MultipleChoiceForks+=MultipleChoiceFork
		public Assignment getMultipleChoiceForksAssignment_8_2() { return cMultipleChoiceForksAssignment_8_2; }

		//MultipleChoiceFork
		public RuleCall getMultipleChoiceForksMultipleChoiceForkParserRuleCall_8_2_0() { return cMultipleChoiceForksMultipleChoiceForkParserRuleCall_8_2_0; }

		//("," MultipleChoiceForks+=MultipleChoiceFork)*
		public Group getGroup_8_3() { return cGroup_8_3; }

		//","
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }

		//MultipleChoiceForks+=MultipleChoiceFork
		public Assignment getMultipleChoiceForksAssignment_8_3_1() { return cMultipleChoiceForksAssignment_8_3_1; }

		//MultipleChoiceFork
		public RuleCall getMultipleChoiceForksMultipleChoiceForkParserRuleCall_8_3_1_0() { return cMultipleChoiceForksMultipleChoiceForkParserRuleCall_8_3_1_0; }
	}

	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Open");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpenAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOpenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cUserKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cMayKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cIsRequiredKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cAnswerKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cQuestionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_5_2_0 = (RuleCall)cQuestionAssignment_5_2.eContents().get(0);
		
		//Open:
		//	{Open} "Open" ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?;
		public ParserRule getRule() { return rule; }

		//{Open} "Open" ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?
		public Group getGroup() { return cGroup; }

		//{Open}
		public Action getOpenAction_0() { return cOpenAction_0; }

		//"Open"
		public Keyword getOpenKeyword_1() { return cOpenKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("The"? "user")?
		public Group getGroup_3() { return cGroup_3; }

		//"The"?
		public Keyword getTheKeyword_3_0() { return cTheKeyword_3_0; }

		//"user"
		public Keyword getUserKeyword_3_1() { return cUserKeyword_3_1; }

		//("may" | "is required")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"may"
		public Keyword getMayKeyword_4_0() { return cMayKeyword_4_0; }

		//"is required"
		public Keyword getIsRequiredKeyword_4_1() { return cIsRequiredKeyword_4_1; }

		//("to"? "answer"? question=EString)?
		public Group getGroup_5() { return cGroup_5; }

		//"to"?
		public Keyword getToKeyword_5_0() { return cToKeyword_5_0; }

		//"answer"?
		public Keyword getAnswerKeyword_5_1() { return cAnswerKeyword_5_1; }

		//question=EString
		public Assignment getQuestionAssignment_5_2() { return cQuestionAssignment_5_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_5_2_0() { return cQuestionEStringParserRuleCall_5_2_0; }
	}

	public class Rating_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rating_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRatingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRatingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cUserKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cMayKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cIsRequiredKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cRateKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cQuestionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_5_2_0 = (RuleCall)cQuestionAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cBetweenKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMinAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_6_1_0 = (RuleCall)cMinAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAndKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cMaxAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_7_1_0 = (RuleCall)cMaxAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWhereKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLowestKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cMeansKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cFirstAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cFirstEStringParserRuleCall_8_3_0 = (RuleCall)cFirstAssignment_8_3.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAndKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cHighestKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cMeansKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cLastAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cLastEStringParserRuleCall_9_3_0 = (RuleCall)cLastAssignment_9_3.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cConditionalsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cRatingForksAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cRatingForksRatingForkParserRuleCall_10_2_0 = (RuleCall)cRatingForksAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cRatingForksAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cRatingForksRatingForkParserRuleCall_10_3_1_0 = (RuleCall)cRatingForksAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		
		//Rating_Impl returns Rating:
		//	{Rating} "Rating" ":" ("The"? "user")? ("may" | "is required")? ("to"? "rate"? question=EString)? ("between"?
		//	Min=EInt)? ("and"? Max=EInt)? ("where"? "lowest"? "means"? first=EString)? ("and"? "highest"? "means"? last=EString)?
		//	("conditionals"? "(" RatingForks+=RatingFork ("," RatingForks+=RatingFork)* ")")?;
		public ParserRule getRule() { return rule; }

		//{Rating} "Rating" ":" ("The"? "user")? ("may" | "is required")? ("to"? "rate"? question=EString)? ("between"? Min=EInt)?
		//("and"? Max=EInt)? ("where"? "lowest"? "means"? first=EString)? ("and"? "highest"? "means"? last=EString)?
		//("conditionals"? "(" RatingForks+=RatingFork ("," RatingForks+=RatingFork)* ")")?
		public Group getGroup() { return cGroup; }

		//{Rating}
		public Action getRatingAction_0() { return cRatingAction_0; }

		//"Rating"
		public Keyword getRatingKeyword_1() { return cRatingKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("The"? "user")?
		public Group getGroup_3() { return cGroup_3; }

		//"The"?
		public Keyword getTheKeyword_3_0() { return cTheKeyword_3_0; }

		//"user"
		public Keyword getUserKeyword_3_1() { return cUserKeyword_3_1; }

		//("may" | "is required")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"may"
		public Keyword getMayKeyword_4_0() { return cMayKeyword_4_0; }

		//"is required"
		public Keyword getIsRequiredKeyword_4_1() { return cIsRequiredKeyword_4_1; }

		//("to"? "rate"? question=EString)?
		public Group getGroup_5() { return cGroup_5; }

		//"to"?
		public Keyword getToKeyword_5_0() { return cToKeyword_5_0; }

		//"rate"?
		public Keyword getRateKeyword_5_1() { return cRateKeyword_5_1; }

		//question=EString
		public Assignment getQuestionAssignment_5_2() { return cQuestionAssignment_5_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_5_2_0() { return cQuestionEStringParserRuleCall_5_2_0; }

		//("between"? Min=EInt)?
		public Group getGroup_6() { return cGroup_6; }

		//"between"?
		public Keyword getBetweenKeyword_6_0() { return cBetweenKeyword_6_0; }

		//Min=EInt
		public Assignment getMinAssignment_6_1() { return cMinAssignment_6_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_6_1_0() { return cMinEIntParserRuleCall_6_1_0; }

		//("and"? Max=EInt)?
		public Group getGroup_7() { return cGroup_7; }

		//"and"?
		public Keyword getAndKeyword_7_0() { return cAndKeyword_7_0; }

		//Max=EInt
		public Assignment getMaxAssignment_7_1() { return cMaxAssignment_7_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_7_1_0() { return cMaxEIntParserRuleCall_7_1_0; }

		//("where"? "lowest"? "means"? first=EString)?
		public Group getGroup_8() { return cGroup_8; }

		//"where"?
		public Keyword getWhereKeyword_8_0() { return cWhereKeyword_8_0; }

		//"lowest"?
		public Keyword getLowestKeyword_8_1() { return cLowestKeyword_8_1; }

		//"means"?
		public Keyword getMeansKeyword_8_2() { return cMeansKeyword_8_2; }

		//first=EString
		public Assignment getFirstAssignment_8_3() { return cFirstAssignment_8_3; }

		//EString
		public RuleCall getFirstEStringParserRuleCall_8_3_0() { return cFirstEStringParserRuleCall_8_3_0; }

		//("and"? "highest"? "means"? last=EString)?
		public Group getGroup_9() { return cGroup_9; }

		//"and"?
		public Keyword getAndKeyword_9_0() { return cAndKeyword_9_0; }

		//"highest"?
		public Keyword getHighestKeyword_9_1() { return cHighestKeyword_9_1; }

		//"means"?
		public Keyword getMeansKeyword_9_2() { return cMeansKeyword_9_2; }

		//last=EString
		public Assignment getLastAssignment_9_3() { return cLastAssignment_9_3; }

		//EString
		public RuleCall getLastEStringParserRuleCall_9_3_0() { return cLastEStringParserRuleCall_9_3_0; }

		//("conditionals"? "(" RatingForks+=RatingFork ("," RatingForks+=RatingFork)* ")")?
		public Group getGroup_10() { return cGroup_10; }

		//"conditionals"?
		public Keyword getConditionalsKeyword_10_0() { return cConditionalsKeyword_10_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_1() { return cLeftParenthesisKeyword_10_1; }

		//RatingForks+=RatingFork
		public Assignment getRatingForksAssignment_10_2() { return cRatingForksAssignment_10_2; }

		//RatingFork
		public RuleCall getRatingForksRatingForkParserRuleCall_10_2_0() { return cRatingForksRatingForkParserRuleCall_10_2_0; }

		//("," RatingForks+=RatingFork)*
		public Group getGroup_10_3() { return cGroup_10_3; }

		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }

		//RatingForks+=RatingFork
		public Assignment getRatingForksAssignment_10_3_1() { return cRatingForksAssignment_10_3_1; }

		//RatingFork
		public RuleCall getRatingForksRatingForkParserRuleCall_10_3_1_0() { return cRatingForksRatingForkParserRuleCall_10_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }
	}

	public class RankingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ranking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRankingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIsRequiredKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAskKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQuestionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQuestionEStringParserRuleCall_3_1_0 = (RuleCall)cQuestionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cYouKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cCanKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cChooseKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cFromKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cTheseKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cChoicesAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cChoicesChoiceParserRuleCall_4_5_0 = (RuleCall)cChoicesAssignment_4_5.eContents().get(0);
		private final Group cGroup_4_6 = (Group)cGroup_4.eContents().get(6);
		private final Keyword cCommaKeyword_4_6_0 = (Keyword)cGroup_4_6.eContents().get(0);
		private final Assignment cChoicesAssignment_4_6_1 = (Assignment)cGroup_4_6.eContents().get(1);
		private final RuleCall cChoicesChoiceParserRuleCall_4_6_1_0 = (RuleCall)cChoicesAssignment_4_6_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConditionalsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cForksAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cForksRankingForkParserRuleCall_5_2_0 = (RuleCall)cForksAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cForksAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cForksRankingForkParserRuleCall_5_3_1_0 = (RuleCall)cForksAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//Ranking:
		//	"Ranking" ":" "is required"? ("ask"? question=EString)? ("you"? "can"? "choose" "from"? "these"? choices+=Choice (","
		//	choices+=Choice)*)? ("conditionals"? "(" forks+=RankingFork ("," forks+=RankingFork)* ")")?;
		public ParserRule getRule() { return rule; }

		//"Ranking" ":" "is required"? ("ask"? question=EString)? ("you"? "can"? "choose" "from"? "these"? choices+=Choice (","
		//choices+=Choice)*)? ("conditionals"? "(" forks+=RankingFork ("," forks+=RankingFork)* ")")?
		public Group getGroup() { return cGroup; }

		//"Ranking"
		public Keyword getRankingKeyword_0() { return cRankingKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"is required"?
		public Keyword getIsRequiredKeyword_2() { return cIsRequiredKeyword_2; }

		//("ask"? question=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"ask"?
		public Keyword getAskKeyword_3_0() { return cAskKeyword_3_0; }

		//question=EString
		public Assignment getQuestionAssignment_3_1() { return cQuestionAssignment_3_1; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_3_1_0() { return cQuestionEStringParserRuleCall_3_1_0; }

		//("you"? "can"? "choose" "from"? "these"? choices+=Choice ("," choices+=Choice)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"you"?
		public Keyword getYouKeyword_4_0() { return cYouKeyword_4_0; }

		//"can"?
		public Keyword getCanKeyword_4_1() { return cCanKeyword_4_1; }

		//"choose"
		public Keyword getChooseKeyword_4_2() { return cChooseKeyword_4_2; }

		//"from"?
		public Keyword getFromKeyword_4_3() { return cFromKeyword_4_3; }

		//"these"?
		public Keyword getTheseKeyword_4_4() { return cTheseKeyword_4_4; }

		//choices+=Choice
		public Assignment getChoicesAssignment_4_5() { return cChoicesAssignment_4_5; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_4_5_0() { return cChoicesChoiceParserRuleCall_4_5_0; }

		//("," choices+=Choice)*
		public Group getGroup_4_6() { return cGroup_4_6; }

		//","
		public Keyword getCommaKeyword_4_6_0() { return cCommaKeyword_4_6_0; }

		//choices+=Choice
		public Assignment getChoicesAssignment_4_6_1() { return cChoicesAssignment_4_6_1; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_4_6_1_0() { return cChoicesChoiceParserRuleCall_4_6_1_0; }

		//("conditionals"? "(" forks+=RankingFork ("," forks+=RankingFork)* ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"conditionals"?
		public Keyword getConditionalsKeyword_5_0() { return cConditionalsKeyword_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//forks+=RankingFork
		public Assignment getForksAssignment_5_2() { return cForksAssignment_5_2; }

		//RankingFork
		public RuleCall getForksRankingForkParserRuleCall_5_2_0() { return cForksRankingForkParserRuleCall_5_2_0; }

		//("," forks+=RankingFork)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//forks+=RankingFork
		public Assignment getForksAssignment_5_3_1() { return cForksAssignment_5_3_1; }

		//RankingFork
		public RuleCall getForksRankingForkParserRuleCall_5_3_1_0() { return cForksRankingForkParserRuleCall_5_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
	}

	public class DichotomousElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dichotomous");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDichotomousAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDichotomousKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cUserKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cMayKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cIsRequiredKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cAnswerKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cQuestionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_5_2_0 = (RuleCall)cQuestionAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cIfYesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cYesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cYesQuestionParserRuleCall_6_2_0 = (RuleCall)cYesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cYesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cYesQuestionParserRuleCall_6_3_1_0 = (RuleCall)cYesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cIfNoKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cNoAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cNoQuestionParserRuleCall_7_2_0 = (RuleCall)cNoAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cNoAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cNoQuestionParserRuleCall_7_3_1_0 = (RuleCall)cNoAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		
		//Dichotomous:
		//	{Dichotomous} "Dichotomous" ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?
		//	("if yes" "(" yes+=Question ("," yes+=Question)* ")")? ("if no" "(" no+=Question ("," no+=Question)* ")")?;
		public ParserRule getRule() { return rule; }

		//{Dichotomous} "Dichotomous" ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)? ("if yes"
		//"(" yes+=Question ("," yes+=Question)* ")")? ("if no" "(" no+=Question ("," no+=Question)* ")")?
		public Group getGroup() { return cGroup; }

		//{Dichotomous}
		public Action getDichotomousAction_0() { return cDichotomousAction_0; }

		//"Dichotomous"
		public Keyword getDichotomousKeyword_1() { return cDichotomousKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("The"? "user")?
		public Group getGroup_3() { return cGroup_3; }

		//"The"?
		public Keyword getTheKeyword_3_0() { return cTheKeyword_3_0; }

		//"user"
		public Keyword getUserKeyword_3_1() { return cUserKeyword_3_1; }

		//("may" | "is required")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"may"
		public Keyword getMayKeyword_4_0() { return cMayKeyword_4_0; }

		//"is required"
		public Keyword getIsRequiredKeyword_4_1() { return cIsRequiredKeyword_4_1; }

		//("to"? "answer"? question=EString)?
		public Group getGroup_5() { return cGroup_5; }

		//"to"?
		public Keyword getToKeyword_5_0() { return cToKeyword_5_0; }

		//"answer"?
		public Keyword getAnswerKeyword_5_1() { return cAnswerKeyword_5_1; }

		//question=EString
		public Assignment getQuestionAssignment_5_2() { return cQuestionAssignment_5_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_5_2_0() { return cQuestionEStringParserRuleCall_5_2_0; }

		//("if yes" "(" yes+=Question ("," yes+=Question)* ")")?
		public Group getGroup_6() { return cGroup_6; }

		//"if yes"
		public Keyword getIfYesKeyword_6_0() { return cIfYesKeyword_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//yes+=Question
		public Assignment getYesAssignment_6_2() { return cYesAssignment_6_2; }

		//Question
		public RuleCall getYesQuestionParserRuleCall_6_2_0() { return cYesQuestionParserRuleCall_6_2_0; }

		//("," yes+=Question)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//yes+=Question
		public Assignment getYesAssignment_6_3_1() { return cYesAssignment_6_3_1; }

		//Question
		public RuleCall getYesQuestionParserRuleCall_6_3_1_0() { return cYesQuestionParserRuleCall_6_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }

		//("if no" "(" no+=Question ("," no+=Question)* ")")?
		public Group getGroup_7() { return cGroup_7; }

		//"if no"
		public Keyword getIfNoKeyword_7_0() { return cIfNoKeyword_7_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//no+=Question
		public Assignment getNoAssignment_7_2() { return cNoAssignment_7_2; }

		//Question
		public RuleCall getNoQuestionParserRuleCall_7_2_0() { return cNoQuestionParserRuleCall_7_2_0; }

		//("," no+=Question)*
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//no+=Question
		public Assignment getNoAssignment_7_3_1() { return cNoAssignment_7_3_1; }

		//Question
		public RuleCall getNoQuestionParserRuleCall_7_3_1_0() { return cNoQuestionParserRuleCall_7_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
	}

	public class SumConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSumConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSumConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cUserKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cMayKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cIsRequiredKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cDivideKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cAccordingKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cToKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cTheKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cImportanceKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Assignment cQuestionAssignment_5_6 = (Assignment)cGroup_5.eContents().get(6);
		private final RuleCall cQuestionEStringParserRuleCall_5_6_0 = (RuleCall)cQuestionAssignment_5_6.eContents().get(0);
		
		//SumConstant:
		//	{SumConstant} "SumConstant" ":" ("The"? "user")? ("may" | "is required")? ("to"? "divide"? "according"? "to"? "the"?
		//	"importance"? question=EString)?;
		public ParserRule getRule() { return rule; }

		//{SumConstant} "SumConstant" ":" ("The"? "user")? ("may" | "is required")? ("to"? "divide"? "according"? "to"? "the"?
		//"importance"? question=EString)?
		public Group getGroup() { return cGroup; }

		//{SumConstant}
		public Action getSumConstantAction_0() { return cSumConstantAction_0; }

		//"SumConstant"
		public Keyword getSumConstantKeyword_1() { return cSumConstantKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("The"? "user")?
		public Group getGroup_3() { return cGroup_3; }

		//"The"?
		public Keyword getTheKeyword_3_0() { return cTheKeyword_3_0; }

		//"user"
		public Keyword getUserKeyword_3_1() { return cUserKeyword_3_1; }

		//("may" | "is required")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"may"
		public Keyword getMayKeyword_4_0() { return cMayKeyword_4_0; }

		//"is required"
		public Keyword getIsRequiredKeyword_4_1() { return cIsRequiredKeyword_4_1; }

		//("to"? "divide"? "according"? "to"? "the"? "importance"? question=EString)?
		public Group getGroup_5() { return cGroup_5; }

		//"to"?
		public Keyword getToKeyword_5_0() { return cToKeyword_5_0; }

		//"divide"?
		public Keyword getDivideKeyword_5_1() { return cDivideKeyword_5_1; }

		//"according"?
		public Keyword getAccordingKeyword_5_2() { return cAccordingKeyword_5_2; }

		//"to"?
		public Keyword getToKeyword_5_3() { return cToKeyword_5_3; }

		//"the"?
		public Keyword getTheKeyword_5_4() { return cTheKeyword_5_4; }

		//"importance"?
		public Keyword getImportanceKeyword_5_5() { return cImportanceKeyword_5_5; }

		//question=EString
		public Assignment getQuestionAssignment_5_6() { return cQuestionAssignment_5_6; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_5_6_0() { return cQuestionEStringParserRuleCall_5_6_0; }
	}

	public class StapleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Staple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStapleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStapleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cUserKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cMayKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cIsRequiredKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cRateKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cQuestionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_5_2_0 = (RuleCall)cQuestionAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cBetweenKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMinAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_6_1_0 = (RuleCall)cMinAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAndKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cMaxAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_7_1_0 = (RuleCall)cMaxAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWhereKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLowestKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cMeansKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cFirstAssignment_8_4 = (Assignment)cGroup_8.eContents().get(4);
		private final RuleCall cFirstEStringParserRuleCall_8_4_0 = (RuleCall)cFirstAssignment_8_4.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cMeanKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cMeansKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cMidAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cMidEStringParserRuleCall_9_2_0 = (RuleCall)cMidAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAndKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cHighestKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cMeansKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cLastAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cLastEStringParserRuleCall_10_3_0 = (RuleCall)cLastAssignment_10_3.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cConditionalsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cRatingForksAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cRatingForksRatingForkParserRuleCall_11_1_0 = (RuleCall)cRatingForksAssignment_11_1.eContents().get(0);
		private final Group cGroup_11_2 = (Group)cGroup_11.eContents().get(2);
		private final Keyword cCommaKeyword_11_2_0 = (Keyword)cGroup_11_2.eContents().get(0);
		private final Assignment cRatingForksAssignment_11_2_1 = (Assignment)cGroup_11_2.eContents().get(1);
		private final RuleCall cRatingForksRatingForkParserRuleCall_11_2_1_0 = (RuleCall)cRatingForksAssignment_11_2_1.eContents().get(0);
		
		//Staple:
		//	{Staple} "Staple" ":" ("The"? "user")? ("may" | "is required")? ("to"? "rate"? question=EString)? ("between"?
		//	Min=EInt)? ("and"? Max=EInt)? ("where"? "lowest"? "means"? ","? first=EString)? ("mean"? "means"? mid=EString)?
		//	("and"? "highest"? "means"? last=EString)? ("conditionals" RatingForks+=RatingFork ("," RatingForks+=RatingFork)*)?;
		public ParserRule getRule() { return rule; }

		//{Staple} "Staple" ":" ("The"? "user")? ("may" | "is required")? ("to"? "rate"? question=EString)? ("between"? Min=EInt)?
		//("and"? Max=EInt)? ("where"? "lowest"? "means"? ","? first=EString)? ("mean"? "means"? mid=EString)? ("and"?
		//"highest"? "means"? last=EString)? ("conditionals" RatingForks+=RatingFork ("," RatingForks+=RatingFork)*)?
		public Group getGroup() { return cGroup; }

		//{Staple}
		public Action getStapleAction_0() { return cStapleAction_0; }

		//"Staple"
		public Keyword getStapleKeyword_1() { return cStapleKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("The"? "user")?
		public Group getGroup_3() { return cGroup_3; }

		//"The"?
		public Keyword getTheKeyword_3_0() { return cTheKeyword_3_0; }

		//"user"
		public Keyword getUserKeyword_3_1() { return cUserKeyword_3_1; }

		//("may" | "is required")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"may"
		public Keyword getMayKeyword_4_0() { return cMayKeyword_4_0; }

		//"is required"
		public Keyword getIsRequiredKeyword_4_1() { return cIsRequiredKeyword_4_1; }

		//("to"? "rate"? question=EString)?
		public Group getGroup_5() { return cGroup_5; }

		//"to"?
		public Keyword getToKeyword_5_0() { return cToKeyword_5_0; }

		//"rate"?
		public Keyword getRateKeyword_5_1() { return cRateKeyword_5_1; }

		//question=EString
		public Assignment getQuestionAssignment_5_2() { return cQuestionAssignment_5_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_5_2_0() { return cQuestionEStringParserRuleCall_5_2_0; }

		//("between"? Min=EInt)?
		public Group getGroup_6() { return cGroup_6; }

		//"between"?
		public Keyword getBetweenKeyword_6_0() { return cBetweenKeyword_6_0; }

		//Min=EInt
		public Assignment getMinAssignment_6_1() { return cMinAssignment_6_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_6_1_0() { return cMinEIntParserRuleCall_6_1_0; }

		//("and"? Max=EInt)?
		public Group getGroup_7() { return cGroup_7; }

		//"and"?
		public Keyword getAndKeyword_7_0() { return cAndKeyword_7_0; }

		//Max=EInt
		public Assignment getMaxAssignment_7_1() { return cMaxAssignment_7_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_7_1_0() { return cMaxEIntParserRuleCall_7_1_0; }

		//("where"? "lowest"? "means"? ","? first=EString)?
		public Group getGroup_8() { return cGroup_8; }

		//"where"?
		public Keyword getWhereKeyword_8_0() { return cWhereKeyword_8_0; }

		//"lowest"?
		public Keyword getLowestKeyword_8_1() { return cLowestKeyword_8_1; }

		//"means"?
		public Keyword getMeansKeyword_8_2() { return cMeansKeyword_8_2; }

		//","?
		public Keyword getCommaKeyword_8_3() { return cCommaKeyword_8_3; }

		//first=EString
		public Assignment getFirstAssignment_8_4() { return cFirstAssignment_8_4; }

		//EString
		public RuleCall getFirstEStringParserRuleCall_8_4_0() { return cFirstEStringParserRuleCall_8_4_0; }

		//("mean"? "means"? mid=EString)?
		public Group getGroup_9() { return cGroup_9; }

		//"mean"?
		public Keyword getMeanKeyword_9_0() { return cMeanKeyword_9_0; }

		//"means"?
		public Keyword getMeansKeyword_9_1() { return cMeansKeyword_9_1; }

		//mid=EString
		public Assignment getMidAssignment_9_2() { return cMidAssignment_9_2; }

		//EString
		public RuleCall getMidEStringParserRuleCall_9_2_0() { return cMidEStringParserRuleCall_9_2_0; }

		//("and"? "highest"? "means"? last=EString)?
		public Group getGroup_10() { return cGroup_10; }

		//"and"?
		public Keyword getAndKeyword_10_0() { return cAndKeyword_10_0; }

		//"highest"?
		public Keyword getHighestKeyword_10_1() { return cHighestKeyword_10_1; }

		//"means"?
		public Keyword getMeansKeyword_10_2() { return cMeansKeyword_10_2; }

		//last=EString
		public Assignment getLastAssignment_10_3() { return cLastAssignment_10_3; }

		//EString
		public RuleCall getLastEStringParserRuleCall_10_3_0() { return cLastEStringParserRuleCall_10_3_0; }

		//("conditionals" RatingForks+=RatingFork ("," RatingForks+=RatingFork)*)?
		public Group getGroup_11() { return cGroup_11; }

		//"conditionals"
		public Keyword getConditionalsKeyword_11_0() { return cConditionalsKeyword_11_0; }

		//RatingForks+=RatingFork
		public Assignment getRatingForksAssignment_11_1() { return cRatingForksAssignment_11_1; }

		//RatingFork
		public RuleCall getRatingForksRatingForkParserRuleCall_11_1_0() { return cRatingForksRatingForkParserRuleCall_11_1_0; }

		//("," RatingForks+=RatingFork)*
		public Group getGroup_11_2() { return cGroup_11_2; }

		//","
		public Keyword getCommaKeyword_11_2_0() { return cCommaKeyword_11_2_0; }

		//RatingForks+=RatingFork
		public Assignment getRatingForksAssignment_11_2_1() { return cRatingForksAssignment_11_2_1; }

		//RatingFork
		public RuleCall getRatingForksRatingForkParserRuleCall_11_2_1_0() { return cRatingForksRatingForkParserRuleCall_11_2_1_0; }
	}

	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//Choice:
		//	name=ID ":" Description=EString;
		public ParserRule getRule() { return rule; }

		//name=ID ":" Description=EString
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//Description=EString
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_2_0() { return cDescriptionEStringParserRuleCall_2_0; }
	}

	public class MultipleChoiceForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultipleChoiceFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMatcherAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMatcherChoiceCrossReference_1_0 = (CrossReference)cMatcherAssignment_1.eContents().get(0);
		private final RuleCall cMatcherChoiceIDTerminalRuleCall_1_0_1 = (RuleCall)cMatcherChoiceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cQuestionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cForkedquestionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cForkedquestionsQuestionParserRuleCall_2_2_0 = (RuleCall)cForkedquestionsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cForkedquestionsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cForkedquestionsQuestionParserRuleCall_2_3_1_0 = (RuleCall)cForkedquestionsAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//MultipleChoiceFork:
		//	"match" matcher=[Choice] ("questions" "(" forkedquestions+=Question ("," forkedquestions+=Question)* ")")?;
		public ParserRule getRule() { return rule; }

		//"match" matcher=[Choice] ("questions" "(" forkedquestions+=Question ("," forkedquestions+=Question)* ")")?
		public Group getGroup() { return cGroup; }

		//"match"
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }

		//matcher=[Choice]
		public Assignment getMatcherAssignment_1() { return cMatcherAssignment_1; }

		//[Choice]
		public CrossReference getMatcherChoiceCrossReference_1_0() { return cMatcherChoiceCrossReference_1_0; }

		//ID
		public RuleCall getMatcherChoiceIDTerminalRuleCall_1_0_1() { return cMatcherChoiceIDTerminalRuleCall_1_0_1; }

		//("questions" "(" forkedquestions+=Question ("," forkedquestions+=Question)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"questions"
		public Keyword getQuestionsKeyword_2_0() { return cQuestionsKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//forkedquestions+=Question
		public Assignment getForkedquestionsAssignment_2_2() { return cForkedquestionsAssignment_2_2; }

		//Question
		public RuleCall getForkedquestionsQuestionParserRuleCall_2_2_0() { return cForkedquestionsQuestionParserRuleCall_2_2_0; }

		//("," forkedquestions+=Question)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//forkedquestions+=Question
		public Assignment getForkedquestionsAssignment_2_3_1() { return cForkedquestionsAssignment_2_3_1; }

		//Question
		public RuleCall getForkedquestionsQuestionParserRuleCall_2_3_1_0() { return cForkedquestionsQuestionParserRuleCall_2_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class RatingForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RatingFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRatingForkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRatingForkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMinAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_3_1_0 = (RuleCall)cMinAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMaxAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_4_1_0 = (RuleCall)cMaxAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cQuestionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cForkedquestionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cForkedquestionQuestionParserRuleCall_5_2_0 = (RuleCall)cForkedquestionAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cForkedquestionAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cForkedquestionQuestionParserRuleCall_5_3_1_0 = (RuleCall)cForkedquestionAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//RatingFork:
		//	{RatingFork} "RatingFork" ":" ("from" min=EInt)? ("to" max=EInt)? ("questions" "(" forkedquestion+=Question (","
		//	forkedquestion+=Question)* ")")?;
		public ParserRule getRule() { return rule; }

		//{RatingFork} "RatingFork" ":" ("from" min=EInt)? ("to" max=EInt)? ("questions" "(" forkedquestion+=Question (","
		//forkedquestion+=Question)* ")")?
		public Group getGroup() { return cGroup; }

		//{RatingFork}
		public Action getRatingForkAction_0() { return cRatingForkAction_0; }

		//"RatingFork"
		public Keyword getRatingForkKeyword_1() { return cRatingForkKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("from" min=EInt)?
		public Group getGroup_3() { return cGroup_3; }

		//"from"
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//min=EInt
		public Assignment getMinAssignment_3_1() { return cMinAssignment_3_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_3_1_0() { return cMinEIntParserRuleCall_3_1_0; }

		//("to" max=EInt)?
		public Group getGroup_4() { return cGroup_4; }

		//"to"
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }

		//max=EInt
		public Assignment getMaxAssignment_4_1() { return cMaxAssignment_4_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_4_1_0() { return cMaxEIntParserRuleCall_4_1_0; }

		//("questions" "(" forkedquestion+=Question ("," forkedquestion+=Question)* ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"questions"
		public Keyword getQuestionsKeyword_5_0() { return cQuestionsKeyword_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//forkedquestion+=Question
		public Assignment getForkedquestionAssignment_5_2() { return cForkedquestionAssignment_5_2; }

		//Question
		public RuleCall getForkedquestionQuestionParserRuleCall_5_2_0() { return cForkedquestionQuestionParserRuleCall_5_2_0; }

		//("," forkedquestion+=Question)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//forkedquestion+=Question
		public Assignment getForkedquestionAssignment_5_3_1() { return cForkedquestionAssignment_5_3_1; }

		//Question
		public RuleCall getForkedquestionQuestionParserRuleCall_5_3_1_0() { return cForkedquestionQuestionParserRuleCall_5_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
	}

	public class RankingForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RankingFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRankingForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_2_1_0 = (RuleCall)cMinAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cToKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMaxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_3_1_0 = (RuleCall)cMaxAssignment_3_1.eContents().get(0);
		private final Keyword cMatchKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMatcherAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cMatcherChoiceCrossReference_6_0 = (CrossReference)cMatcherAssignment_6.eContents().get(0);
		private final RuleCall cMatcherChoiceIDTerminalRuleCall_6_0_1 = (RuleCall)cMatcherChoiceCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cQuestionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cForkedquestionsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cForkedquestionsQuestionParserRuleCall_7_2_0 = (RuleCall)cForkedquestionsAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cForkedquestionsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cForkedquestionsQuestionParserRuleCall_7_3_1_0 = (RuleCall)cForkedquestionsAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		
		//RankingFork:
		//	"RankingFork" ":" ("from" min=EInt)? ("to" max=EInt)? "match"? "with"? matcher=[Choice] ("questions" "("
		//	forkedquestions+=Question ("," forkedquestions+=Question)* ")")?;
		public ParserRule getRule() { return rule; }

		//"RankingFork" ":" ("from" min=EInt)? ("to" max=EInt)? "match"? "with"? matcher=[Choice] ("questions" "("
		//forkedquestions+=Question ("," forkedquestions+=Question)* ")")?
		public Group getGroup() { return cGroup; }

		//"RankingFork"
		public Keyword getRankingForkKeyword_0() { return cRankingForkKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//("from" min=EInt)?
		public Group getGroup_2() { return cGroup_2; }

		//"from"
		public Keyword getFromKeyword_2_0() { return cFromKeyword_2_0; }

		//min=EInt
		public Assignment getMinAssignment_2_1() { return cMinAssignment_2_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_2_1_0() { return cMinEIntParserRuleCall_2_1_0; }

		//("to" max=EInt)?
		public Group getGroup_3() { return cGroup_3; }

		//"to"
		public Keyword getToKeyword_3_0() { return cToKeyword_3_0; }

		//max=EInt
		public Assignment getMaxAssignment_3_1() { return cMaxAssignment_3_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_3_1_0() { return cMaxEIntParserRuleCall_3_1_0; }

		//"match"?
		public Keyword getMatchKeyword_4() { return cMatchKeyword_4; }

		//"with"?
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }

		//matcher=[Choice]
		public Assignment getMatcherAssignment_6() { return cMatcherAssignment_6; }

		//[Choice]
		public CrossReference getMatcherChoiceCrossReference_6_0() { return cMatcherChoiceCrossReference_6_0; }

		//ID
		public RuleCall getMatcherChoiceIDTerminalRuleCall_6_0_1() { return cMatcherChoiceIDTerminalRuleCall_6_0_1; }

		//("questions" "(" forkedquestions+=Question ("," forkedquestions+=Question)* ")")?
		public Group getGroup_7() { return cGroup_7; }

		//"questions"
		public Keyword getQuestionsKeyword_7_0() { return cQuestionsKeyword_7_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//forkedquestions+=Question
		public Assignment getForkedquestionsAssignment_7_2() { return cForkedquestionsAssignment_7_2; }

		//Question
		public RuleCall getForkedquestionsQuestionParserRuleCall_7_2_0() { return cForkedquestionsQuestionParserRuleCall_7_2_0; }

		//("," forkedquestions+=Question)*
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//forkedquestions+=Question
		public Assignment getForkedquestionsAssignment_7_3_1() { return cForkedquestionsAssignment_7_3_1; }

		//Question
		public RuleCall getForkedquestionsQuestionParserRuleCall_7_3_1_0() { return cForkedquestionsQuestionParserRuleCall_7_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
	}
	
	
	private ModelElements pModel;
	private QuestionElements pQuestion;
	private SurveyElements pSurvey;
	private EStringElements pEString;
	private EBooleanElements pEBoolean;
	private MultipleChoiceElements pMultipleChoice;
	private OpenElements pOpen;
	private Rating_ImplElements pRating_Impl;
	private RankingElements pRanking;
	private DichotomousElements pDichotomous;
	private SumConstantElements pSumConstant;
	private StapleElements pStaple;
	private ChoiceElements pChoice;
	private MultipleChoiceForkElements pMultipleChoiceFork;
	private EIntElements pEInt;
	private RatingForkElements pRatingFork;
	private RankingForkElements pRankingFork;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SurveyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.mddp.eank.survey.Survey".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} surveys+=Survey?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Question:
	//	MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Survey:
	//	{Survey} name=ID ":" (questions+=Question (";" questions+=Question)*)?;
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//MultipleChoice:
	//	{MultipleChoice} "MultipleChoice" ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?
	//	("with"? ("one" | "some of")? "these:"? choice+=Choice ("," choice+=Choice)*)? ("or" "with"? "something"? "else"?
	//	other=EString)? ("conditionals"? ":" MultipleChoiceForks+=MultipleChoiceFork (","
	//	MultipleChoiceForks+=MultipleChoiceFork)*)?;
	public MultipleChoiceElements getMultipleChoiceAccess() {
		return (pMultipleChoice != null) ? pMultipleChoice : (pMultipleChoice = new MultipleChoiceElements());
	}
	
	public ParserRule getMultipleChoiceRule() {
		return getMultipleChoiceAccess().getRule();
	}

	//Open:
	//	{Open} "Open" ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?;
	public OpenElements getOpenAccess() {
		return (pOpen != null) ? pOpen : (pOpen = new OpenElements());
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}

	//Rating_Impl returns Rating:
	//	{Rating} "Rating" ":" ("The"? "user")? ("may" | "is required")? ("to"? "rate"? question=EString)? ("between"?
	//	Min=EInt)? ("and"? Max=EInt)? ("where"? "lowest"? "means"? first=EString)? ("and"? "highest"? "means"? last=EString)?
	//	("conditionals"? "(" RatingForks+=RatingFork ("," RatingForks+=RatingFork)* ")")?;
	public Rating_ImplElements getRating_ImplAccess() {
		return (pRating_Impl != null) ? pRating_Impl : (pRating_Impl = new Rating_ImplElements());
	}
	
	public ParserRule getRating_ImplRule() {
		return getRating_ImplAccess().getRule();
	}

	//Ranking:
	//	"Ranking" ":" "is required"? ("ask"? question=EString)? ("you"? "can"? "choose" "from"? "these"? choices+=Choice (","
	//	choices+=Choice)*)? ("conditionals"? "(" forks+=RankingFork ("," forks+=RankingFork)* ")")?;
	public RankingElements getRankingAccess() {
		return (pRanking != null) ? pRanking : (pRanking = new RankingElements());
	}
	
	public ParserRule getRankingRule() {
		return getRankingAccess().getRule();
	}

	//Dichotomous:
	//	{Dichotomous} "Dichotomous" ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?
	//	("if yes" "(" yes+=Question ("," yes+=Question)* ")")? ("if no" "(" no+=Question ("," no+=Question)* ")")?;
	public DichotomousElements getDichotomousAccess() {
		return (pDichotomous != null) ? pDichotomous : (pDichotomous = new DichotomousElements());
	}
	
	public ParserRule getDichotomousRule() {
		return getDichotomousAccess().getRule();
	}

	//SumConstant:
	//	{SumConstant} "SumConstant" ":" ("The"? "user")? ("may" | "is required")? ("to"? "divide"? "according"? "to"? "the"?
	//	"importance"? question=EString)?;
	public SumConstantElements getSumConstantAccess() {
		return (pSumConstant != null) ? pSumConstant : (pSumConstant = new SumConstantElements());
	}
	
	public ParserRule getSumConstantRule() {
		return getSumConstantAccess().getRule();
	}

	//Staple:
	//	{Staple} "Staple" ":" ("The"? "user")? ("may" | "is required")? ("to"? "rate"? question=EString)? ("between"?
	//	Min=EInt)? ("and"? Max=EInt)? ("where"? "lowest"? "means"? ","? first=EString)? ("mean"? "means"? mid=EString)?
	//	("and"? "highest"? "means"? last=EString)? ("conditionals" RatingForks+=RatingFork ("," RatingForks+=RatingFork)*)?;
	public StapleElements getStapleAccess() {
		return (pStaple != null) ? pStaple : (pStaple = new StapleElements());
	}
	
	public ParserRule getStapleRule() {
		return getStapleAccess().getRule();
	}

	//Choice:
	//	name=ID ":" Description=EString;
	public ChoiceElements getChoiceAccess() {
		return (pChoice != null) ? pChoice : (pChoice = new ChoiceElements());
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}

	//MultipleChoiceFork:
	//	"match" matcher=[Choice] ("questions" "(" forkedquestions+=Question ("," forkedquestions+=Question)* ")")?;
	public MultipleChoiceForkElements getMultipleChoiceForkAccess() {
		return (pMultipleChoiceFork != null) ? pMultipleChoiceFork : (pMultipleChoiceFork = new MultipleChoiceForkElements());
	}
	
	public ParserRule getMultipleChoiceForkRule() {
		return getMultipleChoiceForkAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//RatingFork:
	//	{RatingFork} "RatingFork" ":" ("from" min=EInt)? ("to" max=EInt)? ("questions" "(" forkedquestion+=Question (","
	//	forkedquestion+=Question)* ")")?;
	public RatingForkElements getRatingForkAccess() {
		return (pRatingFork != null) ? pRatingFork : (pRatingFork = new RatingForkElements());
	}
	
	public ParserRule getRatingForkRule() {
		return getRatingForkAccess().getRule();
	}

	//RankingFork:
	//	"RankingFork" ":" ("from" min=EInt)? ("to" max=EInt)? "match"? "with"? matcher=[Choice] ("questions" "("
	//	forkedquestions+=Question ("," forkedquestions+=Question)* ")")?;
	public RankingForkElements getRankingForkAccess() {
		return (pRankingFork != null) ? pRankingFork : (pRankingFork = new RankingForkElements());
	}
	
	public ParserRule getRankingForkRule() {
		return getRankingForkAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
