/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSurveyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cQuestionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cQuestionsQuestionParserRuleCall_2_0_0 = (RuleCall)cQuestionsAssignment_2_0.eContents().get(0);
		private final Assignment cQuestionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQuestionsQuestionParserRuleCall_2_1_0 = (RuleCall)cQuestionsAssignment_2_1.eContents().get(0);
		
		//Survey:
		//	{Survey} name=ID (questions+=Question questions+=Question*)?;
		public ParserRule getRule() { return rule; }

		//{Survey} name=ID (questions+=Question questions+=Question*)?
		public Group getGroup() { return cGroup; }

		//{Survey}
		public Action getSurveyAction_0() { return cSurveyAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(questions+=Question questions+=Question*)?
		public Group getGroup_2() { return cGroup_2; }

		//questions+=Question
		public Assignment getQuestionsAssignment_2_0() { return cQuestionsAssignment_2_0; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_2_0_0() { return cQuestionsQuestionParserRuleCall_2_0_0; }

		//questions+=Question*
		public Assignment getQuestionsAssignment_2_1() { return cQuestionsAssignment_2_1; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_2_1_0() { return cQuestionsQuestionParserRuleCall_2_1_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultipleChoiceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOpenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRating_ImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRankingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstantSumParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStapleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Question:
		//	MultipleChoice | Open | Rating_Impl | Ranking | ConstantSum | Staple;
		public ParserRule getRule() { return rule; }

		//MultipleChoice | Open | Rating_Impl | Ranking | ConstantSum | Staple
		public Alternatives getAlternatives() { return cAlternatives; }

		//MultipleChoice
		public RuleCall getMultipleChoiceParserRuleCall_0() { return cMultipleChoiceParserRuleCall_0; }

		//Open
		public RuleCall getOpenParserRuleCall_1() { return cOpenParserRuleCall_1; }

		//Rating_Impl
		public RuleCall getRating_ImplParserRuleCall_2() { return cRating_ImplParserRuleCall_2; }

		//Ranking
		public RuleCall getRankingParserRuleCall_3() { return cRankingParserRuleCall_3; }

		//ConstantSum
		public RuleCall getConstantSumParserRuleCall_4() { return cConstantSumParserRuleCall_4; }

		//Staple
		public RuleCall getStapleParserRuleCall_5() { return cStapleParserRuleCall_5; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class MultipleChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultipleChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultipleChoiceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMultipleChoiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cIsRequiredAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final Keyword cIsRequiredIsKeyword_5_1_0_0 = (Keyword)cIsRequiredAssignment_5_1_0.eContents().get(0);
		private final Keyword cRequiredKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cAnswerKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cQuestionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cQuestionEStringParserRuleCall_8_0 = (RuleCall)cQuestionAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cByKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cPickingKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cUpToKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cAnswerCountAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cAnswerCountEIntParserRuleCall_9_3_0 = (RuleCall)cAnswerCountAssignment_9_3.eContents().get(0);
		private final Keyword cOfKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cTheseKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cChoiceAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cChoiceChoiceParserRuleCall_12_0 = (RuleCall)cChoiceAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cChoiceAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cChoiceChoiceParserRuleCall_13_1_0 = (RuleCall)cChoiceAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cOrKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cOtherAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cOtherEStringParserRuleCall_14_1_0 = (RuleCall)cOtherAssignment_14_1.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Assignment cForksAssignment_15_0 = (Assignment)cGroup_15.eContents().get(0);
		private final RuleCall cForksChoiceForkParserRuleCall_15_0_0 = (RuleCall)cForksAssignment_15_0.eContents().get(0);
		private final Assignment cForksAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cForksChoiceForkParserRuleCall_15_1_0 = (RuleCall)cForksAssignment_15_1.eContents().get(0);
		
		//MultipleChoice:
		//	{MultipleChoice} "MultipleChoice" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? "answer"?
		//	question=EString ("by"? "picking" "up to"? answerCount=EInt)? "of"? "these"? choice+=Choice ("," choice+=Choice)*
		//	("or" other=EString)? (forks+=ChoiceFork forks+=ChoiceFork*)?;
		public ParserRule getRule() { return rule; }

		//{MultipleChoice} "MultipleChoice" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? "answer"?
		//question=EString ("by"? "picking" "up to"? answerCount=EInt)? "of"? "these"? choice+=Choice ("," choice+=Choice)*
		//("or" other=EString)? (forks+=ChoiceFork forks+=ChoiceFork*)?
		public Group getGroup() { return cGroup; }

		//{MultipleChoice}
		public Action getMultipleChoiceAction_0() { return cMultipleChoiceAction_0; }

		//"MultipleChoice"
		public Keyword getMultipleChoiceKeyword_1() { return cMultipleChoiceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("the"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"the"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | isRequired?="is" "required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//isRequired?="is" "required"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//isRequired?="is"
		public Assignment getIsRequiredAssignment_5_1_0() { return cIsRequiredAssignment_5_1_0; }

		//"is"
		public Keyword getIsRequiredIsKeyword_5_1_0_0() { return cIsRequiredIsKeyword_5_1_0_0; }

		//"required"
		public Keyword getRequiredKeyword_5_1_1() { return cRequiredKeyword_5_1_1; }

		//"to"?
		public Keyword getToKeyword_6() { return cToKeyword_6; }

		//"answer"?
		public Keyword getAnswerKeyword_7() { return cAnswerKeyword_7; }

		//question=EString
		public Assignment getQuestionAssignment_8() { return cQuestionAssignment_8; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_8_0() { return cQuestionEStringParserRuleCall_8_0; }

		//("by"? "picking" "up to"? answerCount=EInt)?
		public Group getGroup_9() { return cGroup_9; }

		//"by"?
		public Keyword getByKeyword_9_0() { return cByKeyword_9_0; }

		//"picking"
		public Keyword getPickingKeyword_9_1() { return cPickingKeyword_9_1; }

		//"up to"?
		public Keyword getUpToKeyword_9_2() { return cUpToKeyword_9_2; }

		//answerCount=EInt
		public Assignment getAnswerCountAssignment_9_3() { return cAnswerCountAssignment_9_3; }

		//EInt
		public RuleCall getAnswerCountEIntParserRuleCall_9_3_0() { return cAnswerCountEIntParserRuleCall_9_3_0; }

		//"of"?
		public Keyword getOfKeyword_10() { return cOfKeyword_10; }

		//"these"?
		public Keyword getTheseKeyword_11() { return cTheseKeyword_11; }

		//choice+=Choice
		public Assignment getChoiceAssignment_12() { return cChoiceAssignment_12; }

		//Choice
		public RuleCall getChoiceChoiceParserRuleCall_12_0() { return cChoiceChoiceParserRuleCall_12_0; }

		//("," choice+=Choice)*
		public Group getGroup_13() { return cGroup_13; }

		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }

		//choice+=Choice
		public Assignment getChoiceAssignment_13_1() { return cChoiceAssignment_13_1; }

		//Choice
		public RuleCall getChoiceChoiceParserRuleCall_13_1_0() { return cChoiceChoiceParserRuleCall_13_1_0; }

		//("or" other=EString)?
		public Group getGroup_14() { return cGroup_14; }

		//"or"
		public Keyword getOrKeyword_14_0() { return cOrKeyword_14_0; }

		//other=EString
		public Assignment getOtherAssignment_14_1() { return cOtherAssignment_14_1; }

		//EString
		public RuleCall getOtherEStringParserRuleCall_14_1_0() { return cOtherEStringParserRuleCall_14_1_0; }

		//(forks+=ChoiceFork forks+=ChoiceFork*)?
		public Group getGroup_15() { return cGroup_15; }

		//forks+=ChoiceFork
		public Assignment getForksAssignment_15_0() { return cForksAssignment_15_0; }

		//ChoiceFork
		public RuleCall getForksChoiceForkParserRuleCall_15_0_0() { return cForksChoiceForkParserRuleCall_15_0_0; }

		//forks+=ChoiceFork*
		public Assignment getForksAssignment_15_1() { return cForksAssignment_15_1; }

		//ChoiceFork
		public RuleCall getForksChoiceForkParserRuleCall_15_1_0() { return cForksChoiceForkParserRuleCall_15_1_0; }
	}

	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Open");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpenAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOpenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cIsRequiredAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final Keyword cIsRequiredIsKeyword_5_1_0_0 = (Keyword)cIsRequiredAssignment_5_1_0.eContents().get(0);
		private final Keyword cRequiredKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cAnswerKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cQuestionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cQuestionEStringParserRuleCall_8_0 = (RuleCall)cQuestionAssignment_8.eContents().get(0);
		
		//Open:
		//	{Open} "Open" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? "answer"? question=EString;
		public ParserRule getRule() { return rule; }

		//{Open} "Open" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? "answer"? question=EString
		public Group getGroup() { return cGroup; }

		//{Open}
		public Action getOpenAction_0() { return cOpenAction_0; }

		//"Open"
		public Keyword getOpenKeyword_1() { return cOpenKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("the"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"the"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | isRequired?="is" "required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//isRequired?="is" "required"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//isRequired?="is"
		public Assignment getIsRequiredAssignment_5_1_0() { return cIsRequiredAssignment_5_1_0; }

		//"is"
		public Keyword getIsRequiredIsKeyword_5_1_0_0() { return cIsRequiredIsKeyword_5_1_0_0; }

		//"required"
		public Keyword getRequiredKeyword_5_1_1() { return cRequiredKeyword_5_1_1; }

		//"to"?
		public Keyword getToKeyword_6() { return cToKeyword_6; }

		//"answer"?
		public Keyword getAnswerKeyword_7() { return cAnswerKeyword_7; }

		//question=EString
		public Assignment getQuestionAssignment_8() { return cQuestionAssignment_8; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_8_0() { return cQuestionEStringParserRuleCall_8_0; }
	}

	public class Rating_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rating_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRatingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRatingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cIsRequiredAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final Keyword cIsRequiredIsKeyword_5_1_0_0 = (Keyword)cIsRequiredAssignment_5_1_0.eContents().get(0);
		private final Keyword cRequiredKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cRateKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Keyword cAnswerKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Assignment cQuestionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cQuestionEStringParserRuleCall_8_0 = (RuleCall)cQuestionAssignment_8.eContents().get(0);
		private final Keyword cBetweenKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cMinAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMinEIntParserRuleCall_10_0 = (RuleCall)cMinAssignment_10.eContents().get(0);
		private final Keyword cAndKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cMaxAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cMaxEIntParserRuleCall_12_0 = (RuleCall)cMaxAssignment_12.eContents().get(0);
		private final Keyword cWhereKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cLowestKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cMeansKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cFirstAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cFirstEStringParserRuleCall_16_0 = (RuleCall)cFirstAssignment_16.eContents().get(0);
		private final Keyword cAndKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cHighestKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cMeansKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Assignment cLastAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cLastEStringParserRuleCall_20_0 = (RuleCall)cLastAssignment_20.eContents().get(0);
		private final Group cGroup_21 = (Group)cGroup.eContents().get(21);
		private final Assignment cForksAssignment_21_0 = (Assignment)cGroup_21.eContents().get(0);
		private final RuleCall cForksRatingForkParserRuleCall_21_0_0 = (RuleCall)cForksAssignment_21_0.eContents().get(0);
		private final Assignment cForksAssignment_21_1 = (Assignment)cGroup_21.eContents().get(1);
		private final RuleCall cForksRatingForkParserRuleCall_21_1_0 = (RuleCall)cForksAssignment_21_1.eContents().get(0);
		
		//Rating_Impl returns Rating:
		//	{Rating} "Rating" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("rate" | "answer")?
		//	question=EString "between"? min=EInt "and"? max=EInt "where"? "lowest"? "means"? first=EString "and"? "highest"?
		//	"means"? last=EString (forks+=RatingFork forks+=RatingFork*)?;
		public ParserRule getRule() { return rule; }

		//{Rating} "Rating" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("rate" | "answer")?
		//question=EString "between"? min=EInt "and"? max=EInt "where"? "lowest"? "means"? first=EString "and"? "highest"?
		//"means"? last=EString (forks+=RatingFork forks+=RatingFork*)?
		public Group getGroup() { return cGroup; }

		//{Rating}
		public Action getRatingAction_0() { return cRatingAction_0; }

		//"Rating"
		public Keyword getRatingKeyword_1() { return cRatingKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("the"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"the"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | isRequired?="is" "required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//isRequired?="is" "required"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//isRequired?="is"
		public Assignment getIsRequiredAssignment_5_1_0() { return cIsRequiredAssignment_5_1_0; }

		//"is"
		public Keyword getIsRequiredIsKeyword_5_1_0_0() { return cIsRequiredIsKeyword_5_1_0_0; }

		//"required"
		public Keyword getRequiredKeyword_5_1_1() { return cRequiredKeyword_5_1_1; }

		//"to"?
		public Keyword getToKeyword_6() { return cToKeyword_6; }

		//("rate" | "answer")?
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"rate"
		public Keyword getRateKeyword_7_0() { return cRateKeyword_7_0; }

		//"answer"
		public Keyword getAnswerKeyword_7_1() { return cAnswerKeyword_7_1; }

		//question=EString
		public Assignment getQuestionAssignment_8() { return cQuestionAssignment_8; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_8_0() { return cQuestionEStringParserRuleCall_8_0; }

		//"between"?
		public Keyword getBetweenKeyword_9() { return cBetweenKeyword_9; }

		//min=EInt
		public Assignment getMinAssignment_10() { return cMinAssignment_10; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_10_0() { return cMinEIntParserRuleCall_10_0; }

		//"and"?
		public Keyword getAndKeyword_11() { return cAndKeyword_11; }

		//max=EInt
		public Assignment getMaxAssignment_12() { return cMaxAssignment_12; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_12_0() { return cMaxEIntParserRuleCall_12_0; }

		//"where"?
		public Keyword getWhereKeyword_13() { return cWhereKeyword_13; }

		//"lowest"?
		public Keyword getLowestKeyword_14() { return cLowestKeyword_14; }

		//"means"?
		public Keyword getMeansKeyword_15() { return cMeansKeyword_15; }

		//first=EString
		public Assignment getFirstAssignment_16() { return cFirstAssignment_16; }

		//EString
		public RuleCall getFirstEStringParserRuleCall_16_0() { return cFirstEStringParserRuleCall_16_0; }

		//"and"?
		public Keyword getAndKeyword_17() { return cAndKeyword_17; }

		//"highest"?
		public Keyword getHighestKeyword_18() { return cHighestKeyword_18; }

		//"means"?
		public Keyword getMeansKeyword_19() { return cMeansKeyword_19; }

		//last=EString
		public Assignment getLastAssignment_20() { return cLastAssignment_20; }

		//EString
		public RuleCall getLastEStringParserRuleCall_20_0() { return cLastEStringParserRuleCall_20_0; }

		//(forks+=RatingFork forks+=RatingFork*)?
		public Group getGroup_21() { return cGroup_21; }

		//forks+=RatingFork
		public Assignment getForksAssignment_21_0() { return cForksAssignment_21_0; }

		//RatingFork
		public RuleCall getForksRatingForkParserRuleCall_21_0_0() { return cForksRatingForkParserRuleCall_21_0_0; }

		//forks+=RatingFork*
		public Assignment getForksAssignment_21_1() { return cForksAssignment_21_1; }

		//RatingFork
		public RuleCall getForksRatingForkParserRuleCall_21_1_0() { return cForksRatingForkParserRuleCall_21_1_0; }
	}

	public class RankingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ranking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRankingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cUserKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cMayKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cIsRequiredAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final Keyword cIsRequiredIsKeyword_4_1_0_0 = (Keyword)cIsRequiredAssignment_4_1_0.eContents().get(0);
		private final Keyword cRequiredKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cRankKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Keyword cAnswerKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Assignment cQuestionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cQuestionEStringParserRuleCall_7_0 = (RuleCall)cQuestionAssignment_7.eContents().get(0);
		private final Keyword cTheseKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cChoicesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cChoicesChoiceParserRuleCall_9_0 = (RuleCall)cChoicesAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cChoicesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cChoicesChoiceParserRuleCall_10_1_0 = (RuleCall)cChoicesAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Assignment cForksAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cForksRankingSumForkParserRuleCall_11_0_0 = (RuleCall)cForksAssignment_11_0.eContents().get(0);
		private final Assignment cForksAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cForksRankingSumForkParserRuleCall_11_1_0 = (RuleCall)cForksAssignment_11_1.eContents().get(0);
		
		//Ranking:
		//	"Ranking" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("rank" | "answer")?
		//	question=EString "these"? choices+=Choice ("," choices+=Choice)* (forks+=RankingSumFork forks+=RankingSumFork*)?;
		public ParserRule getRule() { return rule; }

		//"Ranking" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("rank" | "answer")?
		//question=EString "these"? choices+=Choice ("," choices+=Choice)* (forks+=RankingSumFork forks+=RankingSumFork*)?
		public Group getGroup() { return cGroup; }

		//"Ranking"
		public Keyword getRankingKeyword_0() { return cRankingKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("the"? "user")?
		public Group getGroup_3() { return cGroup_3; }

		//"the"?
		public Keyword getTheKeyword_3_0() { return cTheKeyword_3_0; }

		//"user"
		public Keyword getUserKeyword_3_1() { return cUserKeyword_3_1; }

		//("may" | isRequired?="is" "required")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"may"
		public Keyword getMayKeyword_4_0() { return cMayKeyword_4_0; }

		//isRequired?="is" "required"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//isRequired?="is"
		public Assignment getIsRequiredAssignment_4_1_0() { return cIsRequiredAssignment_4_1_0; }

		//"is"
		public Keyword getIsRequiredIsKeyword_4_1_0_0() { return cIsRequiredIsKeyword_4_1_0_0; }

		//"required"
		public Keyword getRequiredKeyword_4_1_1() { return cRequiredKeyword_4_1_1; }

		//"to"?
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//("rank" | "answer")?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"rank"
		public Keyword getRankKeyword_6_0() { return cRankKeyword_6_0; }

		//"answer"
		public Keyword getAnswerKeyword_6_1() { return cAnswerKeyword_6_1; }

		//question=EString
		public Assignment getQuestionAssignment_7() { return cQuestionAssignment_7; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_7_0() { return cQuestionEStringParserRuleCall_7_0; }

		//"these"?
		public Keyword getTheseKeyword_8() { return cTheseKeyword_8; }

		//choices+=Choice
		public Assignment getChoicesAssignment_9() { return cChoicesAssignment_9; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_9_0() { return cChoicesChoiceParserRuleCall_9_0; }

		//("," choices+=Choice)*
		public Group getGroup_10() { return cGroup_10; }

		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }

		//choices+=Choice
		public Assignment getChoicesAssignment_10_1() { return cChoicesAssignment_10_1; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_10_1_0() { return cChoicesChoiceParserRuleCall_10_1_0; }

		//(forks+=RankingSumFork forks+=RankingSumFork*)?
		public Group getGroup_11() { return cGroup_11; }

		//forks+=RankingSumFork
		public Assignment getForksAssignment_11_0() { return cForksAssignment_11_0; }

		//RankingSumFork
		public RuleCall getForksRankingSumForkParserRuleCall_11_0_0() { return cForksRankingSumForkParserRuleCall_11_0_0; }

		//forks+=RankingSumFork*
		public Assignment getForksAssignment_11_1() { return cForksAssignment_11_1; }

		//RankingSumFork
		public RuleCall getForksRankingSumForkParserRuleCall_11_1_0() { return cForksRankingSumForkParserRuleCall_11_1_0; }
	}

	public class ConstantSumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantSum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantSumAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstantSumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cIsRequiredAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final Keyword cIsRequiredIsKeyword_5_1_0_0 = (Keyword)cIsRequiredAssignment_5_1_0.eContents().get(0);
		private final Keyword cRequiredKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cDistributeKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Keyword cAnswerKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Assignment cQuestionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cQuestionEStringParserRuleCall_8_0 = (RuleCall)cQuestionAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cGroup_9.eContents().get(0);
		private final Keyword cToKeyword_9_0_0 = (Keyword)cGroup_9_0.eContents().get(0);
		private final Keyword cAKeyword_9_0_1 = (Keyword)cGroup_9_0.eContents().get(1);
		private final Keyword cTotalKeyword_9_0_2 = (Keyword)cGroup_9_0.eContents().get(2);
		private final Keyword cOfKeyword_9_0_3 = (Keyword)cGroup_9_0.eContents().get(3);
		private final Assignment cConstantAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cConstantEIntParserRuleCall_9_1_0 = (RuleCall)cConstantAssignment_9_1.eContents().get(0);
		private final Keyword cTheseKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cChoicesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cChoicesChoiceParserRuleCall_11_0 = (RuleCall)cChoicesAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cChoicesAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cChoicesChoiceParserRuleCall_12_1_0 = (RuleCall)cChoicesAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Assignment cForksAssignment_13_0 = (Assignment)cGroup_13.eContents().get(0);
		private final RuleCall cForksRankingSumForkParserRuleCall_13_0_0 = (RuleCall)cForksAssignment_13_0.eContents().get(0);
		private final Assignment cForksAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cForksRankingSumForkParserRuleCall_13_1_0 = (RuleCall)cForksAssignment_13_1.eContents().get(0);
		
		//ConstantSum:
		//	{ConstantSum} "ConstantSum" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("distribute" |
		//	"answer")? question=EString (("to"? "a"? "total" "of"?) constant=EInt)? "these"? choices+=Choice (","
		//	choices+=Choice)* (forks+=RankingSumFork forks+=RankingSumFork*)?;
		public ParserRule getRule() { return rule; }

		//{ConstantSum} "ConstantSum" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("distribute" |
		//"answer")? question=EString (("to"? "a"? "total" "of"?) constant=EInt)? "these"? choices+=Choice (","
		//choices+=Choice)* (forks+=RankingSumFork forks+=RankingSumFork*)?
		public Group getGroup() { return cGroup; }

		//{ConstantSum}
		public Action getConstantSumAction_0() { return cConstantSumAction_0; }

		//"ConstantSum"
		public Keyword getConstantSumKeyword_1() { return cConstantSumKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("the"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"the"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | isRequired?="is" "required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//isRequired?="is" "required"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//isRequired?="is"
		public Assignment getIsRequiredAssignment_5_1_0() { return cIsRequiredAssignment_5_1_0; }

		//"is"
		public Keyword getIsRequiredIsKeyword_5_1_0_0() { return cIsRequiredIsKeyword_5_1_0_0; }

		//"required"
		public Keyword getRequiredKeyword_5_1_1() { return cRequiredKeyword_5_1_1; }

		//"to"?
		public Keyword getToKeyword_6() { return cToKeyword_6; }

		//("distribute" | "answer")?
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"distribute"
		public Keyword getDistributeKeyword_7_0() { return cDistributeKeyword_7_0; }

		//"answer"
		public Keyword getAnswerKeyword_7_1() { return cAnswerKeyword_7_1; }

		//question=EString
		public Assignment getQuestionAssignment_8() { return cQuestionAssignment_8; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_8_0() { return cQuestionEStringParserRuleCall_8_0; }

		//(("to"? "a"? "total" "of"?) constant=EInt)?
		public Group getGroup_9() { return cGroup_9; }

		//"to"? "a"? "total" "of"?
		public Group getGroup_9_0() { return cGroup_9_0; }

		//"to"?
		public Keyword getToKeyword_9_0_0() { return cToKeyword_9_0_0; }

		//"a"?
		public Keyword getAKeyword_9_0_1() { return cAKeyword_9_0_1; }

		//"total"
		public Keyword getTotalKeyword_9_0_2() { return cTotalKeyword_9_0_2; }

		//"of"?
		public Keyword getOfKeyword_9_0_3() { return cOfKeyword_9_0_3; }

		//constant=EInt
		public Assignment getConstantAssignment_9_1() { return cConstantAssignment_9_1; }

		//EInt
		public RuleCall getConstantEIntParserRuleCall_9_1_0() { return cConstantEIntParserRuleCall_9_1_0; }

		//"these"?
		public Keyword getTheseKeyword_10() { return cTheseKeyword_10; }

		//choices+=Choice
		public Assignment getChoicesAssignment_11() { return cChoicesAssignment_11; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_11_0() { return cChoicesChoiceParserRuleCall_11_0; }

		//("," choices+=Choice)*
		public Group getGroup_12() { return cGroup_12; }

		//","
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }

		//choices+=Choice
		public Assignment getChoicesAssignment_12_1() { return cChoicesAssignment_12_1; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_12_1_0() { return cChoicesChoiceParserRuleCall_12_1_0; }

		//(forks+=RankingSumFork forks+=RankingSumFork*)?
		public Group getGroup_13() { return cGroup_13; }

		//forks+=RankingSumFork
		public Assignment getForksAssignment_13_0() { return cForksAssignment_13_0; }

		//RankingSumFork
		public RuleCall getForksRankingSumForkParserRuleCall_13_0_0() { return cForksRankingSumForkParserRuleCall_13_0_0; }

		//forks+=RankingSumFork*
		public Assignment getForksAssignment_13_1() { return cForksAssignment_13_1; }

		//RankingSumFork
		public RuleCall getForksRankingSumForkParserRuleCall_13_1_0() { return cForksRankingSumForkParserRuleCall_13_1_0; }
	}

	public class StapleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Staple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStapleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStapleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cIsRequiredAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final Keyword cIsRequiredIsKeyword_5_1_0_0 = (Keyword)cIsRequiredAssignment_5_1_0.eContents().get(0);
		private final Keyword cRequiredKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cRateKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Keyword cAnswerKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Assignment cQuestionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cQuestionEStringParserRuleCall_8_0 = (RuleCall)cQuestionAssignment_8.eContents().get(0);
		private final Keyword cWhereKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLowestKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cMeansKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cFirstAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cFirstEStringParserRuleCall_12_0 = (RuleCall)cFirstAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cMiddleKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cMeansKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cMidAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cMidEStringParserRuleCall_16_0 = (RuleCall)cMidAssignment_16.eContents().get(0);
		private final Keyword cAndKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cHighestKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cMeansKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Assignment cLastAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cLastEStringParserRuleCall_20_0 = (RuleCall)cLastAssignment_20.eContents().get(0);
		private final Group cGroup_21 = (Group)cGroup.eContents().get(21);
		private final Assignment cForksAssignment_21_0 = (Assignment)cGroup_21.eContents().get(0);
		private final RuleCall cForksRatingForkParserRuleCall_21_0_0 = (RuleCall)cForksAssignment_21_0.eContents().get(0);
		private final Assignment cForksAssignment_21_1 = (Assignment)cGroup_21.eContents().get(1);
		private final RuleCall cForksRatingForkParserRuleCall_21_1_0 = (RuleCall)cForksAssignment_21_1.eContents().get(0);
		
		//Staple:
		//	{Staple} "Staple" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("rate" | "answer")?
		//	question=EString "where"? "lowest"? "means"? first=EString ","? "middle"? "means"? mid=EString "and"? "highest"?
		//	"means"? last=EString (forks+=RatingFork forks+=RatingFork*)?;
		public ParserRule getRule() { return rule; }

		//{Staple} "Staple" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("rate" | "answer")?
		//question=EString "where"? "lowest"? "means"? first=EString ","? "middle"? "means"? mid=EString "and"? "highest"?
		//"means"? last=EString (forks+=RatingFork forks+=RatingFork*)?
		public Group getGroup() { return cGroup; }

		//{Staple}
		public Action getStapleAction_0() { return cStapleAction_0; }

		//"Staple"
		public Keyword getStapleKeyword_1() { return cStapleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("the"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"the"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | isRequired?="is" "required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//isRequired?="is" "required"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//isRequired?="is"
		public Assignment getIsRequiredAssignment_5_1_0() { return cIsRequiredAssignment_5_1_0; }

		//"is"
		public Keyword getIsRequiredIsKeyword_5_1_0_0() { return cIsRequiredIsKeyword_5_1_0_0; }

		//"required"
		public Keyword getRequiredKeyword_5_1_1() { return cRequiredKeyword_5_1_1; }

		//"to"?
		public Keyword getToKeyword_6() { return cToKeyword_6; }

		//("rate" | "answer")?
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"rate"
		public Keyword getRateKeyword_7_0() { return cRateKeyword_7_0; }

		//"answer"
		public Keyword getAnswerKeyword_7_1() { return cAnswerKeyword_7_1; }

		//question=EString
		public Assignment getQuestionAssignment_8() { return cQuestionAssignment_8; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_8_0() { return cQuestionEStringParserRuleCall_8_0; }

		//"where"?
		public Keyword getWhereKeyword_9() { return cWhereKeyword_9; }

		//"lowest"?
		public Keyword getLowestKeyword_10() { return cLowestKeyword_10; }

		//"means"?
		public Keyword getMeansKeyword_11() { return cMeansKeyword_11; }

		//first=EString
		public Assignment getFirstAssignment_12() { return cFirstAssignment_12; }

		//EString
		public RuleCall getFirstEStringParserRuleCall_12_0() { return cFirstEStringParserRuleCall_12_0; }

		//","?
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }

		//"middle"?
		public Keyword getMiddleKeyword_14() { return cMiddleKeyword_14; }

		//"means"?
		public Keyword getMeansKeyword_15() { return cMeansKeyword_15; }

		//mid=EString
		public Assignment getMidAssignment_16() { return cMidAssignment_16; }

		//EString
		public RuleCall getMidEStringParserRuleCall_16_0() { return cMidEStringParserRuleCall_16_0; }

		//"and"?
		public Keyword getAndKeyword_17() { return cAndKeyword_17; }

		//"highest"?
		public Keyword getHighestKeyword_18() { return cHighestKeyword_18; }

		//"means"?
		public Keyword getMeansKeyword_19() { return cMeansKeyword_19; }

		//last=EString
		public Assignment getLastAssignment_20() { return cLastAssignment_20; }

		//EString
		public RuleCall getLastEStringParserRuleCall_20_0() { return cLastEStringParserRuleCall_20_0; }

		//(forks+=RatingFork forks+=RatingFork*)?
		public Group getGroup_21() { return cGroup_21; }

		//forks+=RatingFork
		public Assignment getForksAssignment_21_0() { return cForksAssignment_21_0; }

		//RatingFork
		public RuleCall getForksRatingForkParserRuleCall_21_0_0() { return cForksRatingForkParserRuleCall_21_0_0; }

		//forks+=RatingFork*
		public Assignment getForksAssignment_21_1() { return cForksAssignment_21_1; }

		//RatingFork
		public RuleCall getForksRatingForkParserRuleCall_21_1_0() { return cForksRatingForkParserRuleCall_21_1_0; }
	}

	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//Choice:
		//	name=ID ":" description=EString;
		public ParserRule getRule() { return rule; }

		//name=ID ":" description=EString
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//description=EString
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_2_0() { return cDescriptionEStringParserRuleCall_2_0; }
	}

	public class ChoiceForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoiceFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOnChoiceCrossReference_1_0 = (CrossReference)cOnAssignment_1.eContents().get(0);
		private final RuleCall cOnChoiceEStringParserRuleCall_1_0_1 = (RuleCall)cOnChoiceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOnAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOnChoiceCrossReference_2_1_0 = (CrossReference)cOnAssignment_2_1.eContents().get(0);
		private final RuleCall cOnChoiceEStringParserRuleCall_2_1_0_1 = (RuleCall)cOnChoiceCrossReference_2_1_0.eContents().get(1);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cContinueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cQuestionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cQuestionsQuestionCrossReference_6_0 = (CrossReference)cQuestionsAssignment_6.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_6_0_1 = (RuleCall)cQuestionsQuestionCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cQuestionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cQuestionsQuestionCrossReference_7_1_0 = (CrossReference)cQuestionsAssignment_7_1.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_7_1_0_1 = (RuleCall)cQuestionsQuestionCrossReference_7_1_0.eContents().get(1);
		
		//ChoiceFork:
		//	"if" on+=[Choice|EString] ("," on+=[Choice|EString])* "then"? "continue"? "with"? questions+=[Question|EString] (","
		//	questions+=[Question|EString])*;
		public ParserRule getRule() { return rule; }

		//"if" on+=[Choice|EString] ("," on+=[Choice|EString])* "then"? "continue"? "with"? questions+=[Question|EString] (","
		//questions+=[Question|EString])*
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//on+=[Choice|EString]
		public Assignment getOnAssignment_1() { return cOnAssignment_1; }

		//[Choice|EString]
		public CrossReference getOnChoiceCrossReference_1_0() { return cOnChoiceCrossReference_1_0; }

		//EString
		public RuleCall getOnChoiceEStringParserRuleCall_1_0_1() { return cOnChoiceEStringParserRuleCall_1_0_1; }

		//("," on+=[Choice|EString])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//on+=[Choice|EString]
		public Assignment getOnAssignment_2_1() { return cOnAssignment_2_1; }

		//[Choice|EString]
		public CrossReference getOnChoiceCrossReference_2_1_0() { return cOnChoiceCrossReference_2_1_0; }

		//EString
		public RuleCall getOnChoiceEStringParserRuleCall_2_1_0_1() { return cOnChoiceEStringParserRuleCall_2_1_0_1; }

		//"then"?
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//"continue"?
		public Keyword getContinueKeyword_4() { return cContinueKeyword_4; }

		//"with"?
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }

		//questions+=[Question|EString]
		public Assignment getQuestionsAssignment_6() { return cQuestionsAssignment_6; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_6_0() { return cQuestionsQuestionCrossReference_6_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_6_0_1() { return cQuestionsQuestionEStringParserRuleCall_6_0_1; }

		//("," questions+=[Question|EString])*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//questions+=[Question|EString]
		public Assignment getQuestionsAssignment_7_1() { return cQuestionsAssignment_7_1; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_7_1_0() { return cQuestionsQuestionCrossReference_7_1_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_7_1_0_1() { return cQuestionsQuestionEStringParserRuleCall_7_1_0_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class RatingForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RatingFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cItKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBetweenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMinEIntParserRuleCall_4_0 = (RuleCall)cMinAssignment_4.eContents().get(0);
		private final Keyword cAndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMaxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMaxEIntParserRuleCall_6_0 = (RuleCall)cMaxAssignment_6.eContents().get(0);
		private final Keyword cThenKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cContinueKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cWithKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cQuestionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cQuestionsQuestionCrossReference_10_0 = (CrossReference)cQuestionsAssignment_10.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_10_0_1 = (RuleCall)cQuestionsQuestionCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cQuestionsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cQuestionsQuestionCrossReference_11_1_0 = (CrossReference)cQuestionsAssignment_11_1.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_11_1_0_1 = (RuleCall)cQuestionsQuestionCrossReference_11_1_0.eContents().get(1);
		
		//RatingFork:
		//	"if" "it"? "is"? "between" min=EInt "and" max=EInt "then"? "continue"? "with"? questions+=[Question|EString] (","
		//	questions+=[Question|EString])*;
		public ParserRule getRule() { return rule; }

		//"if" "it"? "is"? "between" min=EInt "and" max=EInt "then"? "continue"? "with"? questions+=[Question|EString] (","
		//questions+=[Question|EString])*
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"it"?
		public Keyword getItKeyword_1() { return cItKeyword_1; }

		//"is"?
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//"between"
		public Keyword getBetweenKeyword_3() { return cBetweenKeyword_3; }

		//min=EInt
		public Assignment getMinAssignment_4() { return cMinAssignment_4; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_4_0() { return cMinEIntParserRuleCall_4_0; }

		//"and"
		public Keyword getAndKeyword_5() { return cAndKeyword_5; }

		//max=EInt
		public Assignment getMaxAssignment_6() { return cMaxAssignment_6; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_6_0() { return cMaxEIntParserRuleCall_6_0; }

		//"then"?
		public Keyword getThenKeyword_7() { return cThenKeyword_7; }

		//"continue"?
		public Keyword getContinueKeyword_8() { return cContinueKeyword_8; }

		//"with"?
		public Keyword getWithKeyword_9() { return cWithKeyword_9; }

		//questions+=[Question|EString]
		public Assignment getQuestionsAssignment_10() { return cQuestionsAssignment_10; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_10_0() { return cQuestionsQuestionCrossReference_10_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_10_0_1() { return cQuestionsQuestionEStringParserRuleCall_10_0_1; }

		//("," questions+=[Question|EString])*
		public Group getGroup_11() { return cGroup_11; }

		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }

		//questions+=[Question|EString]
		public Assignment getQuestionsAssignment_11_1() { return cQuestionsAssignment_11_1; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_11_1_0() { return cQuestionsQuestionCrossReference_11_1_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_11_1_0_1() { return cQuestionsQuestionEStringParserRuleCall_11_1_0_1; }
	}

	public class RankingSumForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RankingSumFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOnChoiceCrossReference_1_0 = (CrossReference)cOnAssignment_1.eContents().get(0);
		private final RuleCall cOnChoiceEStringParserRuleCall_1_0_1 = (RuleCall)cOnChoiceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOnAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOnChoiceCrossReference_2_1_0 = (CrossReference)cOnAssignment_2_1.eContents().get(0);
		private final RuleCall cOnChoiceEStringParserRuleCall_2_1_0_1 = (RuleCall)cOnChoiceCrossReference_2_1_0.eContents().get(1);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBetweenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMinAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMinEIntParserRuleCall_5_0 = (RuleCall)cMinAssignment_5.eContents().get(0);
		private final Keyword cAndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMaxAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMaxEIntParserRuleCall_7_0 = (RuleCall)cMaxAssignment_7.eContents().get(0);
		private final Keyword cThenKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cContinueKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cWithKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cQuestionsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cQuestionsQuestionCrossReference_11_0 = (CrossReference)cQuestionsAssignment_11.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_11_0_1 = (RuleCall)cQuestionsQuestionCrossReference_11_0.eContents().get(1);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cQuestionsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final CrossReference cQuestionsQuestionCrossReference_12_1_0 = (CrossReference)cQuestionsAssignment_12_1.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_12_1_0_1 = (RuleCall)cQuestionsQuestionCrossReference_12_1_0.eContents().get(1);
		
		//RankingSumFork:
		//	"if" on+=[Choice|EString] ("," on+=[Choice|EString])* "is" "between"? min=EInt "and" max=EInt "then"? "continue"?
		//	"with"? questions+=[Question|EString] ("," questions+=[Question|EString])*;
		public ParserRule getRule() { return rule; }

		//"if" on+=[Choice|EString] ("," on+=[Choice|EString])* "is" "between"? min=EInt "and" max=EInt "then"? "continue"?
		//"with"? questions+=[Question|EString] ("," questions+=[Question|EString])*
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//on+=[Choice|EString]
		public Assignment getOnAssignment_1() { return cOnAssignment_1; }

		//[Choice|EString]
		public CrossReference getOnChoiceCrossReference_1_0() { return cOnChoiceCrossReference_1_0; }

		//EString
		public RuleCall getOnChoiceEStringParserRuleCall_1_0_1() { return cOnChoiceEStringParserRuleCall_1_0_1; }

		//("," on+=[Choice|EString])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//on+=[Choice|EString]
		public Assignment getOnAssignment_2_1() { return cOnAssignment_2_1; }

		//[Choice|EString]
		public CrossReference getOnChoiceCrossReference_2_1_0() { return cOnChoiceCrossReference_2_1_0; }

		//EString
		public RuleCall getOnChoiceEStringParserRuleCall_2_1_0_1() { return cOnChoiceEStringParserRuleCall_2_1_0_1; }

		//"is"
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }

		//"between"?
		public Keyword getBetweenKeyword_4() { return cBetweenKeyword_4; }

		//min=EInt
		public Assignment getMinAssignment_5() { return cMinAssignment_5; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_5_0() { return cMinEIntParserRuleCall_5_0; }

		//"and"
		public Keyword getAndKeyword_6() { return cAndKeyword_6; }

		//max=EInt
		public Assignment getMaxAssignment_7() { return cMaxAssignment_7; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_7_0() { return cMaxEIntParserRuleCall_7_0; }

		//"then"?
		public Keyword getThenKeyword_8() { return cThenKeyword_8; }

		//"continue"?
		public Keyword getContinueKeyword_9() { return cContinueKeyword_9; }

		//"with"?
		public Keyword getWithKeyword_10() { return cWithKeyword_10; }

		//questions+=[Question|EString]
		public Assignment getQuestionsAssignment_11() { return cQuestionsAssignment_11; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_11_0() { return cQuestionsQuestionCrossReference_11_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_11_0_1() { return cQuestionsQuestionEStringParserRuleCall_11_0_1; }

		//("," questions+=[Question|EString])*
		public Group getGroup_12() { return cGroup_12; }

		//","
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }

		//questions+=[Question|EString]
		public Assignment getQuestionsAssignment_12_1() { return cQuestionsAssignment_12_1; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_12_1_0() { return cQuestionsQuestionCrossReference_12_1_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_12_1_0_1() { return cQuestionsQuestionEStringParserRuleCall_12_1_0_1; }
	}
	
	
	private SurveyElements pSurvey;
	private QuestionElements pQuestion;
	private EStringElements pEString;
	private EBooleanElements pEBoolean;
	private MultipleChoiceElements pMultipleChoice;
	private OpenElements pOpen;
	private Rating_ImplElements pRating_Impl;
	private RankingElements pRanking;
	private ConstantSumElements pConstantSum;
	private StapleElements pStaple;
	private ChoiceElements pChoice;
	private ChoiceForkElements pChoiceFork;
	private EIntElements pEInt;
	private RatingForkElements pRatingFork;
	private RankingSumForkElements pRankingSumFork;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Survey:
	//	{Survey} name=ID (questions+=Question questions+=Question*)?;
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//Question:
	//	MultipleChoice | Open | Rating_Impl | Ranking | ConstantSum | Staple;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//MultipleChoice:
	//	{MultipleChoice} "MultipleChoice" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? "answer"?
	//	question=EString ("by"? "picking" "up to"? answerCount=EInt)? "of"? "these"? choice+=Choice ("," choice+=Choice)*
	//	("or" other=EString)? (forks+=ChoiceFork forks+=ChoiceFork*)?;
	public MultipleChoiceElements getMultipleChoiceAccess() {
		return (pMultipleChoice != null) ? pMultipleChoice : (pMultipleChoice = new MultipleChoiceElements());
	}
	
	public ParserRule getMultipleChoiceRule() {
		return getMultipleChoiceAccess().getRule();
	}

	//Open:
	//	{Open} "Open" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? "answer"? question=EString;
	public OpenElements getOpenAccess() {
		return (pOpen != null) ? pOpen : (pOpen = new OpenElements());
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}

	//Rating_Impl returns Rating:
	//	{Rating} "Rating" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("rate" | "answer")?
	//	question=EString "between"? min=EInt "and"? max=EInt "where"? "lowest"? "means"? first=EString "and"? "highest"?
	//	"means"? last=EString (forks+=RatingFork forks+=RatingFork*)?;
	public Rating_ImplElements getRating_ImplAccess() {
		return (pRating_Impl != null) ? pRating_Impl : (pRating_Impl = new Rating_ImplElements());
	}
	
	public ParserRule getRating_ImplRule() {
		return getRating_ImplAccess().getRule();
	}

	//Ranking:
	//	"Ranking" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("rank" | "answer")?
	//	question=EString "these"? choices+=Choice ("," choices+=Choice)* (forks+=RankingSumFork forks+=RankingSumFork*)?;
	public RankingElements getRankingAccess() {
		return (pRanking != null) ? pRanking : (pRanking = new RankingElements());
	}
	
	public ParserRule getRankingRule() {
		return getRankingAccess().getRule();
	}

	//ConstantSum:
	//	{ConstantSum} "ConstantSum" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("distribute" |
	//	"answer")? question=EString (("to"? "a"? "total" "of"?) constant=EInt)? "these"? choices+=Choice (","
	//	choices+=Choice)* (forks+=RankingSumFork forks+=RankingSumFork*)?;
	public ConstantSumElements getConstantSumAccess() {
		return (pConstantSum != null) ? pConstantSum : (pConstantSum = new ConstantSumElements());
	}
	
	public ParserRule getConstantSumRule() {
		return getConstantSumAccess().getRule();
	}

	//Staple:
	//	{Staple} "Staple" name=ID ":" ("the"? "user")? ("may" | isRequired?="is" "required")? "to"? ("rate" | "answer")?
	//	question=EString "where"? "lowest"? "means"? first=EString ","? "middle"? "means"? mid=EString "and"? "highest"?
	//	"means"? last=EString (forks+=RatingFork forks+=RatingFork*)?;
	public StapleElements getStapleAccess() {
		return (pStaple != null) ? pStaple : (pStaple = new StapleElements());
	}
	
	public ParserRule getStapleRule() {
		return getStapleAccess().getRule();
	}

	//Choice:
	//	name=ID ":" description=EString;
	public ChoiceElements getChoiceAccess() {
		return (pChoice != null) ? pChoice : (pChoice = new ChoiceElements());
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}

	//ChoiceFork:
	//	"if" on+=[Choice|EString] ("," on+=[Choice|EString])* "then"? "continue"? "with"? questions+=[Question|EString] (","
	//	questions+=[Question|EString])*;
	public ChoiceForkElements getChoiceForkAccess() {
		return (pChoiceFork != null) ? pChoiceFork : (pChoiceFork = new ChoiceForkElements());
	}
	
	public ParserRule getChoiceForkRule() {
		return getChoiceForkAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//RatingFork:
	//	"if" "it"? "is"? "between" min=EInt "and" max=EInt "then"? "continue"? "with"? questions+=[Question|EString] (","
	//	questions+=[Question|EString])*;
	public RatingForkElements getRatingForkAccess() {
		return (pRatingFork != null) ? pRatingFork : (pRatingFork = new RatingForkElements());
	}
	
	public ParserRule getRatingForkRule() {
		return getRatingForkAccess().getRule();
	}

	//RankingSumFork:
	//	"if" on+=[Choice|EString] ("," on+=[Choice|EString])* "is" "between"? min=EInt "and" max=EInt "then"? "continue"?
	//	"with"? questions+=[Question|EString] ("," questions+=[Question|EString])*;
	public RankingSumForkElements getRankingSumForkAccess() {
		return (pRankingSumFork != null) ? pRankingSumFork : (pRankingSumFork = new RankingSumForkElements());
	}
	
	public ParserRule getRankingSumForkRule() {
		return getRankingSumForkAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
