/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSurveysAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSurveysSurveyParserRuleCall_1_0_0 = (RuleCall)cSurveysAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cQuestionMarkQuestionMarkQuestionMarkQuestionMarkQuestionMarkQuestionMarkKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSurveysAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSurveysSurveyParserRuleCall_1_1_1_0 = (RuleCall)cSurveysAssignment_1_1_1.eContents().get(0);
		
		//Model:
		//	{Model} (surveys+=Survey ("??????" surveys+=Survey)*)?;
		public ParserRule getRule() { return rule; }

		//{Model} (surveys+=Survey ("??????" surveys+=Survey)*)?
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//(surveys+=Survey ("??????" surveys+=Survey)*)?
		public Group getGroup_1() { return cGroup_1; }

		//surveys+=Survey
		public Assignment getSurveysAssignment_1_0() { return cSurveysAssignment_1_0; }

		//Survey
		public RuleCall getSurveysSurveyParserRuleCall_1_0_0() { return cSurveysSurveyParserRuleCall_1_0_0; }

		//("??????" surveys+=Survey)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"??????"
		public Keyword getQuestionMarkQuestionMarkQuestionMarkQuestionMarkQuestionMarkQuestionMarkKeyword_1_1_0() { return cQuestionMarkQuestionMarkQuestionMarkQuestionMarkQuestionMarkQuestionMarkKeyword_1_1_0; }

		//surveys+=Survey
		public Assignment getSurveysAssignment_1_1_1() { return cSurveysAssignment_1_1_1; }

		//Survey
		public RuleCall getSurveysSurveyParserRuleCall_1_1_1_0() { return cSurveysSurveyParserRuleCall_1_1_1_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultipleChoiceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOpenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRating_ImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRankingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDichotomousParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSumConstantParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStapleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Question:
		//	MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple;
		public ParserRule getRule() { return rule; }

		//MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple
		public Alternatives getAlternatives() { return cAlternatives; }

		//MultipleChoice
		public RuleCall getMultipleChoiceParserRuleCall_0() { return cMultipleChoiceParserRuleCall_0; }

		//Open
		public RuleCall getOpenParserRuleCall_1() { return cOpenParserRuleCall_1; }

		//Rating_Impl
		public RuleCall getRating_ImplParserRuleCall_2() { return cRating_ImplParserRuleCall_2; }

		//Ranking
		public RuleCall getRankingParserRuleCall_3() { return cRankingParserRuleCall_3; }

		//Dichotomous
		public RuleCall getDichotomousParserRuleCall_4() { return cDichotomousParserRuleCall_4; }

		//SumConstant
		public RuleCall getSumConstantParserRuleCall_5() { return cSumConstantParserRuleCall_5; }

		//Staple
		public RuleCall getStapleParserRuleCall_6() { return cStapleParserRuleCall_6; }
	}

	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSurveyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cQuestionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cQuestionsQuestionParserRuleCall_2_0_0 = (RuleCall)cQuestionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cQuestionsAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cQuestionsQuestionParserRuleCall_2_2_0_0 = (RuleCall)cQuestionsAssignment_2_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		
		//Survey:
		//	{Survey} name=EString (questions+=Question ";" (questions+=Question ";")*)?;
		public ParserRule getRule() { return rule; }

		//{Survey} name=EString (questions+=Question ";" (questions+=Question ";")*)?
		public Group getGroup() { return cGroup; }

		//{Survey}
		public Action getSurveyAction_0() { return cSurveyAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//(questions+=Question ";" (questions+=Question ";")*)?
		public Group getGroup_2() { return cGroup_2; }

		//questions+=Question
		public Assignment getQuestionsAssignment_2_0() { return cQuestionsAssignment_2_0; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_2_0_0() { return cQuestionsQuestionParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//(questions+=Question ";")*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//questions+=Question
		public Assignment getQuestionsAssignment_2_2_0() { return cQuestionsAssignment_2_2_0; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_2_2_0_0() { return cQuestionsQuestionParserRuleCall_2_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_2_1() { return cSemicolonKeyword_2_2_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class MultipleChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultipleChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultipleChoiceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMultipleChoiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cIsRequiredAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cIsRequiredIsRequiredKeyword_5_1_0 = (Keyword)cIsRequiredAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cToKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cAnswerKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cQuestionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_6_2_0 = (RuleCall)cQuestionAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cPickingKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cUpToKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cAnswerCountAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cAnswerCountEIntParserRuleCall_7_2_0 = (RuleCall)cAnswerCountAssignment_7_2.eContents().get(0);
		private final Keyword cChoiceKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWithKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Alternatives cAlternatives_8_1 = (Alternatives)cGroup_8.eContents().get(1);
		private final Keyword cOneOfKeyword_8_1_0 = (Keyword)cAlternatives_8_1.eContents().get(0);
		private final Keyword cSomeOfKeyword_8_1_1 = (Keyword)cAlternatives_8_1.eContents().get(1);
		private final Keyword cTheseKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cChoiceAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cChoiceChoiceParserRuleCall_8_3_0 = (RuleCall)cChoiceAssignment_8_3.eContents().get(0);
		private final Group cGroup_8_4 = (Group)cGroup_8.eContents().get(4);
		private final Keyword cCommaKeyword_8_4_0 = (Keyword)cGroup_8_4.eContents().get(0);
		private final Assignment cChoiceAssignment_8_4_1 = (Assignment)cGroup_8_4.eContents().get(1);
		private final RuleCall cChoiceChoiceParserRuleCall_8_4_1_0 = (RuleCall)cChoiceAssignment_8_4_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cOrKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cWithKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cSomethingKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cElseKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cOtherAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final RuleCall cOtherEStringParserRuleCall_9_4_0 = (RuleCall)cOtherAssignment_9_4.eContents().get(0);
		private final Keyword cFullStopKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Assignment cForkAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cForkChoiceForkParserRuleCall_11_0_0 = (RuleCall)cForkAssignment_11_0.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Keyword cCommaKeyword_11_1_0 = (Keyword)cGroup_11_1.eContents().get(0);
		private final Assignment cForkAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final RuleCall cForkChoiceForkParserRuleCall_11_1_1_0 = (RuleCall)cForkAssignment_11_1_1.eContents().get(0);
		
		//MultipleChoice:
		//	{MultipleChoice} "MultipleChoice" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
		//	question=EString)? ("picking" "up to"? answerCount=EInt "choice")? ("with"? ("one of" | "some of")? "these:"?
		//	choice+=Choice ("," choice+=Choice)*)? ("or" "with"? "something"? "else"? other=EString)? "."? (Fork+=ChoiceFork (","
		//	Fork+=ChoiceFork)*)?;
		public ParserRule getRule() { return rule; }

		//{MultipleChoice} "MultipleChoice" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
		//question=EString)? ("picking" "up to"? answerCount=EInt "choice")? ("with"? ("one of" | "some of")? "these:"?
		//choice+=Choice ("," choice+=Choice)*)? ("or" "with"? "something"? "else"? other=EString)? "."? (Fork+=ChoiceFork (","
		//Fork+=ChoiceFork)*)?
		public Group getGroup() { return cGroup; }

		//{MultipleChoice}
		public Action getMultipleChoiceAction_0() { return cMultipleChoiceAction_0; }

		//"MultipleChoice"
		public Keyword getMultipleChoiceKeyword_1() { return cMultipleChoiceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("The"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"The"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | isRequired?="is required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//isRequired?="is required"
		public Assignment getIsRequiredAssignment_5_1() { return cIsRequiredAssignment_5_1; }

		//"is required"
		public Keyword getIsRequiredIsRequiredKeyword_5_1_0() { return cIsRequiredIsRequiredKeyword_5_1_0; }

		//("to"? "answer"? question=EString)?
		public Group getGroup_6() { return cGroup_6; }

		//"to"?
		public Keyword getToKeyword_6_0() { return cToKeyword_6_0; }

		//"answer"?
		public Keyword getAnswerKeyword_6_1() { return cAnswerKeyword_6_1; }

		//question=EString
		public Assignment getQuestionAssignment_6_2() { return cQuestionAssignment_6_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_6_2_0() { return cQuestionEStringParserRuleCall_6_2_0; }

		//("picking" "up to"? answerCount=EInt "choice")?
		public Group getGroup_7() { return cGroup_7; }

		//"picking"
		public Keyword getPickingKeyword_7_0() { return cPickingKeyword_7_0; }

		//"up to"?
		public Keyword getUpToKeyword_7_1() { return cUpToKeyword_7_1; }

		//answerCount=EInt
		public Assignment getAnswerCountAssignment_7_2() { return cAnswerCountAssignment_7_2; }

		//EInt
		public RuleCall getAnswerCountEIntParserRuleCall_7_2_0() { return cAnswerCountEIntParserRuleCall_7_2_0; }

		//"choice"
		public Keyword getChoiceKeyword_7_3() { return cChoiceKeyword_7_3; }

		//("with"? ("one of" | "some of")? "these:"? choice+=Choice ("," choice+=Choice)*)?
		public Group getGroup_8() { return cGroup_8; }

		//"with"?
		public Keyword getWithKeyword_8_0() { return cWithKeyword_8_0; }

		//("one of" | "some of")?
		public Alternatives getAlternatives_8_1() { return cAlternatives_8_1; }

		//"one of"
		public Keyword getOneOfKeyword_8_1_0() { return cOneOfKeyword_8_1_0; }

		//"some of"
		public Keyword getSomeOfKeyword_8_1_1() { return cSomeOfKeyword_8_1_1; }

		//"these:"?
		public Keyword getTheseKeyword_8_2() { return cTheseKeyword_8_2; }

		//choice+=Choice
		public Assignment getChoiceAssignment_8_3() { return cChoiceAssignment_8_3; }

		//Choice
		public RuleCall getChoiceChoiceParserRuleCall_8_3_0() { return cChoiceChoiceParserRuleCall_8_3_0; }

		//("," choice+=Choice)*
		public Group getGroup_8_4() { return cGroup_8_4; }

		//","
		public Keyword getCommaKeyword_8_4_0() { return cCommaKeyword_8_4_0; }

		//choice+=Choice
		public Assignment getChoiceAssignment_8_4_1() { return cChoiceAssignment_8_4_1; }

		//Choice
		public RuleCall getChoiceChoiceParserRuleCall_8_4_1_0() { return cChoiceChoiceParserRuleCall_8_4_1_0; }

		//("or" "with"? "something"? "else"? other=EString)?
		public Group getGroup_9() { return cGroup_9; }

		//"or"
		public Keyword getOrKeyword_9_0() { return cOrKeyword_9_0; }

		//"with"?
		public Keyword getWithKeyword_9_1() { return cWithKeyword_9_1; }

		//"something"?
		public Keyword getSomethingKeyword_9_2() { return cSomethingKeyword_9_2; }

		//"else"?
		public Keyword getElseKeyword_9_3() { return cElseKeyword_9_3; }

		//other=EString
		public Assignment getOtherAssignment_9_4() { return cOtherAssignment_9_4; }

		//EString
		public RuleCall getOtherEStringParserRuleCall_9_4_0() { return cOtherEStringParserRuleCall_9_4_0; }

		//"."?
		public Keyword getFullStopKeyword_10() { return cFullStopKeyword_10; }

		//(Fork+=ChoiceFork ("," Fork+=ChoiceFork)*)?
		public Group getGroup_11() { return cGroup_11; }

		//Fork+=ChoiceFork
		public Assignment getForkAssignment_11_0() { return cForkAssignment_11_0; }

		//ChoiceFork
		public RuleCall getForkChoiceForkParserRuleCall_11_0_0() { return cForkChoiceForkParserRuleCall_11_0_0; }

		//("," Fork+=ChoiceFork)*
		public Group getGroup_11_1() { return cGroup_11_1; }

		//","
		public Keyword getCommaKeyword_11_1_0() { return cCommaKeyword_11_1_0; }

		//Fork+=ChoiceFork
		public Assignment getForkAssignment_11_1_1() { return cForkAssignment_11_1_1; }

		//ChoiceFork
		public RuleCall getForkChoiceForkParserRuleCall_11_1_1_0() { return cForkChoiceForkParserRuleCall_11_1_1_0; }
	}

	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Open");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpenAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOpenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cIsRequiredKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cToKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cAnswerKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cQuestionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_6_2_0 = (RuleCall)cQuestionAssignment_6_2.eContents().get(0);
		
		//Open:
		//	{Open} "Open" name=ID ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?;
		public ParserRule getRule() { return rule; }

		//{Open} "Open" name=ID ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?
		public Group getGroup() { return cGroup; }

		//{Open}
		public Action getOpenAction_0() { return cOpenAction_0; }

		//"Open"
		public Keyword getOpenKeyword_1() { return cOpenKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("The"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"The"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | "is required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//"is required"
		public Keyword getIsRequiredKeyword_5_1() { return cIsRequiredKeyword_5_1; }

		//("to"? "answer"? question=EString)?
		public Group getGroup_6() { return cGroup_6; }

		//"to"?
		public Keyword getToKeyword_6_0() { return cToKeyword_6_0; }

		//"answer"?
		public Keyword getAnswerKeyword_6_1() { return cAnswerKeyword_6_1; }

		//question=EString
		public Assignment getQuestionAssignment_6_2() { return cQuestionAssignment_6_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_6_2_0() { return cQuestionEStringParserRuleCall_6_2_0; }
	}

	public class Rating_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rating_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRatingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRatingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cIsRequiredKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cToKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cRateKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cQuestionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_6_2_0 = (RuleCall)cQuestionAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cBetweenKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cMinAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_7_1_0 = (RuleCall)cMinAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cAndKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cMaxAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_8_1_0 = (RuleCall)cMaxAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cWhereKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLowestKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cMeansKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cFirstAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cFirstEStringParserRuleCall_9_3_0 = (RuleCall)cFirstAssignment_9_3.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAndKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cHighestKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cMeansKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cLastAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cLastEStringParserRuleCall_10_3_0 = (RuleCall)cLastAssignment_10_3.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Assignment cForkAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cForkRatingForkParserRuleCall_11_0_0 = (RuleCall)cForkAssignment_11_0.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Keyword cCommaKeyword_11_1_0 = (Keyword)cGroup_11_1.eContents().get(0);
		private final Assignment cForkAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final RuleCall cForkRatingForkParserRuleCall_11_1_1_0 = (RuleCall)cForkAssignment_11_1_1.eContents().get(0);
		
		//Rating_Impl returns Rating:
		//	{Rating} "Rating" name=ID ":" ("The"? "user")? ("may" | "is required")? ("to"? "rate"? question=EString)? ("between"?
		//	Min=EInt)? ("and"? Max=EInt)? ("where"? "lowest" "means"? first=EString)? ("and"? "highest" "means"? last=EString)?
		//	(Fork+=RatingFork ("," Fork+=RatingFork)*)?;
		public ParserRule getRule() { return rule; }

		//{Rating} "Rating" name=ID ":" ("The"? "user")? ("may" | "is required")? ("to"? "rate"? question=EString)? ("between"?
		//Min=EInt)? ("and"? Max=EInt)? ("where"? "lowest" "means"? first=EString)? ("and"? "highest" "means"? last=EString)?
		//(Fork+=RatingFork ("," Fork+=RatingFork)*)?
		public Group getGroup() { return cGroup; }

		//{Rating}
		public Action getRatingAction_0() { return cRatingAction_0; }

		//"Rating"
		public Keyword getRatingKeyword_1() { return cRatingKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("The"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"The"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | "is required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//"is required"
		public Keyword getIsRequiredKeyword_5_1() { return cIsRequiredKeyword_5_1; }

		//("to"? "rate"? question=EString)?
		public Group getGroup_6() { return cGroup_6; }

		//"to"?
		public Keyword getToKeyword_6_0() { return cToKeyword_6_0; }

		//"rate"?
		public Keyword getRateKeyword_6_1() { return cRateKeyword_6_1; }

		//question=EString
		public Assignment getQuestionAssignment_6_2() { return cQuestionAssignment_6_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_6_2_0() { return cQuestionEStringParserRuleCall_6_2_0; }

		//("between"? Min=EInt)?
		public Group getGroup_7() { return cGroup_7; }

		//"between"?
		public Keyword getBetweenKeyword_7_0() { return cBetweenKeyword_7_0; }

		//Min=EInt
		public Assignment getMinAssignment_7_1() { return cMinAssignment_7_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_7_1_0() { return cMinEIntParserRuleCall_7_1_0; }

		//("and"? Max=EInt)?
		public Group getGroup_8() { return cGroup_8; }

		//"and"?
		public Keyword getAndKeyword_8_0() { return cAndKeyword_8_0; }

		//Max=EInt
		public Assignment getMaxAssignment_8_1() { return cMaxAssignment_8_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_8_1_0() { return cMaxEIntParserRuleCall_8_1_0; }

		//("where"? "lowest" "means"? first=EString)?
		public Group getGroup_9() { return cGroup_9; }

		//"where"?
		public Keyword getWhereKeyword_9_0() { return cWhereKeyword_9_0; }

		//"lowest"
		public Keyword getLowestKeyword_9_1() { return cLowestKeyword_9_1; }

		//"means"?
		public Keyword getMeansKeyword_9_2() { return cMeansKeyword_9_2; }

		//first=EString
		public Assignment getFirstAssignment_9_3() { return cFirstAssignment_9_3; }

		//EString
		public RuleCall getFirstEStringParserRuleCall_9_3_0() { return cFirstEStringParserRuleCall_9_3_0; }

		//("and"? "highest" "means"? last=EString)?
		public Group getGroup_10() { return cGroup_10; }

		//"and"?
		public Keyword getAndKeyword_10_0() { return cAndKeyword_10_0; }

		//"highest"
		public Keyword getHighestKeyword_10_1() { return cHighestKeyword_10_1; }

		//"means"?
		public Keyword getMeansKeyword_10_2() { return cMeansKeyword_10_2; }

		//last=EString
		public Assignment getLastAssignment_10_3() { return cLastAssignment_10_3; }

		//EString
		public RuleCall getLastEStringParserRuleCall_10_3_0() { return cLastEStringParserRuleCall_10_3_0; }

		//(Fork+=RatingFork ("," Fork+=RatingFork)*)?
		public Group getGroup_11() { return cGroup_11; }

		//Fork+=RatingFork
		public Assignment getForkAssignment_11_0() { return cForkAssignment_11_0; }

		//RatingFork
		public RuleCall getForkRatingForkParserRuleCall_11_0_0() { return cForkRatingForkParserRuleCall_11_0_0; }

		//("," Fork+=RatingFork)*
		public Group getGroup_11_1() { return cGroup_11_1; }

		//","
		public Keyword getCommaKeyword_11_1_0() { return cCommaKeyword_11_1_0; }

		//Fork+=RatingFork
		public Assignment getForkAssignment_11_1_1() { return cForkAssignment_11_1_1; }

		//RatingFork
		public RuleCall getForkRatingForkParserRuleCall_11_1_1_0() { return cForkRatingForkParserRuleCall_11_1_1_0; }
	}

	public class RankingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ranking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRankingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cUserKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cMayKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Assignment cIsRequiredAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cIsRequiredIsRequiredKeyword_4_1_0 = (Keyword)cIsRequiredAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cAnswerKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cQuestionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_5_2_0 = (RuleCall)cQuestionAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Keyword cOneOfKeyword_6_1_0 = (Keyword)cAlternatives_6_1.eContents().get(0);
		private final Keyword cSomeOfKeyword_6_1_1 = (Keyword)cAlternatives_6_1.eContents().get(1);
		private final Keyword cTheseKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cChoicesAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cChoicesChoiceParserRuleCall_6_3_0 = (RuleCall)cChoicesAssignment_6_3.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cGroup_6.eContents().get(4);
		private final Keyword cCommaKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cChoicesAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cChoicesChoiceParserRuleCall_6_4_1_0 = (RuleCall)cChoicesAssignment_6_4_1.eContents().get(0);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cForkAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cForkRankingSumForkParserRuleCall_8_0_0 = (RuleCall)cForkAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cForkAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cForkRankingSumForkParserRuleCall_8_1_1_0 = (RuleCall)cForkAssignment_8_1_1.eContents().get(0);
		
		//Ranking:
		//	"Ranking" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"? question=EString)?
		//	("with"? ("one of" | "some of")? "these:"? choices+=Choice ("," choices+=Choice)*)? "."? (Fork+=RankingSumFork (","
		//	Fork+=RankingSumFork)*)?;
		public ParserRule getRule() { return rule; }

		//"Ranking" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"? question=EString)? ("with"?
		//("one of" | "some of")? "these:"? choices+=Choice ("," choices+=Choice)*)? "."? (Fork+=RankingSumFork (","
		//Fork+=RankingSumFork)*)?
		public Group getGroup() { return cGroup; }

		//"Ranking"
		public Keyword getRankingKeyword_0() { return cRankingKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("The"? "user")?
		public Group getGroup_3() { return cGroup_3; }

		//"The"?
		public Keyword getTheKeyword_3_0() { return cTheKeyword_3_0; }

		//"user"
		public Keyword getUserKeyword_3_1() { return cUserKeyword_3_1; }

		//("may" | isRequired?="is required")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"may"
		public Keyword getMayKeyword_4_0() { return cMayKeyword_4_0; }

		//isRequired?="is required"
		public Assignment getIsRequiredAssignment_4_1() { return cIsRequiredAssignment_4_1; }

		//"is required"
		public Keyword getIsRequiredIsRequiredKeyword_4_1_0() { return cIsRequiredIsRequiredKeyword_4_1_0; }

		//("to"? "answer"? question=EString)?
		public Group getGroup_5() { return cGroup_5; }

		//"to"?
		public Keyword getToKeyword_5_0() { return cToKeyword_5_0; }

		//"answer"?
		public Keyword getAnswerKeyword_5_1() { return cAnswerKeyword_5_1; }

		//question=EString
		public Assignment getQuestionAssignment_5_2() { return cQuestionAssignment_5_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_5_2_0() { return cQuestionEStringParserRuleCall_5_2_0; }

		//("with"? ("one of" | "some of")? "these:"? choices+=Choice ("," choices+=Choice)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"with"?
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }

		//("one of" | "some of")?
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//"one of"
		public Keyword getOneOfKeyword_6_1_0() { return cOneOfKeyword_6_1_0; }

		//"some of"
		public Keyword getSomeOfKeyword_6_1_1() { return cSomeOfKeyword_6_1_1; }

		//"these:"?
		public Keyword getTheseKeyword_6_2() { return cTheseKeyword_6_2; }

		//choices+=Choice
		public Assignment getChoicesAssignment_6_3() { return cChoicesAssignment_6_3; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_6_3_0() { return cChoicesChoiceParserRuleCall_6_3_0; }

		//("," choices+=Choice)*
		public Group getGroup_6_4() { return cGroup_6_4; }

		//","
		public Keyword getCommaKeyword_6_4_0() { return cCommaKeyword_6_4_0; }

		//choices+=Choice
		public Assignment getChoicesAssignment_6_4_1() { return cChoicesAssignment_6_4_1; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_6_4_1_0() { return cChoicesChoiceParserRuleCall_6_4_1_0; }

		//"."?
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }

		//(Fork+=RankingSumFork ("," Fork+=RankingSumFork)*)?
		public Group getGroup_8() { return cGroup_8; }

		//Fork+=RankingSumFork
		public Assignment getForkAssignment_8_0() { return cForkAssignment_8_0; }

		//RankingSumFork
		public RuleCall getForkRankingSumForkParserRuleCall_8_0_0() { return cForkRankingSumForkParserRuleCall_8_0_0; }

		//("," Fork+=RankingSumFork)*
		public Group getGroup_8_1() { return cGroup_8_1; }

		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }

		//Fork+=RankingSumFork
		public Assignment getForkAssignment_8_1_1() { return cForkAssignment_8_1_1; }

		//RankingSumFork
		public RuleCall getForkRankingSumForkParserRuleCall_8_1_1_0() { return cForkRankingSumForkParserRuleCall_8_1_1_0; }
	}

	public class DichotomousElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dichotomous");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDichotomousAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDichotomousKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cIsRequiredAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cIsRequiredIsRequiredKeyword_5_1_0 = (Keyword)cIsRequiredAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cToKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cAnswerKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cQuestionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_6_2_0 = (RuleCall)cQuestionAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cIfYesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOnYesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOnYesDichotomousForkParserRuleCall_7_1_0 = (RuleCall)cOnYesAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cIfNoKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cOnNoAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cOnNoDichotomousForkParserRuleCall_8_1_0 = (RuleCall)cOnNoAssignment_8_1.eContents().get(0);
		
		//Dichotomous:
		//	{Dichotomous} "Dichotomous" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
		//	question=EString)? ("if yes" onYes=DichotomousFork)? ("if no" onNo=DichotomousFork)?;
		public ParserRule getRule() { return rule; }

		//{Dichotomous} "Dichotomous" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
		//question=EString)? ("if yes" onYes=DichotomousFork)? ("if no" onNo=DichotomousFork)?
		public Group getGroup() { return cGroup; }

		//{Dichotomous}
		public Action getDichotomousAction_0() { return cDichotomousAction_0; }

		//"Dichotomous"
		public Keyword getDichotomousKeyword_1() { return cDichotomousKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("The"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"The"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | isRequired?="is required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//isRequired?="is required"
		public Assignment getIsRequiredAssignment_5_1() { return cIsRequiredAssignment_5_1; }

		//"is required"
		public Keyword getIsRequiredIsRequiredKeyword_5_1_0() { return cIsRequiredIsRequiredKeyword_5_1_0; }

		//("to"? "answer"? question=EString)?
		public Group getGroup_6() { return cGroup_6; }

		//"to"?
		public Keyword getToKeyword_6_0() { return cToKeyword_6_0; }

		//"answer"?
		public Keyword getAnswerKeyword_6_1() { return cAnswerKeyword_6_1; }

		//question=EString
		public Assignment getQuestionAssignment_6_2() { return cQuestionAssignment_6_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_6_2_0() { return cQuestionEStringParserRuleCall_6_2_0; }

		//("if yes" onYes=DichotomousFork)?
		public Group getGroup_7() { return cGroup_7; }

		//"if yes"
		public Keyword getIfYesKeyword_7_0() { return cIfYesKeyword_7_0; }

		//onYes=DichotomousFork
		public Assignment getOnYesAssignment_7_1() { return cOnYesAssignment_7_1; }

		//DichotomousFork
		public RuleCall getOnYesDichotomousForkParserRuleCall_7_1_0() { return cOnYesDichotomousForkParserRuleCall_7_1_0; }

		//("if no" onNo=DichotomousFork)?
		public Group getGroup_8() { return cGroup_8; }

		//"if no"
		public Keyword getIfNoKeyword_8_0() { return cIfNoKeyword_8_0; }

		//onNo=DichotomousFork
		public Assignment getOnNoAssignment_8_1() { return cOnNoAssignment_8_1; }

		//DichotomousFork
		public RuleCall getOnNoDichotomousForkParserRuleCall_8_1_0() { return cOnNoDichotomousForkParserRuleCall_8_1_0; }
	}

	public class SumConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSumConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSumConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cIsRequiredAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cIsRequiredIsRequiredKeyword_5_1_0 = (Keyword)cIsRequiredAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cToKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cAnswerKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cQuestionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_6_2_0 = (RuleCall)cQuestionAssignment_6_2.eContents().get(0);
		private final Keyword cAndCanDistributeUpToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cConstantAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cConstantEIntParserRuleCall_8_0 = (RuleCall)cConstantAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAmongTheseKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cChoicesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cChoicesChoiceParserRuleCall_9_1_0 = (RuleCall)cChoicesAssignment_9_1.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cCommaKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cChoicesAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cChoicesChoiceParserRuleCall_9_2_1_0 = (RuleCall)cChoicesAssignment_9_2_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cForkAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cForkRankingSumForkParserRuleCall_10_0_0 = (RuleCall)cForkAssignment_10_0.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Keyword cCommaKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cForkAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cForkRankingSumForkParserRuleCall_10_1_1_0 = (RuleCall)cForkAssignment_10_1_1.eContents().get(0);
		
		//SumConstant:
		//	{SumConstant} "SumConstant" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
		//	question=EString)? "and can distribute up to"? Constant=EInt ("among these" Choices+=Choice ("," Choices+=Choice)*)?
		//	(Fork+=RankingSumFork ("," Fork+=RankingSumFork)*)?;
		public ParserRule getRule() { return rule; }

		//{SumConstant} "SumConstant" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
		//question=EString)? "and can distribute up to"? Constant=EInt ("among these" Choices+=Choice ("," Choices+=Choice)*)?
		//(Fork+=RankingSumFork ("," Fork+=RankingSumFork)*)?
		public Group getGroup() { return cGroup; }

		//{SumConstant}
		public Action getSumConstantAction_0() { return cSumConstantAction_0; }

		//"SumConstant"
		public Keyword getSumConstantKeyword_1() { return cSumConstantKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("The"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"The"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | isRequired?="is required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//isRequired?="is required"
		public Assignment getIsRequiredAssignment_5_1() { return cIsRequiredAssignment_5_1; }

		//"is required"
		public Keyword getIsRequiredIsRequiredKeyword_5_1_0() { return cIsRequiredIsRequiredKeyword_5_1_0; }

		//("to"? "answer"? question=EString)?
		public Group getGroup_6() { return cGroup_6; }

		//"to"?
		public Keyword getToKeyword_6_0() { return cToKeyword_6_0; }

		//"answer"?
		public Keyword getAnswerKeyword_6_1() { return cAnswerKeyword_6_1; }

		//question=EString
		public Assignment getQuestionAssignment_6_2() { return cQuestionAssignment_6_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_6_2_0() { return cQuestionEStringParserRuleCall_6_2_0; }

		//"and can distribute up to"?
		public Keyword getAndCanDistributeUpToKeyword_7() { return cAndCanDistributeUpToKeyword_7; }

		//Constant=EInt
		public Assignment getConstantAssignment_8() { return cConstantAssignment_8; }

		//EInt
		public RuleCall getConstantEIntParserRuleCall_8_0() { return cConstantEIntParserRuleCall_8_0; }

		//("among these" Choices+=Choice ("," Choices+=Choice)*)?
		public Group getGroup_9() { return cGroup_9; }

		//"among these"
		public Keyword getAmongTheseKeyword_9_0() { return cAmongTheseKeyword_9_0; }

		//Choices+=Choice
		public Assignment getChoicesAssignment_9_1() { return cChoicesAssignment_9_1; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_9_1_0() { return cChoicesChoiceParserRuleCall_9_1_0; }

		//("," Choices+=Choice)*
		public Group getGroup_9_2() { return cGroup_9_2; }

		//","
		public Keyword getCommaKeyword_9_2_0() { return cCommaKeyword_9_2_0; }

		//Choices+=Choice
		public Assignment getChoicesAssignment_9_2_1() { return cChoicesAssignment_9_2_1; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_9_2_1_0() { return cChoicesChoiceParserRuleCall_9_2_1_0; }

		//(Fork+=RankingSumFork ("," Fork+=RankingSumFork)*)?
		public Group getGroup_10() { return cGroup_10; }

		//Fork+=RankingSumFork
		public Assignment getForkAssignment_10_0() { return cForkAssignment_10_0; }

		//RankingSumFork
		public RuleCall getForkRankingSumForkParserRuleCall_10_0_0() { return cForkRankingSumForkParserRuleCall_10_0_0; }

		//("," Fork+=RankingSumFork)*
		public Group getGroup_10_1() { return cGroup_10_1; }

		//","
		public Keyword getCommaKeyword_10_1_0() { return cCommaKeyword_10_1_0; }

		//Fork+=RankingSumFork
		public Assignment getForkAssignment_10_1_1() { return cForkAssignment_10_1_1; }

		//RankingSumFork
		public RuleCall getForkRankingSumForkParserRuleCall_10_1_1_0() { return cForkRankingSumForkParserRuleCall_10_1_1_0; }
	}

	public class StapleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Staple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStapleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStapleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cUserKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cMayKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cIsRequiredAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cIsRequiredIsRequiredKeyword_5_1_0 = (Keyword)cIsRequiredAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cToKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cAnswerKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cQuestionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cQuestionEStringParserRuleCall_6_2_0 = (RuleCall)cQuestionAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cBetweenKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cMinAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_7_1_0 = (RuleCall)cMinAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cAndKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cMaxAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_8_1_0 = (RuleCall)cMaxAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cWhereKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLowestKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cMeansKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cCommaKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cFirstAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final RuleCall cFirstEStringParserRuleCall_9_4_0 = (RuleCall)cFirstAssignment_9_4.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cMidKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cMeansKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cMidAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cMidEStringParserRuleCall_10_2_0 = (RuleCall)cMidAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cAndKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cHighestKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cMeansKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cLastAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cLastEStringParserRuleCall_11_3_0 = (RuleCall)cLastAssignment_11_3.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Assignment cForkAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final RuleCall cForkRatingForkParserRuleCall_12_0_0 = (RuleCall)cForkAssignment_12_0.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final Keyword cCommaKeyword_12_1_0 = (Keyword)cGroup_12_1.eContents().get(0);
		private final Assignment cForkAssignment_12_1_1 = (Assignment)cGroup_12_1.eContents().get(1);
		private final RuleCall cForkRatingForkParserRuleCall_12_1_1_0 = (RuleCall)cForkAssignment_12_1_1.eContents().get(0);
		
		//Staple:
		//	{Staple} "Staple" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
		//	question=EString)? ("between"? Min=EInt)? ("and"? Max=EInt)? ("where"? "lowest" "means"? ","? first=EString)? ("mid"
		//	"means"? mid=EString)? ("and"? "highest" "means"? last=EString)? (Fork+=RatingFork ("," Fork+=RatingFork)*)?;
		public ParserRule getRule() { return rule; }

		//{Staple} "Staple" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"? question=EString)?
		//("between"? Min=EInt)? ("and"? Max=EInt)? ("where"? "lowest" "means"? ","? first=EString)? ("mid" "means"?
		//mid=EString)? ("and"? "highest" "means"? last=EString)? (Fork+=RatingFork ("," Fork+=RatingFork)*)?
		public Group getGroup() { return cGroup; }

		//{Staple}
		public Action getStapleAction_0() { return cStapleAction_0; }

		//"Staple"
		public Keyword getStapleKeyword_1() { return cStapleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("The"? "user")?
		public Group getGroup_4() { return cGroup_4; }

		//"The"?
		public Keyword getTheKeyword_4_0() { return cTheKeyword_4_0; }

		//"user"
		public Keyword getUserKeyword_4_1() { return cUserKeyword_4_1; }

		//("may" | isRequired?="is required")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"may"
		public Keyword getMayKeyword_5_0() { return cMayKeyword_5_0; }

		//isRequired?="is required"
		public Assignment getIsRequiredAssignment_5_1() { return cIsRequiredAssignment_5_1; }

		//"is required"
		public Keyword getIsRequiredIsRequiredKeyword_5_1_0() { return cIsRequiredIsRequiredKeyword_5_1_0; }

		//("to"? "answer"? question=EString)?
		public Group getGroup_6() { return cGroup_6; }

		//"to"?
		public Keyword getToKeyword_6_0() { return cToKeyword_6_0; }

		//"answer"?
		public Keyword getAnswerKeyword_6_1() { return cAnswerKeyword_6_1; }

		//question=EString
		public Assignment getQuestionAssignment_6_2() { return cQuestionAssignment_6_2; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_6_2_0() { return cQuestionEStringParserRuleCall_6_2_0; }

		//("between"? Min=EInt)?
		public Group getGroup_7() { return cGroup_7; }

		//"between"?
		public Keyword getBetweenKeyword_7_0() { return cBetweenKeyword_7_0; }

		//Min=EInt
		public Assignment getMinAssignment_7_1() { return cMinAssignment_7_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_7_1_0() { return cMinEIntParserRuleCall_7_1_0; }

		//("and"? Max=EInt)?
		public Group getGroup_8() { return cGroup_8; }

		//"and"?
		public Keyword getAndKeyword_8_0() { return cAndKeyword_8_0; }

		//Max=EInt
		public Assignment getMaxAssignment_8_1() { return cMaxAssignment_8_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_8_1_0() { return cMaxEIntParserRuleCall_8_1_0; }

		//("where"? "lowest" "means"? ","? first=EString)?
		public Group getGroup_9() { return cGroup_9; }

		//"where"?
		public Keyword getWhereKeyword_9_0() { return cWhereKeyword_9_0; }

		//"lowest"
		public Keyword getLowestKeyword_9_1() { return cLowestKeyword_9_1; }

		//"means"?
		public Keyword getMeansKeyword_9_2() { return cMeansKeyword_9_2; }

		//","?
		public Keyword getCommaKeyword_9_3() { return cCommaKeyword_9_3; }

		//first=EString
		public Assignment getFirstAssignment_9_4() { return cFirstAssignment_9_4; }

		//EString
		public RuleCall getFirstEStringParserRuleCall_9_4_0() { return cFirstEStringParserRuleCall_9_4_0; }

		//("mid" "means"? mid=EString)?
		public Group getGroup_10() { return cGroup_10; }

		//"mid"
		public Keyword getMidKeyword_10_0() { return cMidKeyword_10_0; }

		//"means"?
		public Keyword getMeansKeyword_10_1() { return cMeansKeyword_10_1; }

		//mid=EString
		public Assignment getMidAssignment_10_2() { return cMidAssignment_10_2; }

		//EString
		public RuleCall getMidEStringParserRuleCall_10_2_0() { return cMidEStringParserRuleCall_10_2_0; }

		//("and"? "highest" "means"? last=EString)?
		public Group getGroup_11() { return cGroup_11; }

		//"and"?
		public Keyword getAndKeyword_11_0() { return cAndKeyword_11_0; }

		//"highest"
		public Keyword getHighestKeyword_11_1() { return cHighestKeyword_11_1; }

		//"means"?
		public Keyword getMeansKeyword_11_2() { return cMeansKeyword_11_2; }

		//last=EString
		public Assignment getLastAssignment_11_3() { return cLastAssignment_11_3; }

		//EString
		public RuleCall getLastEStringParserRuleCall_11_3_0() { return cLastEStringParserRuleCall_11_3_0; }

		//(Fork+=RatingFork ("," Fork+=RatingFork)*)?
		public Group getGroup_12() { return cGroup_12; }

		//Fork+=RatingFork
		public Assignment getForkAssignment_12_0() { return cForkAssignment_12_0; }

		//RatingFork
		public RuleCall getForkRatingForkParserRuleCall_12_0_0() { return cForkRatingForkParserRuleCall_12_0_0; }

		//("," Fork+=RatingFork)*
		public Group getGroup_12_1() { return cGroup_12_1; }

		//","
		public Keyword getCommaKeyword_12_1_0() { return cCommaKeyword_12_1_0; }

		//Fork+=RatingFork
		public Assignment getForkAssignment_12_1_1() { return cForkAssignment_12_1_1; }

		//RatingFork
		public RuleCall getForkRatingForkParserRuleCall_12_1_1_0() { return cForkRatingForkParserRuleCall_12_1_1_0; }
	}

	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//Choice:
		//	name=ID ":" Description=EString;
		public ParserRule getRule() { return rule; }

		//name=ID ":" Description=EString
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//Description=EString
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_2_0() { return cDescriptionEStringParserRuleCall_2_0; }
	}

	public class ChoiceForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoiceFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOnChoiceCrossReference_1_0 = (CrossReference)cOnAssignment_1.eContents().get(0);
		private final RuleCall cOnChoiceEStringParserRuleCall_1_0_1 = (RuleCall)cOnChoiceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOnAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOnChoiceCrossReference_2_1_0 = (CrossReference)cOnAssignment_2_1.eContents().get(0);
		private final RuleCall cOnChoiceEStringParserRuleCall_2_1_0_1 = (RuleCall)cOnChoiceCrossReference_2_1_0.eContents().get(1);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cGoToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cQuestionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cQuestionsQuestionCrossReference_5_0 = (CrossReference)cQuestionsAssignment_5.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_5_0_1 = (RuleCall)cQuestionsQuestionCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cQuestionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cQuestionsQuestionCrossReference_6_1_0 = (CrossReference)cQuestionsAssignment_6_1.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_6_1_0_1 = (RuleCall)cQuestionsQuestionCrossReference_6_1_0.eContents().get(1);
		
		//ChoiceFork:
		//	"If" On+=[Choice|EString] ("," On+=[Choice|EString])* "then"? "go to" Questions+=[Question|EString] (","
		//	Questions+=[Question|EString])*;
		public ParserRule getRule() { return rule; }

		//"If" On+=[Choice|EString] ("," On+=[Choice|EString])* "then"? "go to" Questions+=[Question|EString] (","
		//Questions+=[Question|EString])*
		public Group getGroup() { return cGroup; }

		//"If"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//On+=[Choice|EString]
		public Assignment getOnAssignment_1() { return cOnAssignment_1; }

		//[Choice|EString]
		public CrossReference getOnChoiceCrossReference_1_0() { return cOnChoiceCrossReference_1_0; }

		//EString
		public RuleCall getOnChoiceEStringParserRuleCall_1_0_1() { return cOnChoiceEStringParserRuleCall_1_0_1; }

		//("," On+=[Choice|EString])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//On+=[Choice|EString]
		public Assignment getOnAssignment_2_1() { return cOnAssignment_2_1; }

		//[Choice|EString]
		public CrossReference getOnChoiceCrossReference_2_1_0() { return cOnChoiceCrossReference_2_1_0; }

		//EString
		public RuleCall getOnChoiceEStringParserRuleCall_2_1_0_1() { return cOnChoiceEStringParserRuleCall_2_1_0_1; }

		//"then"?
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//"go to"
		public Keyword getGoToKeyword_4() { return cGoToKeyword_4; }

		//Questions+=[Question|EString]
		public Assignment getQuestionsAssignment_5() { return cQuestionsAssignment_5; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_5_0() { return cQuestionsQuestionCrossReference_5_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_5_0_1() { return cQuestionsQuestionEStringParserRuleCall_5_0_1; }

		//("," Questions+=[Question|EString])*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//Questions+=[Question|EString]
		public Assignment getQuestionsAssignment_6_1() { return cQuestionsAssignment_6_1; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_6_1_0() { return cQuestionsQuestionCrossReference_6_1_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_6_1_0_1() { return cQuestionsQuestionEStringParserRuleCall_6_1_0_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class RatingForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RatingFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBetweenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinEIntParserRuleCall_2_0 = (RuleCall)cMinAssignment_2.eContents().get(0);
		private final Keyword cAndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMaxAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMaxEIntParserRuleCall_4_0 = (RuleCall)cMaxAssignment_4.eContents().get(0);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cGoToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cQuestionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cQuestionsQuestionCrossReference_7_0 = (CrossReference)cQuestionsAssignment_7.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_7_0_1 = (RuleCall)cQuestionsQuestionCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cQuestionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cQuestionsQuestionCrossReference_8_1_0 = (CrossReference)cQuestionsAssignment_8_1.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_8_1_0_1 = (RuleCall)cQuestionsQuestionCrossReference_8_1_0.eContents().get(1);
		
		//RatingFork:
		//	"If" "between" Min=EInt "and" Max=EInt "then"? "go to" Questions+=[Question|EString] (","
		//	Questions+=[Question|EString])*;
		public ParserRule getRule() { return rule; }

		//"If" "between" Min=EInt "and" Max=EInt "then"? "go to" Questions+=[Question|EString] (","
		//Questions+=[Question|EString])*
		public Group getGroup() { return cGroup; }

		//"If"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"between"
		public Keyword getBetweenKeyword_1() { return cBetweenKeyword_1; }

		//Min=EInt
		public Assignment getMinAssignment_2() { return cMinAssignment_2; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_2_0() { return cMinEIntParserRuleCall_2_0; }

		//"and"
		public Keyword getAndKeyword_3() { return cAndKeyword_3; }

		//Max=EInt
		public Assignment getMaxAssignment_4() { return cMaxAssignment_4; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_4_0() { return cMaxEIntParserRuleCall_4_0; }

		//"then"?
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }

		//"go to"
		public Keyword getGoToKeyword_6() { return cGoToKeyword_6; }

		//Questions+=[Question|EString]
		public Assignment getQuestionsAssignment_7() { return cQuestionsAssignment_7; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_7_0() { return cQuestionsQuestionCrossReference_7_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_7_0_1() { return cQuestionsQuestionEStringParserRuleCall_7_0_1; }

		//("," Questions+=[Question|EString])*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//Questions+=[Question|EString]
		public Assignment getQuestionsAssignment_8_1() { return cQuestionsAssignment_8_1; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_8_1_0() { return cQuestionsQuestionCrossReference_8_1_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_8_1_0_1() { return cQuestionsQuestionEStringParserRuleCall_8_1_0_1; }
	}

	public class RankingSumForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RankingSumFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOnChoiceCrossReference_1_0 = (CrossReference)cOnAssignment_1.eContents().get(0);
		private final RuleCall cOnChoiceEStringParserRuleCall_1_0_1 = (RuleCall)cOnChoiceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOnAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOnChoiceCrossReference_2_1_0 = (CrossReference)cOnAssignment_2_1.eContents().get(0);
		private final RuleCall cOnChoiceEStringParserRuleCall_2_1_0_1 = (RuleCall)cOnChoiceCrossReference_2_1_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBetweenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMinAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMinEIntParserRuleCall_5_0 = (RuleCall)cMinAssignment_5.eContents().get(0);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMaxAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMaxEIntParserRuleCall_7_0 = (RuleCall)cMaxAssignment_7.eContents().get(0);
		private final Keyword cThenKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cGoToKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cQuestionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cQuestionsQuestionCrossReference_10_0 = (CrossReference)cQuestionsAssignment_10.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_10_0_1 = (RuleCall)cQuestionsQuestionCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cQuestionsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cQuestionsQuestionCrossReference_11_1_0 = (CrossReference)cQuestionsAssignment_11_1.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_11_1_0_1 = (RuleCall)cQuestionsQuestionCrossReference_11_1_0.eContents().get(1);
		
		//RankingSumFork:
		//	"If" On+=[Choice|EString] ("," On+=[Choice|EString])* ":" "between"? Min=EInt "to" Max=EInt "then"? "go to"
		//	Questions+=[Question|EString] ("," Questions+=[Question|EString])*;
		public ParserRule getRule() { return rule; }

		//"If" On+=[Choice|EString] ("," On+=[Choice|EString])* ":" "between"? Min=EInt "to" Max=EInt "then"? "go to"
		//Questions+=[Question|EString] ("," Questions+=[Question|EString])*
		public Group getGroup() { return cGroup; }

		//"If"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//On+=[Choice|EString]
		public Assignment getOnAssignment_1() { return cOnAssignment_1; }

		//[Choice|EString]
		public CrossReference getOnChoiceCrossReference_1_0() { return cOnChoiceCrossReference_1_0; }

		//EString
		public RuleCall getOnChoiceEStringParserRuleCall_1_0_1() { return cOnChoiceEStringParserRuleCall_1_0_1; }

		//("," On+=[Choice|EString])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//On+=[Choice|EString]
		public Assignment getOnAssignment_2_1() { return cOnAssignment_2_1; }

		//[Choice|EString]
		public CrossReference getOnChoiceCrossReference_2_1_0() { return cOnChoiceCrossReference_2_1_0; }

		//EString
		public RuleCall getOnChoiceEStringParserRuleCall_2_1_0_1() { return cOnChoiceEStringParserRuleCall_2_1_0_1; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//"between"?
		public Keyword getBetweenKeyword_4() { return cBetweenKeyword_4; }

		//Min=EInt
		public Assignment getMinAssignment_5() { return cMinAssignment_5; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_5_0() { return cMinEIntParserRuleCall_5_0; }

		//"to"
		public Keyword getToKeyword_6() { return cToKeyword_6; }

		//Max=EInt
		public Assignment getMaxAssignment_7() { return cMaxAssignment_7; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_7_0() { return cMaxEIntParserRuleCall_7_0; }

		//"then"?
		public Keyword getThenKeyword_8() { return cThenKeyword_8; }

		//"go to"
		public Keyword getGoToKeyword_9() { return cGoToKeyword_9; }

		//Questions+=[Question|EString]
		public Assignment getQuestionsAssignment_10() { return cQuestionsAssignment_10; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_10_0() { return cQuestionsQuestionCrossReference_10_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_10_0_1() { return cQuestionsQuestionEStringParserRuleCall_10_0_1; }

		//("," Questions+=[Question|EString])*
		public Group getGroup_11() { return cGroup_11; }

		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }

		//Questions+=[Question|EString]
		public Assignment getQuestionsAssignment_11_1() { return cQuestionsAssignment_11_1; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_11_1_0() { return cQuestionsQuestionCrossReference_11_1_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_11_1_0_1() { return cQuestionsQuestionEStringParserRuleCall_11_1_0_1; }
	}

	public class DichotomousForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DichotomousFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGoToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQuestionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cQuestionsQuestionCrossReference_2_0 = (CrossReference)cQuestionsAssignment_2.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_2_0_1 = (RuleCall)cQuestionsQuestionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQuestionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cQuestionsQuestionCrossReference_3_1_0 = (CrossReference)cQuestionsAssignment_3_1.eContents().get(0);
		private final RuleCall cQuestionsQuestionEStringParserRuleCall_3_1_0_1 = (RuleCall)cQuestionsQuestionCrossReference_3_1_0.eContents().get(1);
		
		//DichotomousFork:
		//	"then"? "go to" Questions+=[Question|EString] ("," Questions+=[Question|EString])*;
		public ParserRule getRule() { return rule; }

		//"then"? "go to" Questions+=[Question|EString] ("," Questions+=[Question|EString])*
		public Group getGroup() { return cGroup; }

		//"then"?
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }

		//"go to"
		public Keyword getGoToKeyword_1() { return cGoToKeyword_1; }

		//Questions+=[Question|EString]
		public Assignment getQuestionsAssignment_2() { return cQuestionsAssignment_2; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_2_0() { return cQuestionsQuestionCrossReference_2_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_2_0_1() { return cQuestionsQuestionEStringParserRuleCall_2_0_1; }

		//("," Questions+=[Question|EString])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//Questions+=[Question|EString]
		public Assignment getQuestionsAssignment_3_1() { return cQuestionsAssignment_3_1; }

		//[Question|EString]
		public CrossReference getQuestionsQuestionCrossReference_3_1_0() { return cQuestionsQuestionCrossReference_3_1_0; }

		//EString
		public RuleCall getQuestionsQuestionEStringParserRuleCall_3_1_0_1() { return cQuestionsQuestionEStringParserRuleCall_3_1_0_1; }
	}
	
	
	private ModelElements pModel;
	private QuestionElements pQuestion;
	private SurveyElements pSurvey;
	private EStringElements pEString;
	private EBooleanElements pEBoolean;
	private MultipleChoiceElements pMultipleChoice;
	private OpenElements pOpen;
	private Rating_ImplElements pRating_Impl;
	private RankingElements pRanking;
	private DichotomousElements pDichotomous;
	private SumConstantElements pSumConstant;
	private StapleElements pStaple;
	private ChoiceElements pChoice;
	private ChoiceForkElements pChoiceFork;
	private EIntElements pEInt;
	private RatingForkElements pRatingFork;
	private RankingSumForkElements pRankingSumFork;
	private DichotomousForkElements pDichotomousFork;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} (surveys+=Survey ("??????" surveys+=Survey)*)?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Question:
	//	MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Survey:
	//	{Survey} name=EString (questions+=Question ";" (questions+=Question ";")*)?;
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//MultipleChoice:
	//	{MultipleChoice} "MultipleChoice" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
	//	question=EString)? ("picking" "up to"? answerCount=EInt "choice")? ("with"? ("one of" | "some of")? "these:"?
	//	choice+=Choice ("," choice+=Choice)*)? ("or" "with"? "something"? "else"? other=EString)? "."? (Fork+=ChoiceFork (","
	//	Fork+=ChoiceFork)*)?;
	public MultipleChoiceElements getMultipleChoiceAccess() {
		return (pMultipleChoice != null) ? pMultipleChoice : (pMultipleChoice = new MultipleChoiceElements());
	}
	
	public ParserRule getMultipleChoiceRule() {
		return getMultipleChoiceAccess().getRule();
	}

	//Open:
	//	{Open} "Open" name=ID ":" ("The"? "user")? ("may" | "is required")? ("to"? "answer"? question=EString)?;
	public OpenElements getOpenAccess() {
		return (pOpen != null) ? pOpen : (pOpen = new OpenElements());
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}

	//Rating_Impl returns Rating:
	//	{Rating} "Rating" name=ID ":" ("The"? "user")? ("may" | "is required")? ("to"? "rate"? question=EString)? ("between"?
	//	Min=EInt)? ("and"? Max=EInt)? ("where"? "lowest" "means"? first=EString)? ("and"? "highest" "means"? last=EString)?
	//	(Fork+=RatingFork ("," Fork+=RatingFork)*)?;
	public Rating_ImplElements getRating_ImplAccess() {
		return (pRating_Impl != null) ? pRating_Impl : (pRating_Impl = new Rating_ImplElements());
	}
	
	public ParserRule getRating_ImplRule() {
		return getRating_ImplAccess().getRule();
	}

	//Ranking:
	//	"Ranking" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"? question=EString)?
	//	("with"? ("one of" | "some of")? "these:"? choices+=Choice ("," choices+=Choice)*)? "."? (Fork+=RankingSumFork (","
	//	Fork+=RankingSumFork)*)?;
	public RankingElements getRankingAccess() {
		return (pRanking != null) ? pRanking : (pRanking = new RankingElements());
	}
	
	public ParserRule getRankingRule() {
		return getRankingAccess().getRule();
	}

	//Dichotomous:
	//	{Dichotomous} "Dichotomous" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
	//	question=EString)? ("if yes" onYes=DichotomousFork)? ("if no" onNo=DichotomousFork)?;
	public DichotomousElements getDichotomousAccess() {
		return (pDichotomous != null) ? pDichotomous : (pDichotomous = new DichotomousElements());
	}
	
	public ParserRule getDichotomousRule() {
		return getDichotomousAccess().getRule();
	}

	//SumConstant:
	//	{SumConstant} "SumConstant" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
	//	question=EString)? "and can distribute up to"? Constant=EInt ("among these" Choices+=Choice ("," Choices+=Choice)*)?
	//	(Fork+=RankingSumFork ("," Fork+=RankingSumFork)*)?;
	public SumConstantElements getSumConstantAccess() {
		return (pSumConstant != null) ? pSumConstant : (pSumConstant = new SumConstantElements());
	}
	
	public ParserRule getSumConstantRule() {
		return getSumConstantAccess().getRule();
	}

	//Staple:
	//	{Staple} "Staple" name=ID ":" ("The"? "user")? ("may" | isRequired?="is required")? ("to"? "answer"?
	//	question=EString)? ("between"? Min=EInt)? ("and"? Max=EInt)? ("where"? "lowest" "means"? ","? first=EString)? ("mid"
	//	"means"? mid=EString)? ("and"? "highest" "means"? last=EString)? (Fork+=RatingFork ("," Fork+=RatingFork)*)?;
	public StapleElements getStapleAccess() {
		return (pStaple != null) ? pStaple : (pStaple = new StapleElements());
	}
	
	public ParserRule getStapleRule() {
		return getStapleAccess().getRule();
	}

	//Choice:
	//	name=ID ":" Description=EString;
	public ChoiceElements getChoiceAccess() {
		return (pChoice != null) ? pChoice : (pChoice = new ChoiceElements());
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}

	//ChoiceFork:
	//	"If" On+=[Choice|EString] ("," On+=[Choice|EString])* "then"? "go to" Questions+=[Question|EString] (","
	//	Questions+=[Question|EString])*;
	public ChoiceForkElements getChoiceForkAccess() {
		return (pChoiceFork != null) ? pChoiceFork : (pChoiceFork = new ChoiceForkElements());
	}
	
	public ParserRule getChoiceForkRule() {
		return getChoiceForkAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//RatingFork:
	//	"If" "between" Min=EInt "and" Max=EInt "then"? "go to" Questions+=[Question|EString] (","
	//	Questions+=[Question|EString])*;
	public RatingForkElements getRatingForkAccess() {
		return (pRatingFork != null) ? pRatingFork : (pRatingFork = new RatingForkElements());
	}
	
	public ParserRule getRatingForkRule() {
		return getRatingForkAccess().getRule();
	}

	//RankingSumFork:
	//	"If" On+=[Choice|EString] ("," On+=[Choice|EString])* ":" "between"? Min=EInt "to" Max=EInt "then"? "go to"
	//	Questions+=[Question|EString] ("," Questions+=[Question|EString])*;
	public RankingSumForkElements getRankingSumForkAccess() {
		return (pRankingSumFork != null) ? pRankingSumFork : (pRankingSumFork = new RankingSumForkElements());
	}
	
	public ParserRule getRankingSumForkRule() {
		return getRankingSumForkAccess().getRule();
	}

	//DichotomousFork:
	//	"then"? "go to" Questions+=[Question|EString] ("," Questions+=[Question|EString])*;
	public DichotomousForkElements getDichotomousForkAccess() {
		return (pDichotomousFork != null) ? pDichotomousFork : (pDichotomousFork = new DichotomousForkElements());
	}
	
	public ParserRule getDichotomousForkRule() {
		return getDichotomousForkAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
