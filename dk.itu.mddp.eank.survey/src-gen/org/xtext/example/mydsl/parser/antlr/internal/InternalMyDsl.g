/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSurveysSurveyParserRuleCall_1_0()); 
	    }
		lv_surveys_1_0=ruleSurvey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"surveys",
        		lv_surveys_1_0, 
        		"Survey");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getMultipleChoiceParserRuleCall_0()); 
    }
    this_MultipleChoice_0=ruleMultipleChoice
    { 
        $current = $this_MultipleChoice_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getOpenParserRuleCall_1()); 
    }
    this_Open_1=ruleOpen
    { 
        $current = $this_Open_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRating_ImplParserRuleCall_2()); 
    }
    this_Rating_Impl_2=ruleRating_Impl
    { 
        $current = $this_Rating_Impl_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRankingParserRuleCall_3()); 
    }
    this_Ranking_3=ruleRanking
    { 
        $current = $this_Ranking_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getDichotomousParserRuleCall_4()); 
    }
    this_Dichotomous_4=ruleDichotomous
    { 
        $current = $this_Dichotomous_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getConstantSumParserRuleCall_5()); 
    }
    this_ConstantSum_5=ruleConstantSum
    { 
        $current = $this_ConstantSum_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getStapleParserRuleCall_6()); 
    }
    this_Staple_6=ruleStaple
    { 
        $current = $this_Staple_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSurvey
entryRuleSurvey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSurveyRule()); }
	 iv_ruleSurvey=ruleSurvey 
	 { $current=$iv_ruleSurvey.current; } 
	 EOF 
;

// Rule Survey
ruleSurvey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSurveyAccess().getSurveyAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_2_0_0()); 
	    }
		lv_questions_2_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_2_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_2_1_0()); 
	    }
		lv_questions_3_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_3_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRuleMultipleChoice
entryRuleMultipleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultipleChoiceRule()); }
	 iv_ruleMultipleChoice=ruleMultipleChoice 
	 { $current=$iv_ruleMultipleChoice.current; } 
	 EOF 
;

// Rule MultipleChoice
ruleMultipleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMultipleChoiceAccess().getMultipleChoiceAction_0(),
            $current);
    }
)	otherlv_1='MultipleChoice' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultipleChoiceAccess().getMultipleChoiceKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getMultipleChoiceAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleChoiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultipleChoiceAccess().getColonKeyword_3());
    }
((	otherlv_4='the' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultipleChoiceAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMultipleChoiceAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultipleChoiceAccess().getMayKeyword_5_0());
    }

    |((
(
		lv_isRequired_7_0=	'is' 
    {
        newLeafNode(lv_isRequired_7_0, grammarAccess.getMultipleChoiceAccess().getIsRequiredIsKeyword_5_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleChoiceRule());
	        }
       		setWithLastConsumed($current, "isRequired", true, "is");
	    }

)
)	otherlv_8='required' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMultipleChoiceAccess().getRequiredKeyword_5_1_1());
    }
))?(	otherlv_9='to' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMultipleChoiceAccess().getToKeyword_6());
    }
)?(	otherlv_10='answer' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMultipleChoiceAccess().getAnswerKeyword_7());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getQuestionEStringParserRuleCall_8_0()); 
	    }
		lv_question_11_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_11_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12='picking' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMultipleChoiceAccess().getPickingKeyword_9_0());
    }
(	otherlv_13='up to' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMultipleChoiceAccess().getUpToKeyword_9_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getAnswerCountEIntParserRuleCall_9_2_0()); 
	    }
		lv_answerCount_14_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		set(
       			$current, 
       			"answerCount",
        		lv_answerCount_14_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_15='from' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMultipleChoiceAccess().getFromKeyword_10());
    }
)?(	otherlv_16='one of' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMultipleChoiceAccess().getOneOfKeyword_11_0());
    }

    |	otherlv_17='some of' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getMultipleChoiceAccess().getSomeOfKeyword_11_1());
    }
)?(	otherlv_18='these' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getMultipleChoiceAccess().getTheseKeyword_12());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getChoiceChoiceParserRuleCall_13_0()); 
	    }
		lv_choice_19_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"choice",
        		lv_choice_19_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getMultipleChoiceAccess().getCommaKeyword_14_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getChoiceChoiceParserRuleCall_14_1_0()); 
	    }
		lv_choice_21_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"choice",
        		lv_choice_21_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_22='or' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getMultipleChoiceAccess().getOrKeyword_15_0());
    }
(	otherlv_23='with' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getMultipleChoiceAccess().getWithKeyword_15_1());
    }
)?(	otherlv_24='something' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getMultipleChoiceAccess().getSomethingKeyword_15_2());
    }
)?(	otherlv_25='else' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getMultipleChoiceAccess().getElseKeyword_15_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getOtherEStringParserRuleCall_15_4_0()); 
	    }
		lv_other_26_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		set(
       			$current, 
       			"other",
        		lv_other_26_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getForkChoiceForkParserRuleCall_16_0_0()); 
	    }
		lv_Fork_27_0=ruleChoiceFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_27_0, 
        		"ChoiceFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_28=',' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getMultipleChoiceAccess().getCommaKeyword_16_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getForkChoiceForkParserRuleCall_16_1_1_0()); 
	    }
		lv_Fork_29_0=ruleChoiceFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_29_0, 
        		"ChoiceFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	 iv_ruleOpen=ruleOpen 
	 { $current=$iv_ruleOpen.current; } 
	 EOF 
;

// Rule Open
ruleOpen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOpenAccess().getOpenAction_0(),
            $current);
    }
)	otherlv_1='Open' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOpenAccess().getOpenKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getOpenAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpenRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOpenAccess().getColonKeyword_3());
    }
((	otherlv_4='the' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOpenAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOpenAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOpenAccess().getMayKeyword_5_0());
    }

    |((
(
		lv_isRequired_7_0=	'is' 
    {
        newLeafNode(lv_isRequired_7_0, grammarAccess.getOpenAccess().getIsRequiredIsKeyword_5_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpenRule());
	        }
       		setWithLastConsumed($current, "isRequired", true, "is");
	    }

)
)	otherlv_8='required' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getOpenAccess().getRequiredKeyword_5_1_1());
    }
))?(	otherlv_9='to' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getOpenAccess().getToKeyword_6());
    }
)?(	otherlv_10='answer' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getOpenAccess().getAnswerKeyword_7());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getQuestionEStringParserRuleCall_8_0()); 
	    }
		lv_question_11_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_11_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRating_Impl
entryRuleRating_Impl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRating_ImplRule()); }
	 iv_ruleRating_Impl=ruleRating_Impl 
	 { $current=$iv_ruleRating_Impl.current; } 
	 EOF 
;

// Rule Rating_Impl
ruleRating_Impl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRating_ImplAccess().getRatingAction_0(),
            $current);
    }
)	otherlv_1='Rating' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRating_ImplAccess().getRatingKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getRating_ImplAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRating_ImplRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRating_ImplAccess().getColonKeyword_3());
    }
((	otherlv_4='the' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRating_ImplAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRating_ImplAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRating_ImplAccess().getMayKeyword_5_0());
    }

    |(	otherlv_7='is' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRating_ImplAccess().getIsKeyword_5_1_0());
    }
	otherlv_8='required' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRating_ImplAccess().getRequiredKeyword_5_1_1());
    }
))?(	otherlv_9='to' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRating_ImplAccess().getToKeyword_6());
    }
)?(	otherlv_10='rate' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRating_ImplAccess().getRateKeyword_7_0());
    }

    |	otherlv_11='answer' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRating_ImplAccess().getAnswerKeyword_7_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getQuestionEStringParserRuleCall_8_0()); 
	    }
		lv_question_12_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_12_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13='between' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRating_ImplAccess().getBetweenKeyword_9());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getMinEIntParserRuleCall_10_0()); 
	    }
		lv_Min_14_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_14_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15='and' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRating_ImplAccess().getAndKeyword_11());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getMaxEIntParserRuleCall_12_0()); 
	    }
		lv_Max_16_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_16_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_17='where' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getRating_ImplAccess().getWhereKeyword_13());
    }
)?	otherlv_18='lowest' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getRating_ImplAccess().getLowestKeyword_14());
    }
(	otherlv_19='means' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getRating_ImplAccess().getMeansKeyword_15());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getFirstEStringParserRuleCall_16_0()); 
	    }
		lv_first_20_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_20_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_21='and' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getRating_ImplAccess().getAndKeyword_17());
    }
)?	otherlv_22='highest' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getRating_ImplAccess().getHighestKeyword_18());
    }
(	otherlv_23='means' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getRating_ImplAccess().getMeansKeyword_19());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getLastEStringParserRuleCall_20_0()); 
	    }
		lv_last_24_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"last",
        		lv_last_24_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getForkRatingForkParserRuleCall_21_0_0()); 
	    }
		lv_Fork_25_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_25_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_26=',' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getRating_ImplAccess().getCommaKeyword_21_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getForkRatingForkParserRuleCall_21_1_1_0()); 
	    }
		lv_Fork_27_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_27_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleRanking
entryRuleRanking returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRankingRule()); }
	 iv_ruleRanking=ruleRanking 
	 { $current=$iv_ruleRanking.current; } 
	 EOF 
;

// Rule Ranking
ruleRanking returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Ranking' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRankingAccess().getRankingKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRankingAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRankingAccess().getColonKeyword_2());
    }
((	otherlv_3='the' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRankingAccess().getTheKeyword_3_0());
    }
)?	otherlv_4='user' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRankingAccess().getUserKeyword_3_1());
    }
)?(	otherlv_5='may' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRankingAccess().getMayKeyword_4_0());
    }

    |((
(
		lv_isRequired_6_0=	'is' 
    {
        newLeafNode(lv_isRequired_6_0, grammarAccess.getRankingAccess().getIsRequiredIsKeyword_4_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingRule());
	        }
       		setWithLastConsumed($current, "isRequired", true, "is");
	    }

)
)	otherlv_7='required' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRankingAccess().getRequiredKeyword_4_1_1());
    }
))?(	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRankingAccess().getToKeyword_5());
    }
)?(	otherlv_9='rank' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRankingAccess().getRankKeyword_6_0());
    }

    |	otherlv_10='answer' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRankingAccess().getAnswerKeyword_6_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getQuestionEStringParserRuleCall_7_0()); 
	    }
		lv_question_11_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_11_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12='from' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRankingAccess().getFromKeyword_8());
    }
)?(	otherlv_13='one of' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRankingAccess().getOneOfKeyword_9_0());
    }

    |	otherlv_14='some of' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRankingAccess().getSomeOfKeyword_9_1());
    }
)?(	otherlv_15='these' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRankingAccess().getTheseKeyword_10());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getChoicesChoiceParserRuleCall_11_0()); 
	    }
		lv_choices_16_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_16_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getRankingAccess().getCommaKeyword_12_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getChoicesChoiceParserRuleCall_12_1_0()); 
	    }
		lv_choices_18_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_18_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*((
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getForkRankingSumForkParserRuleCall_13_0_0()); 
	    }
		lv_Fork_19_0=ruleRankingSumFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_19_0, 
        		"RankingSumFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getRankingAccess().getCommaKeyword_13_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getForkRankingSumForkParserRuleCall_13_1_1_0()); 
	    }
		lv_Fork_21_0=ruleRankingSumFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_21_0, 
        		"RankingSumFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleDichotomous
entryRuleDichotomous returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDichotomousRule()); }
	 iv_ruleDichotomous=ruleDichotomous 
	 { $current=$iv_ruleDichotomous.current; } 
	 EOF 
;

// Rule Dichotomous
ruleDichotomous returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDichotomousAccess().getDichotomousAction_0(),
            $current);
    }
)	otherlv_1='Dichotomous' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDichotomousAccess().getDichotomousKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getDichotomousAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDichotomousRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDichotomousAccess().getColonKeyword_3());
    }
((	otherlv_4='the' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDichotomousAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDichotomousAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDichotomousAccess().getMayKeyword_5_0());
    }

    |((
(
		lv_isRequired_7_0=	'is' 
    {
        newLeafNode(lv_isRequired_7_0, grammarAccess.getDichotomousAccess().getIsRequiredIsKeyword_5_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDichotomousRule());
	        }
       		setWithLastConsumed($current, "isRequired", true, "is");
	    }

)
)	otherlv_8='required' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDichotomousAccess().getRequiredKeyword_5_1_1());
    }
))?(	otherlv_9='to' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDichotomousAccess().getToKeyword_6());
    }
)?(	otherlv_10='answer' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDichotomousAccess().getAnswerKeyword_7());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getQuestionEStringParserRuleCall_8_0()); 
	    }
		lv_question_11_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_11_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12='if' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDichotomousAccess().getIfKeyword_9_0());
    }
	otherlv_13='yes' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDichotomousAccess().getYesKeyword_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getOnYesDichotomousForkParserRuleCall_9_2_0()); 
	    }
		lv_onYes_14_0=ruleDichotomousFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		set(
       			$current, 
       			"onYes",
        		lv_onYes_14_0, 
        		"DichotomousFork");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_15='if' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getDichotomousAccess().getIfKeyword_10_0());
    }
	otherlv_16='no' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDichotomousAccess().getNoKeyword_10_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getOnNoDichotomousForkParserRuleCall_10_2_0()); 
	    }
		lv_onNo_17_0=ruleDichotomousFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		set(
       			$current, 
       			"onNo",
        		lv_onNo_17_0, 
        		"DichotomousFork");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConstantSum
entryRuleConstantSum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantSumRule()); }
	 iv_ruleConstantSum=ruleConstantSum 
	 { $current=$iv_ruleConstantSum.current; } 
	 EOF 
;

// Rule ConstantSum
ruleConstantSum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantSumAccess().getConstantSumAction_0(),
            $current);
    }
)	otherlv_1='ConstantSum' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantSumAccess().getConstantSumKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getConstantSumAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantSumRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantSumAccess().getColonKeyword_3());
    }
((	otherlv_4='the' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantSumAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstantSumAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstantSumAccess().getMayKeyword_5_0());
    }

    |((
(
		lv_isRequired_7_0=	'is' 
    {
        newLeafNode(lv_isRequired_7_0, grammarAccess.getConstantSumAccess().getIsRequiredIsKeyword_5_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantSumRule());
	        }
       		setWithLastConsumed($current, "isRequired", true, "is");
	    }

)
)	otherlv_8='required' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConstantSumAccess().getRequiredKeyword_5_1_1());
    }
))?(	otherlv_9='to' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getConstantSumAccess().getToKeyword_6());
    }
)?(	otherlv_10='distribute' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getConstantSumAccess().getDistributeKeyword_7_0());
    }

    |	otherlv_11='answer' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getConstantSumAccess().getAnswerKeyword_7_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantSumAccess().getQuestionEStringParserRuleCall_8_0()); 
	    }
		lv_question_12_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantSumRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_12_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	otherlv_13='to' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getConstantSumAccess().getToKeyword_9_0_0());
    }
)?(	otherlv_14='a' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getConstantSumAccess().getAKeyword_9_0_1());
    }
)?	otherlv_15='total' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getConstantSumAccess().getTotalKeyword_9_0_2());
    }
(	otherlv_16='of' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getConstantSumAccess().getOfKeyword_9_0_3());
    }
)?)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantSumAccess().getConstantEIntParserRuleCall_9_1_0()); 
	    }
		lv_Constant_17_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantSumRule());
	        }
       		set(
       			$current, 
       			"Constant",
        		lv_Constant_17_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_18='among' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getConstantSumAccess().getAmongKeyword_10());
    }
	otherlv_19='these' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getConstantSumAccess().getTheseKeyword_11());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantSumAccess().getChoicesChoiceParserRuleCall_12_0()); 
	    }
		lv_Choices_20_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantSumRule());
	        }
       		add(
       			$current, 
       			"Choices",
        		lv_Choices_20_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_21=',' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getConstantSumAccess().getCommaKeyword_13_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantSumAccess().getChoicesChoiceParserRuleCall_13_1_0()); 
	    }
		lv_Choices_22_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantSumRule());
	        }
       		add(
       			$current, 
       			"Choices",
        		lv_Choices_22_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantSumAccess().getForkRankingSumForkParserRuleCall_14_0_0()); 
	    }
		lv_Fork_23_0=ruleRankingSumFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantSumRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_23_0, 
        		"RankingSumFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_24=',' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getConstantSumAccess().getCommaKeyword_14_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantSumAccess().getForkRankingSumForkParserRuleCall_14_1_1_0()); 
	    }
		lv_Fork_25_0=ruleRankingSumFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantSumRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_25_0, 
        		"RankingSumFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleStaple
entryRuleStaple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStapleRule()); }
	 iv_ruleStaple=ruleStaple 
	 { $current=$iv_ruleStaple.current; } 
	 EOF 
;

// Rule Staple
ruleStaple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStapleAccess().getStapleAction_0(),
            $current);
    }
)	otherlv_1='Staple' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStapleAccess().getStapleKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getStapleAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStapleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStapleAccess().getColonKeyword_3());
    }
((	otherlv_4='the' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStapleAccess().getTheKeyword_4_0());
    }
)?	otherlv_5='user' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStapleAccess().getUserKeyword_4_1());
    }
)?(	otherlv_6='may' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStapleAccess().getMayKeyword_5_0());
    }

    |((
(
		lv_isRequired_7_0=	'is' 
    {
        newLeafNode(lv_isRequired_7_0, grammarAccess.getStapleAccess().getIsRequiredIsKeyword_5_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStapleRule());
	        }
       		setWithLastConsumed($current, "isRequired", true, "is");
	    }

)
)	otherlv_8='required' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStapleAccess().getRequiredKeyword_5_1_1());
    }
))?(	otherlv_9='to' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStapleAccess().getToKeyword_6());
    }
)?(	otherlv_10='rate' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStapleAccess().getRateKeyword_7_0());
    }

    |	otherlv_11='answer' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getStapleAccess().getAnswerKeyword_7_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getQuestionEStringParserRuleCall_8_0()); 
	    }
		lv_question_12_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_12_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13='between' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStapleAccess().getBetweenKeyword_9());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMinEIntParserRuleCall_10_0()); 
	    }
		lv_Min_14_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_14_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15='and' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStapleAccess().getAndKeyword_11());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMaxEIntParserRuleCall_12_0()); 
	    }
		lv_Max_16_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_16_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_17='where' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStapleAccess().getWhereKeyword_13());
    }
)?	otherlv_18='lowest' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getStapleAccess().getLowestKeyword_14());
    }
(	otherlv_19='means' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getStapleAccess().getMeansKeyword_15());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getFirstEStringParserRuleCall_16_0()); 
	    }
		lv_first_20_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_20_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_21=',' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getStapleAccess().getCommaKeyword_17());
    }
)?	otherlv_22='mid' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getStapleAccess().getMidKeyword_18());
    }
(	otherlv_23='means' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getStapleAccess().getMeansKeyword_19());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMidEStringParserRuleCall_20_0()); 
	    }
		lv_mid_24_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"mid",
        		lv_mid_24_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_25='and' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getStapleAccess().getAndKeyword_21());
    }
)?	otherlv_26='highest' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getStapleAccess().getHighestKeyword_22());
    }
(	otherlv_27='means' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getStapleAccess().getMeansKeyword_23());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getLastEStringParserRuleCall_24_0()); 
	    }
		lv_last_28_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"last",
        		lv_last_28_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getForkRatingForkParserRuleCall_25_0_0()); 
	    }
		lv_Fork_29_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_29_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_30=',' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getStapleAccess().getCommaKeyword_25_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getForkRatingForkParserRuleCall_25_1_1_0()); 
	    }
		lv_Fork_31_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		add(
       			$current, 
       			"Fork",
        		lv_Fork_31_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	 iv_ruleChoice=ruleChoice 
	 { $current=$iv_ruleChoice.current; } 
	 EOF 
;

// Rule Choice
ruleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getChoiceAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChoiceAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceAccess().getDescriptionEStringParserRuleCall_2_0()); 
	    }
		lv_Description_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceRule());
	        }
       		set(
       			$current, 
       			"Description",
        		lv_Description_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChoiceFork
entryRuleChoiceFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceForkRule()); }
	 iv_ruleChoiceFork=ruleChoiceFork 
	 { $current=$iv_ruleChoiceFork.current; } 
	 EOF 
;

// Rule ChoiceFork
ruleChoiceFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChoiceForkAccess().getIfKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getChoiceForkAccess().getOnChoiceCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChoiceForkAccess().getCommaKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getChoiceForkAccess().getOnChoiceCrossReference_2_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getChoiceForkAccess().getThenKeyword_3());
    }
)?	otherlv_5='go' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getChoiceForkAccess().getGoKeyword_4());
    }
	otherlv_6='to' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getChoiceForkAccess().getToKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getChoiceForkAccess().getQuestionsQuestionCrossReference_6_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getChoiceForkAccess().getCommaKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getChoiceForkAccess().getQuestionsQuestionCrossReference_7_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRatingFork
entryRuleRatingFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRatingForkRule()); }
	 iv_ruleRatingFork=ruleRatingFork 
	 { $current=$iv_ruleRatingFork.current; } 
	 EOF 
;

// Rule RatingFork
ruleRatingFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRatingForkAccess().getIfKeyword_0());
    }
(	otherlv_1='it' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRatingForkAccess().getItKeyword_1());
    }
)?(	otherlv_2='is' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRatingForkAccess().getIsKeyword_2());
    }
)?	otherlv_3='between' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRatingForkAccess().getBetweenKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getMinEIntParserRuleCall_4_0()); 
	    }
		lv_Min_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='and' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRatingForkAccess().getAndKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getMaxEIntParserRuleCall_6_0()); 
	    }
		lv_Max_6_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_6_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='then' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRatingForkAccess().getThenKeyword_7());
    }
)?	otherlv_8='go' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRatingForkAccess().getGoKeyword_8());
    }
	otherlv_9='to' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRatingForkAccess().getToKeyword_9());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRatingForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getQuestionsQuestionCrossReference_10_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRatingForkAccess().getCommaKeyword_11_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRatingForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getQuestionsQuestionCrossReference_11_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRankingSumFork
entryRuleRankingSumFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRankingSumForkRule()); }
	 iv_ruleRankingSumFork=ruleRankingSumFork 
	 { $current=$iv_ruleRankingSumFork.current; } 
	 EOF 
;

// Rule RankingSumFork
ruleRankingSumFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRankingSumForkAccess().getIfKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingSumForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getOnChoiceCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRankingSumForkAccess().getCommaKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingSumForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getOnChoiceCrossReference_2_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='is' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRankingSumForkAccess().getIsKeyword_3());
    }
(	otherlv_5='between' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRankingSumForkAccess().getBetweenKeyword_4());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getMinEIntParserRuleCall_5_0()); 
	    }
		lv_Min_6_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingSumForkRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_6_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='and' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRankingSumForkAccess().getAndKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getMaxEIntParserRuleCall_7_0()); 
	    }
		lv_Max_8_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingSumForkRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_8_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9='then' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRankingSumForkAccess().getThenKeyword_8());
    }
)?	otherlv_10='go' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRankingSumForkAccess().getGoKeyword_9());
    }
	otherlv_11='to' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRankingSumForkAccess().getToKeyword_10());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingSumForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getQuestionsQuestionCrossReference_11_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRankingSumForkAccess().getCommaKeyword_12_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingSumForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRankingSumForkAccess().getQuestionsQuestionCrossReference_12_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDichotomousFork
entryRuleDichotomousFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDichotomousForkRule()); }
	 iv_ruleDichotomousFork=ruleDichotomousFork 
	 { $current=$iv_ruleDichotomousFork.current; } 
	 EOF 
;

// Rule DichotomousFork
ruleDichotomousFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='then' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDichotomousForkAccess().getThenKeyword_0());
    }
)?	otherlv_1='go' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDichotomousForkAccess().getGoKeyword_1());
    }
	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDichotomousForkAccess().getToKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDichotomousForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDichotomousForkAccess().getQuestionsQuestionCrossReference_3_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDichotomousForkAccess().getCommaKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDichotomousForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDichotomousForkAccess().getQuestionsQuestionCrossReference_4_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


