// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/dk.itu.mddp.eank.projectTEST/model/SurveyModel.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
		(surveys+=Survey)?;


Question returns Question:
	MultipleChoice | Open | Rating_Impl | Ranking | ConstantSum | Staple;

Survey returns Survey:
	{Survey}
	name=EString 
		(questions+=Question ( questions+=Question)* )?;

EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MultipleChoice returns MultipleChoice:
	{MultipleChoice}
	'MultipleChoice' name=ID ':' 
		('the'? 'user')?
		('may' | (isRequired ?= 'is' 'required'))? 
		'to'? 'answer'? question=EString
		('picking' 'up to'? answerCount = EInt )?
		'from'? 'these'? choice+=Choice ( "," choice+=Choice)* 
		('or' 'with'?'something'?'else'? other=EString)?
		(Fork+=ChoiceFork (Fork+=ChoiceFork)*)?;

Open returns Open:
	{Open}
	'Open' name=ID ':'
		('the'? 'user')?
		('may' | (isRequired ?= 'is' 'required'))? 
		'to'? 'answer'? question=EString
	;

Rating_Impl returns Rating:
	{Rating}
	'Rating' name=ID ':'
		('the'? 'user')?
		('may' |  'is' 'required')? 
		'to'? ('rate' | 'answer')? question=EString
		'between'? Min=EInt
		'and'? Max=EInt
		'where'? 'lowest'? 'means'? first=EString
		'and'? 'highest'? 'means'? last=EString
		(Fork+=RatingFork (Fork+=RatingFork)*)?;

Ranking returns Ranking:
	
	'Ranking'name=ID  ':'
		('the'? 'user')?
		('may' | (isRequired ?= 'is' 'required'))? 
		'to'? ('rank' | 'answer')? question=EString
		'from'? ('one of' | 'some of')? 'these'? choices+=Choice ( "," choices+=Choice)*
		(Fork+=RankingSumFork (Fork+=RankingSumFork)*)?;

ConstantSum returns ConstantSum:
	{ConstantSum}
	'ConstantSum' name=ID ':'
		('the'? 'user')?
		('may' | (isRequired ?= 'is' 'required'))? 
		'to'? ('distribute' | 'answer') question=EString
		(('to'? 'a'? 'total' 'of'?) Constant = EInt)?
		'amongst' 'these' Choices+=Choice ( "," Choices+=Choice)*
		(Fork+=RankingSumFork (Fork+=RankingSumFork)*)?;

Staple returns Staple:
	{Staple}
	'Staple'name=ID  ':'
		('the'? 'user')?
		('may' | (isRequired ?= 'is' 'required'))? 
		'to'? ('rate' | 'answer') question=EString
		'between'? Min=EInt
		'and'? Max=EInt
		'where'? 'lowest'? 'means'? first=EString','?
		'mid'? 'means'? mid=EString
		'and'? 'highest'? 'means'? last=EString
		(Fork+=RatingFork (Fork+=RatingFork)*)?;

Choice returns Choice:
	name = ID ':'
	Description=EString;

ChoiceFork returns ChoiceFork:
		'if' On+=[Choice|EString] ( "," On+=[Choice|EString])*
		'then'? 'go' 'to'  Questions+=[Question|EString] (","Questions+=[Question|EString])*;

EInt returns ecore::EInt:
	'-'? INT;

RatingFork returns RatingFork:
		'if' 'it'? 'is'? 'between' Min=EInt 'and' Max=EInt
		'then'? 'go''to' Questions+=[Question|EString] (","Questions+=[Question|EString])*;

RankingSumFork returns RankingSumFork:

		'if' On+=[Choice|EString] ( "," On+=[Choice|EString])* 
		'is' 'between'? Min=EInt 'and' Max=EInt 
		'then'? 'go''to' Questions+=[Question|EString] (","Questions+=[Question|EString])*;

