// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/dk.itu.mddp.eank.projectTEST/model/SurveyModel.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
Survey returns Survey:
	{Survey}
	name=ID 
		(questions+=Question ( questions+=Question)* )?;

Question returns Question:
	MultipleChoice | Open | Rating_Impl | Ranking | ConstantSum | Staple;


EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MultipleChoice returns MultipleChoice:
	{MultipleChoice}
	'MultipleChoice' name=ID ':' 
		('the'? 'user')?
		('may' | (isRequired ?= 'is' 'required'))? 
		'to'? 'answer'? question=EString
		('by'? 'picking' 'up to'? answerCount = EInt )?
		'of'? 'these'? choice+=Choice ( "," choice+=Choice)* 
		('or'  other=EString)?
		(forks+=ChoiceFork (forks+=ChoiceFork)*)?;

Open returns Open:
	{Open}
	'Open' name=ID ':'
		('the'? 'user')?
		('may' | (isRequired ?= 'is' 'required'))? 
		'to'? 'answer'? question=EString
	;

Rating_Impl returns Rating:
	{Rating}
	'Rating' name=ID ':'
		('the'? 'user')?
		('may' |  (isRequired ?= 'is' 'required'))? 
		'to'? ('rate' | 'answer')? question=EString
		'between'? min=EInt
		'and'? max=EInt
		'where'? 'lowest'? 'means'? first=EString
		'and'? 'highest'? 'means'? last=EString
		(forks+=RatingFork (forks+=RatingFork)*)?;

Ranking returns Ranking:
	
	'Ranking'name=ID  ':'
		('the'? 'user')?
		('may' | (isRequired ?= 'is' 'required'))? 
		'to'? ('rank' | 'answer')? question=EString
		'these'? choices+=Choice ( "," choices+=Choice)*
		(forks+=RankingSumFork (forks+=RankingSumFork)*)?;

ConstantSum returns ConstantSum:
	{ConstantSum}
	'ConstantSum' name=ID ':'
		('the'? 'user')?
		('may' | (isRequired ?= 'is' 'required'))? 
		'to'? ('distribute' | 'answer')? question=EString
		(('to'? 'a'? 'total' 'of'?) constant = EInt)?
		'these'? choices+=Choice ( "," choices+=Choice)*
		(forks+=RankingSumFork (forks+=RankingSumFork)*)?;

Staple returns Staple:
	{Staple}
	'Staple'name=ID  ':'
		('the'? 'user')?
		('may' | (isRequired ?= 'is' 'required'))? 
		'to'? ('rate' | 'answer')? question=EString
		'where'? 'lowest'? 'means'? first=EString','?
		'middle'? 'means'? mid=EString
		'and'? 'highest'? 'means'? last=EString
		(forks+=RatingFork (forks+=RatingFork)*)?;

Choice returns Choice:
	name = ID ':'
	description=EString;

ChoiceFork returns ChoiceFork:
		'if' on+=[Choice|EString] ( "," on+=[Choice|EString])*
		'then'? 'continue'? 'with'?  questions+=[Question|EString] (","questions+=[Question|EString])*;

EInt returns ecore::EInt:
	'-'? INT;

RatingFork returns RatingFork:
		'if' 'it'? 'is'? 'between' min=EInt 'and' max=EInt
		'then'? 'continue'? 'with'? questions+=[Question|EString] (","questions+=[Question|EString])*;

RankingSumFork returns RankingSumFork:

		'if' on+=[Choice|EString] ( "," on+=[Choice|EString])* 
		'is' 'between'? min=EInt 'and' max=EInt 
		'then'? 'continue'? 'with'? questions+=[Question|EString] (","questions+=[Question|EString])*;

