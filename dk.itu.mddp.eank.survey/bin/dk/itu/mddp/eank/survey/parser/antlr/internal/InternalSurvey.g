/*
* generated by Xtext
*/
grammar InternalSurvey;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package dk.itu.mddp.eank.survey.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.itu.mddp.eank.survey.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.itu.mddp.eank.survey.services.SurveyGrammarAccess;

}

@parser::members {

 	private SurveyGrammarAccess grammarAccess;
 	
    public InternalSurveyParser(TokenStream input, SurveyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SurveyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSurveysSurveyParserRuleCall_1_0()); 
	    }
		lv_surveys_1_0=ruleSurvey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"surveys",
        		lv_surveys_1_0, 
        		"Survey");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getMultipleChoiceParserRuleCall_0()); 
    }
    this_MultipleChoice_0=ruleMultipleChoice
    { 
        $current = $this_MultipleChoice_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getOpenParserRuleCall_1()); 
    }
    this_Open_1=ruleOpen
    { 
        $current = $this_Open_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRating_ImplParserRuleCall_2()); 
    }
    this_Rating_Impl_2=ruleRating_Impl
    { 
        $current = $this_Rating_Impl_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRankingParserRuleCall_3()); 
    }
    this_Ranking_3=ruleRanking
    { 
        $current = $this_Ranking_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getDichotomousParserRuleCall_4()); 
    }
    this_Dichotomous_4=ruleDichotomous
    { 
        $current = $this_Dichotomous_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getSumConstantParserRuleCall_5()); 
    }
    this_SumConstant_5=ruleSumConstant
    { 
        $current = $this_SumConstant_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getStapleParserRuleCall_6()); 
    }
    this_Staple_6=ruleStaple
    { 
        $current = $this_Staple_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSurvey
entryRuleSurvey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSurveyRule()); }
	 iv_ruleSurvey=ruleSurvey 
	 { $current=$iv_ruleSurvey.current; } 
	 EOF 
;

// Rule Survey
ruleSurvey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSurveyAccess().getSurveyAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSurveyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSurveyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSurveyAccess().getColonKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_3_0_0()); 
	    }
		lv_questions_3_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_3_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSurveyAccess().getSemicolonKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_3_1_1_0()); 
	    }
		lv_questions_5_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_5_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRuleMultipleChoice
entryRuleMultipleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultipleChoiceRule()); }
	 iv_ruleMultipleChoice=ruleMultipleChoice 
	 { $current=$iv_ruleMultipleChoice.current; } 
	 EOF 
;

// Rule MultipleChoice
ruleMultipleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMultipleChoiceAccess().getMultipleChoiceAction_0(),
            $current);
    }
)	otherlv_1='MultipleChoice' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultipleChoiceAccess().getMultipleChoiceKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultipleChoiceAccess().getColonKeyword_2());
    }
((	otherlv_3='The' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultipleChoiceAccess().getTheKeyword_3_0());
    }
)?	otherlv_4='user' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultipleChoiceAccess().getUserKeyword_3_1());
    }
)?(	otherlv_5='may' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMultipleChoiceAccess().getMayKeyword_4_0());
    }

    |	otherlv_6='is required' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultipleChoiceAccess().getIsRequiredKeyword_4_1());
    }
)?((	otherlv_7='to' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMultipleChoiceAccess().getToKeyword_5_0());
    }
)?(	otherlv_8='answer' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMultipleChoiceAccess().getAnswerKeyword_5_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getQuestionEStringParserRuleCall_5_2_0()); 
	    }
		lv_question_9_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_9_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_10='with' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMultipleChoiceAccess().getWithKeyword_6_0());
    }
)?(	otherlv_11='one' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMultipleChoiceAccess().getOneKeyword_6_1_0());
    }

    |	otherlv_12='some of' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMultipleChoiceAccess().getSomeOfKeyword_6_1_1());
    }
)?(	otherlv_13='these:' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMultipleChoiceAccess().getTheseKeyword_6_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getChoiceChoiceParserRuleCall_6_3_0()); 
	    }
		lv_choice_14_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"choice",
        		lv_choice_14_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMultipleChoiceAccess().getCommaKeyword_6_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getChoiceChoiceParserRuleCall_6_4_1_0()); 
	    }
		lv_choice_16_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"choice",
        		lv_choice_16_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_17='or' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getMultipleChoiceAccess().getOrKeyword_7_0());
    }
(	otherlv_18='with' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getMultipleChoiceAccess().getWithKeyword_7_1());
    }
)?(	otherlv_19='something' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getMultipleChoiceAccess().getSomethingKeyword_7_2());
    }
)?(	otherlv_20='else' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getMultipleChoiceAccess().getElseKeyword_7_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getOtherEStringParserRuleCall_7_4_0()); 
	    }
		lv_other_21_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		set(
       			$current, 
       			"other",
        		lv_other_21_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_22='conditionals' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getMultipleChoiceAccess().getConditionalsKeyword_8_0());
    }
)?	otherlv_23=':' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getMultipleChoiceAccess().getColonKeyword_8_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getMultipleChoiceForksMultipleChoiceForkParserRuleCall_8_2_0()); 
	    }
		lv_MultipleChoiceForks_24_0=ruleMultipleChoiceFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"MultipleChoiceForks",
        		lv_MultipleChoiceForks_24_0, 
        		"MultipleChoiceFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_25=',' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getMultipleChoiceAccess().getCommaKeyword_8_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getMultipleChoiceForksMultipleChoiceForkParserRuleCall_8_3_1_0()); 
	    }
		lv_MultipleChoiceForks_26_0=ruleMultipleChoiceFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"MultipleChoiceForks",
        		lv_MultipleChoiceForks_26_0, 
        		"MultipleChoiceFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	 iv_ruleOpen=ruleOpen 
	 { $current=$iv_ruleOpen.current; } 
	 EOF 
;

// Rule Open
ruleOpen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOpenAccess().getOpenAction_0(),
            $current);
    }
)	otherlv_1='Open' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOpenAccess().getOpenKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOpenAccess().getColonKeyword_2());
    }
((	otherlv_3='The' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOpenAccess().getTheKeyword_3_0());
    }
)?	otherlv_4='user' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOpenAccess().getUserKeyword_3_1());
    }
)?(	otherlv_5='may' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOpenAccess().getMayKeyword_4_0());
    }

    |	otherlv_6='is required' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOpenAccess().getIsRequiredKeyword_4_1());
    }
)?((	otherlv_7='to' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOpenAccess().getToKeyword_5_0());
    }
)?(	otherlv_8='answer' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getOpenAccess().getAnswerKeyword_5_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getQuestionEStringParserRuleCall_5_2_0()); 
	    }
		lv_question_9_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_9_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRating_Impl
entryRuleRating_Impl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRating_ImplRule()); }
	 iv_ruleRating_Impl=ruleRating_Impl 
	 { $current=$iv_ruleRating_Impl.current; } 
	 EOF 
;

// Rule Rating_Impl
ruleRating_Impl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRating_ImplAccess().getRatingAction_0(),
            $current);
    }
)	otherlv_1='Rating' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRating_ImplAccess().getRatingKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRating_ImplAccess().getColonKeyword_2());
    }
((	otherlv_3='The' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRating_ImplAccess().getTheKeyword_3_0());
    }
)?	otherlv_4='user' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRating_ImplAccess().getUserKeyword_3_1());
    }
)?(	otherlv_5='may' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRating_ImplAccess().getMayKeyword_4_0());
    }

    |	otherlv_6='is required' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRating_ImplAccess().getIsRequiredKeyword_4_1());
    }
)?((	otherlv_7='to' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRating_ImplAccess().getToKeyword_5_0());
    }
)?(	otherlv_8='rate' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRating_ImplAccess().getRateKeyword_5_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getQuestionEStringParserRuleCall_5_2_0()); 
	    }
		lv_question_9_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_9_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_10='between' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRating_ImplAccess().getBetweenKeyword_6_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getMinEIntParserRuleCall_6_1_0()); 
	    }
		lv_Min_11_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_11_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_12='and' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRating_ImplAccess().getAndKeyword_7_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getMaxEIntParserRuleCall_7_1_0()); 
	    }
		lv_Max_13_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_13_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_14='where' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRating_ImplAccess().getWhereKeyword_8_0());
    }
)?(	otherlv_15='lowest' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRating_ImplAccess().getLowestKeyword_8_1());
    }
)?(	otherlv_16='means' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getRating_ImplAccess().getMeansKeyword_8_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getFirstEStringParserRuleCall_8_3_0()); 
	    }
		lv_first_17_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_17_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_18='and' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getRating_ImplAccess().getAndKeyword_9_0());
    }
)?(	otherlv_19='highest' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getRating_ImplAccess().getHighestKeyword_9_1());
    }
)?(	otherlv_20='means' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getRating_ImplAccess().getMeansKeyword_9_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getLastEStringParserRuleCall_9_3_0()); 
	    }
		lv_last_21_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"last",
        		lv_last_21_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_22='conditionals' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getRating_ImplAccess().getConditionalsKeyword_10_0());
    }
)?	otherlv_23='(' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getRating_ImplAccess().getLeftParenthesisKeyword_10_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getRatingForksRatingForkParserRuleCall_10_2_0()); 
	    }
		lv_RatingForks_24_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		add(
       			$current, 
       			"RatingForks",
        		lv_RatingForks_24_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_25=',' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getRating_ImplAccess().getCommaKeyword_10_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getRatingForksRatingForkParserRuleCall_10_3_1_0()); 
	    }
		lv_RatingForks_26_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		add(
       			$current, 
       			"RatingForks",
        		lv_RatingForks_26_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_27=')' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getRating_ImplAccess().getRightParenthesisKeyword_10_4());
    }
)?)
;





// Entry rule entryRuleRanking
entryRuleRanking returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRankingRule()); }
	 iv_ruleRanking=ruleRanking 
	 { $current=$iv_ruleRanking.current; } 
	 EOF 
;

// Rule Ranking
ruleRanking returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Ranking' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRankingAccess().getRankingKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRankingAccess().getColonKeyword_1());
    }
(	otherlv_2='is required' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRankingAccess().getIsRequiredKeyword_2());
    }
)?((	otherlv_3='ask' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRankingAccess().getAskKeyword_3_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getQuestionEStringParserRuleCall_3_1_0()); 
	    }
		lv_question_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_5='you' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRankingAccess().getYouKeyword_4_0());
    }
)?(	otherlv_6='can' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRankingAccess().getCanKeyword_4_1());
    }
)?	otherlv_7='choose' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRankingAccess().getChooseKeyword_4_2());
    }
(	otherlv_8='from' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRankingAccess().getFromKeyword_4_3());
    }
)?(	otherlv_9='these' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRankingAccess().getTheseKeyword_4_4());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getChoicesChoiceParserRuleCall_4_5_0()); 
	    }
		lv_choices_10_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_10_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRankingAccess().getCommaKeyword_4_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getChoicesChoiceParserRuleCall_4_6_1_0()); 
	    }
		lv_choices_12_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_12_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?((	otherlv_13='conditionals' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRankingAccess().getConditionalsKeyword_5_0());
    }
)?	otherlv_14='(' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRankingAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getForksRankingForkParserRuleCall_5_2_0()); 
	    }
		lv_forks_15_0=ruleRankingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"forks",
        		lv_forks_15_0, 
        		"RankingFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getRankingAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getForksRankingForkParserRuleCall_5_3_1_0()); 
	    }
		lv_forks_17_0=ruleRankingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"forks",
        		lv_forks_17_0, 
        		"RankingFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_18=')' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getRankingAccess().getRightParenthesisKeyword_5_4());
    }
)?)
;





// Entry rule entryRuleDichotomous
entryRuleDichotomous returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDichotomousRule()); }
	 iv_ruleDichotomous=ruleDichotomous 
	 { $current=$iv_ruleDichotomous.current; } 
	 EOF 
;

// Rule Dichotomous
ruleDichotomous returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDichotomousAccess().getDichotomousAction_0(),
            $current);
    }
)	otherlv_1='Dichotomous' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDichotomousAccess().getDichotomousKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDichotomousAccess().getColonKeyword_2());
    }
((	otherlv_3='The' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDichotomousAccess().getTheKeyword_3_0());
    }
)?	otherlv_4='user' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDichotomousAccess().getUserKeyword_3_1());
    }
)?(	otherlv_5='may' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDichotomousAccess().getMayKeyword_4_0());
    }

    |	otherlv_6='is required' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDichotomousAccess().getIsRequiredKeyword_4_1());
    }
)?((	otherlv_7='to' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDichotomousAccess().getToKeyword_5_0());
    }
)?(	otherlv_8='answer' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDichotomousAccess().getAnswerKeyword_5_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getQuestionEStringParserRuleCall_5_2_0()); 
	    }
		lv_question_9_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_9_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='if yes' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDichotomousAccess().getIfYesKeyword_6_0());
    }
	otherlv_11='(' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDichotomousAccess().getLeftParenthesisKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getYesQuestionParserRuleCall_6_2_0()); 
	    }
		lv_yes_12_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		add(
       			$current, 
       			"yes",
        		lv_yes_12_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDichotomousAccess().getCommaKeyword_6_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getYesQuestionParserRuleCall_6_3_1_0()); 
	    }
		lv_yes_14_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		add(
       			$current, 
       			"yes",
        		lv_yes_14_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15=')' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getDichotomousAccess().getRightParenthesisKeyword_6_4());
    }
)?(	otherlv_16='if no' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDichotomousAccess().getIfNoKeyword_7_0());
    }
	otherlv_17='(' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getDichotomousAccess().getLeftParenthesisKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getNoQuestionParserRuleCall_7_2_0()); 
	    }
		lv_no_18_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		add(
       			$current, 
       			"no",
        		lv_no_18_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getDichotomousAccess().getCommaKeyword_7_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getNoQuestionParserRuleCall_7_3_1_0()); 
	    }
		lv_no_20_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		add(
       			$current, 
       			"no",
        		lv_no_20_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_21=')' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getDichotomousAccess().getRightParenthesisKeyword_7_4());
    }
)?)
;





// Entry rule entryRuleSumConstant
entryRuleSumConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSumConstantRule()); }
	 iv_ruleSumConstant=ruleSumConstant 
	 { $current=$iv_ruleSumConstant.current; } 
	 EOF 
;

// Rule SumConstant
ruleSumConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSumConstantAccess().getSumConstantAction_0(),
            $current);
    }
)	otherlv_1='SumConstant' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSumConstantAccess().getSumConstantKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSumConstantAccess().getColonKeyword_2());
    }
((	otherlv_3='The' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSumConstantAccess().getTheKeyword_3_0());
    }
)?	otherlv_4='user' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSumConstantAccess().getUserKeyword_3_1());
    }
)?(	otherlv_5='may' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSumConstantAccess().getMayKeyword_4_0());
    }

    |	otherlv_6='is required' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSumConstantAccess().getIsRequiredKeyword_4_1());
    }
)?((	otherlv_7='to' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSumConstantAccess().getToKeyword_5_0());
    }
)?(	otherlv_8='divide' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSumConstantAccess().getDivideKeyword_5_1());
    }
)?(	otherlv_9='according' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSumConstantAccess().getAccordingKeyword_5_2());
    }
)?(	otherlv_10='to' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSumConstantAccess().getToKeyword_5_3());
    }
)?(	otherlv_11='the' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSumConstantAccess().getTheKeyword_5_4());
    }
)?(	otherlv_12='importance' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSumConstantAccess().getImportanceKeyword_5_5());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSumConstantAccess().getQuestionEStringParserRuleCall_5_6_0()); 
	    }
		lv_question_13_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumConstantRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_13_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleStaple
entryRuleStaple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStapleRule()); }
	 iv_ruleStaple=ruleStaple 
	 { $current=$iv_ruleStaple.current; } 
	 EOF 
;

// Rule Staple
ruleStaple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStapleAccess().getStapleAction_0(),
            $current);
    }
)	otherlv_1='Staple' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStapleAccess().getStapleKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStapleAccess().getColonKeyword_2());
    }
((	otherlv_3='The' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStapleAccess().getTheKeyword_3_0());
    }
)?	otherlv_4='user' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStapleAccess().getUserKeyword_3_1());
    }
)?(	otherlv_5='may' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStapleAccess().getMayKeyword_4_0());
    }

    |	otherlv_6='is required' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStapleAccess().getIsRequiredKeyword_4_1());
    }
)?((	otherlv_7='to' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStapleAccess().getToKeyword_5_0());
    }
)?(	otherlv_8='rate' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStapleAccess().getRateKeyword_5_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getQuestionEStringParserRuleCall_5_2_0()); 
	    }
		lv_question_9_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_9_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_10='between' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStapleAccess().getBetweenKeyword_6_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMinEIntParserRuleCall_6_1_0()); 
	    }
		lv_Min_11_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_11_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_12='and' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStapleAccess().getAndKeyword_7_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMaxEIntParserRuleCall_7_1_0()); 
	    }
		lv_Max_13_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_13_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_14='where' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStapleAccess().getWhereKeyword_8_0());
    }
)?(	otherlv_15='lowest' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStapleAccess().getLowestKeyword_8_1());
    }
)?(	otherlv_16='means' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getStapleAccess().getMeansKeyword_8_2());
    }
)?(	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStapleAccess().getCommaKeyword_8_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getFirstEStringParserRuleCall_8_4_0()); 
	    }
		lv_first_18_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_18_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_19='mean' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getStapleAccess().getMeanKeyword_9_0());
    }
)?(	otherlv_20='means' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getStapleAccess().getMeansKeyword_9_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMidEStringParserRuleCall_9_2_0()); 
	    }
		lv_mid_21_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"mid",
        		lv_mid_21_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_22='and' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getStapleAccess().getAndKeyword_10_0());
    }
)?(	otherlv_23='highest' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getStapleAccess().getHighestKeyword_10_1());
    }
)?(	otherlv_24='means' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getStapleAccess().getMeansKeyword_10_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getLastEStringParserRuleCall_10_3_0()); 
	    }
		lv_last_25_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"last",
        		lv_last_25_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_26='conditionals' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getStapleAccess().getConditionalsKeyword_11_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getRatingForksRatingForkParserRuleCall_11_1_0()); 
	    }
		lv_RatingForks_27_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		add(
       			$current, 
       			"RatingForks",
        		lv_RatingForks_27_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_28=',' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getStapleAccess().getCommaKeyword_11_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getRatingForksRatingForkParserRuleCall_11_2_1_0()); 
	    }
		lv_RatingForks_29_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		add(
       			$current, 
       			"RatingForks",
        		lv_RatingForks_29_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	 iv_ruleChoice=ruleChoice 
	 { $current=$iv_ruleChoice.current; } 
	 EOF 
;

// Rule Choice
ruleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getChoiceAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChoiceAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceAccess().getDescriptionEStringParserRuleCall_2_0()); 
	    }
		lv_Description_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceRule());
	        }
       		set(
       			$current, 
       			"Description",
        		lv_Description_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMultipleChoiceFork
entryRuleMultipleChoiceFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultipleChoiceForkRule()); }
	 iv_ruleMultipleChoiceFork=ruleMultipleChoiceFork 
	 { $current=$iv_ruleMultipleChoiceFork.current; } 
	 EOF 
;

// Rule MultipleChoiceFork
ruleMultipleChoiceFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='match' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultipleChoiceForkAccess().getMatchKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleChoiceForkRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getMultipleChoiceForkAccess().getMatcherChoiceCrossReference_1_0()); 
	}

)
)(	otherlv_2='questions' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultipleChoiceForkAccess().getQuestionsKeyword_2_0());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultipleChoiceForkAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceForkAccess().getForkedquestionsQuestionParserRuleCall_2_2_0()); 
	    }
		lv_forkedquestions_4_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestions",
        		lv_forkedquestions_4_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMultipleChoiceForkAccess().getCommaKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceForkAccess().getForkedquestionsQuestionParserRuleCall_2_3_1_0()); 
	    }
		lv_forkedquestions_6_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestions",
        		lv_forkedquestions_6_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMultipleChoiceForkAccess().getRightParenthesisKeyword_2_4());
    }
)?)
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRatingFork
entryRuleRatingFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRatingForkRule()); }
	 iv_ruleRatingFork=ruleRatingFork 
	 { $current=$iv_ruleRatingFork.current; } 
	 EOF 
;

// Rule RatingFork
ruleRatingFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRatingForkAccess().getRatingForkAction_0(),
            $current);
    }
)	otherlv_1='RatingFork' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRatingForkAccess().getRatingForkKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRatingForkAccess().getColonKeyword_2());
    }
(	otherlv_3='from' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRatingForkAccess().getFromKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getMinEIntParserRuleCall_3_1_0()); 
	    }
		lv_min_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='to' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRatingForkAccess().getToKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getMaxEIntParserRuleCall_4_1_0()); 
	    }
		lv_max_6_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_6_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='questions' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRatingForkAccess().getQuestionsKeyword_5_0());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRatingForkAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getForkedquestionQuestionParserRuleCall_5_2_0()); 
	    }
		lv_forkedquestion_9_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestion",
        		lv_forkedquestion_9_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRatingForkAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getForkedquestionQuestionParserRuleCall_5_3_1_0()); 
	    }
		lv_forkedquestion_11_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestion",
        		lv_forkedquestion_11_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRatingForkAccess().getRightParenthesisKeyword_5_4());
    }
)?)
;





// Entry rule entryRuleRankingFork
entryRuleRankingFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRankingForkRule()); }
	 iv_ruleRankingFork=ruleRankingFork 
	 { $current=$iv_ruleRankingFork.current; } 
	 EOF 
;

// Rule RankingFork
ruleRankingFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='RankingFork' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRankingForkAccess().getRankingForkKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRankingForkAccess().getColonKeyword_1());
    }
(	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRankingForkAccess().getFromKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingForkAccess().getMinEIntParserRuleCall_2_1_0()); 
	    }
		lv_min_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingForkRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='to' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRankingForkAccess().getToKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingForkAccess().getMaxEIntParserRuleCall_3_1_0()); 
	    }
		lv_max_5_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingForkRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_5_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='match' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRankingForkAccess().getMatchKeyword_4());
    }
)?(	otherlv_7='with' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRankingForkAccess().getWithKeyword_5());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingForkRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getRankingForkAccess().getMatcherChoiceCrossReference_6_0()); 
	}

)
)(	otherlv_9='questions' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRankingForkAccess().getQuestionsKeyword_7_0());
    }
	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRankingForkAccess().getLeftParenthesisKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingForkAccess().getForkedquestionsQuestionParserRuleCall_7_2_0()); 
	    }
		lv_forkedquestions_11_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestions",
        		lv_forkedquestions_11_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRankingForkAccess().getCommaKeyword_7_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingForkAccess().getForkedquestionsQuestionParserRuleCall_7_3_1_0()); 
	    }
		lv_forkedquestions_13_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestions",
        		lv_forkedquestions_13_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRankingForkAccess().getRightParenthesisKeyword_7_4());
    }
)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


