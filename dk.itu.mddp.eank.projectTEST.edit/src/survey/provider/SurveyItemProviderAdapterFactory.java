/**
 */
package survey.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import survey.util.SurveyAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SurveyItemProviderAdapterFactory extends SurveyAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SurveyItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.Survey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SurveyItemProvider surveyItemProvider;

	/**
	 * This creates an adapter for a {@link survey.Survey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSurveyAdapter() {
		if (surveyItemProvider == null) {
			surveyItemProvider = new SurveyItemProvider(this);
		}

		return surveyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.MultipleChoice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultipleChoiceItemProvider multipleChoiceItemProvider;

	/**
	 * This creates an adapter for a {@link survey.MultipleChoice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultipleChoiceAdapter() {
		if (multipleChoiceItemProvider == null) {
			multipleChoiceItemProvider = new MultipleChoiceItemProvider(this);
		}

		return multipleChoiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.Open} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenItemProvider openItemProvider;

	/**
	 * This creates an adapter for a {@link survey.Open}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenAdapter() {
		if (openItemProvider == null) {
			openItemProvider = new OpenItemProvider(this);
		}

		return openItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.Rating} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RatingItemProvider ratingItemProvider;

	/**
	 * This creates an adapter for a {@link survey.Rating}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRatingAdapter() {
		if (ratingItemProvider == null) {
			ratingItemProvider = new RatingItemProvider(this);
		}

		return ratingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.Choice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceItemProvider choiceItemProvider;

	/**
	 * This creates an adapter for a {@link survey.Choice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceAdapter() {
		if (choiceItemProvider == null) {
			choiceItemProvider = new ChoiceItemProvider(this);
		}

		return choiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.Ranking} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RankingItemProvider rankingItemProvider;

	/**
	 * This creates an adapter for a {@link survey.Ranking}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRankingAdapter() {
		if (rankingItemProvider == null) {
			rankingItemProvider = new RankingItemProvider(this);
		}

		return rankingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.ConstantSum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantSumItemProvider constantSumItemProvider;

	/**
	 * This creates an adapter for a {@link survey.ConstantSum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantSumAdapter() {
		if (constantSumItemProvider == null) {
			constantSumItemProvider = new ConstantSumItemProvider(this);
		}

		return constantSumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.Staple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StapleItemProvider stapleItemProvider;

	/**
	 * This creates an adapter for a {@link survey.Staple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStapleAdapter() {
		if (stapleItemProvider == null) {
			stapleItemProvider = new StapleItemProvider(this);
		}

		return stapleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.RatingFork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RatingForkItemProvider ratingForkItemProvider;

	/**
	 * This creates an adapter for a {@link survey.RatingFork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRatingForkAdapter() {
		if (ratingForkItemProvider == null) {
			ratingForkItemProvider = new RatingForkItemProvider(this);
		}

		return ratingForkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.ChoiceFork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceForkItemProvider choiceForkItemProvider;

	/**
	 * This creates an adapter for a {@link survey.ChoiceFork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceForkAdapter() {
		if (choiceForkItemProvider == null) {
			choiceForkItemProvider = new ChoiceForkItemProvider(this);
		}

		return choiceForkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.RankingChoiceFork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RankingChoiceForkItemProvider rankingChoiceForkItemProvider;

	/**
	 * This creates an adapter for a {@link survey.RankingChoiceFork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRankingChoiceForkAdapter() {
		if (rankingChoiceForkItemProvider == null) {
			rankingChoiceForkItemProvider = new RankingChoiceForkItemProvider(this);
		}

		return rankingChoiceForkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link survey.RankingSumFork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RankingSumForkItemProvider rankingSumForkItemProvider;

	/**
	 * This creates an adapter for a {@link survey.RankingSumFork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRankingSumForkAdapter() {
		if (rankingSumForkItemProvider == null) {
			rankingSumForkItemProvider = new RankingSumForkItemProvider(this);
		}

		return rankingSumForkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (surveyItemProvider != null) surveyItemProvider.dispose();
		if (multipleChoiceItemProvider != null) multipleChoiceItemProvider.dispose();
		if (openItemProvider != null) openItemProvider.dispose();
		if (ratingItemProvider != null) ratingItemProvider.dispose();
		if (choiceItemProvider != null) choiceItemProvider.dispose();
		if (rankingItemProvider != null) rankingItemProvider.dispose();
		if (constantSumItemProvider != null) constantSumItemProvider.dispose();
		if (stapleItemProvider != null) stapleItemProvider.dispose();
		if (ratingForkItemProvider != null) ratingForkItemProvider.dispose();
		if (choiceForkItemProvider != null) choiceForkItemProvider.dispose();
		if (rankingChoiceForkItemProvider != null) rankingChoiceForkItemProvider.dispose();
		if (rankingSumForkItemProvider != null) rankingSumForkItemProvider.dispose();
	}

}
