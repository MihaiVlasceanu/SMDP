// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/dk.itu.mddp.eank.projectTEST/model/SurveyModel.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
		(surveys+=Survey ( "??????" surveys+=Survey)* )?;


Question returns Question:
	MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple;

Survey returns Survey:
	{Survey}
	name=EString 
		(questions+=Question";" ( questions+=Question';')* )?;

EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MultipleChoice returns MultipleChoice:
	{MultipleChoice}
	'MultipleChoice' name=ID ':' 
		('The'? 'user')?
		('may' | (isRequired ?='is required'))? 
		('to'? 'answer'? question=EString)? 
		('with'? ('one of' | 'some of')? 'these:'? choice+=Choice ( "," choice+=Choice)* )?
		('or' 'with'?'something'?'else'? other=EString)?'.'?
		(Fork+=ChoiceFork ( "," Fork+=ChoiceFork)*)?;

Open returns Open:
	{Open}
	'Open' name=ID ':'
		('The'? 'user')?
		('may' | 'is required')? 
		('to'? 'answer'? question=EString)? 
		
	;

Rating_Impl returns Rating:
	{Rating}
	'Rating' name=ID ':'
		('The'? 'user')?
		('may' | 'is required')? 
		('to'? 'rate'? question=EString)?
		('between'? Min=EInt)?
		('and'? Max=EInt)?
		('where'? 'lowest'? 'means'? first=EString)?
		('and'? 'highest'? 'means'? last=EString)?
		('conditionals'? '(' Fork+=RatingFork ( "," Fork+=RatingFork)* ')' )?;

Ranking returns Ranking:
	
	'Ranking'name=ID  ':'
		('is required')? 
		('ask'? question=EString)? 
		('you'? 'can'? 'choose' 'from'? 'these'? choices+=Choice ( "," choices+=Choice)* )?
		('conditionals'? '(' Fork+=RankingSumFork ( "," Fork+=RankingSumFork)* ')' )?;

Dichotomous returns Dichotomous:
	{Dichotomous}
	'Dichotomous' name=ID ':'
		('The'? 'user')?
		('may' | 'is required')? 
		('to'? 'answer'? question=EString)? 
		('if yes' onYes=DichotomousFork)?
		('if no' onNo=DichotomousFork)?;

SumConstant returns SumConstant:
	{SumConstant}
	'SumConstant' name=ID ':'
		('The'? 'user')?
		('may' | 'is required')? 
		('to'? 'divide'? 'according'? 'to'? 'the'? 'importance'? question=EString)? 
		('conditionals'? '(' Fork+=RankingSumFork ( "," Fork+=RankingSumFork)* ')' )?;

Staple returns Staple:
	{Staple}
	'Staple'name=ID  ':'
		('The'? 'user')?
		('may' | 'is required')? 
		('to'? 'rate'? question=EString)? 
		('between'? Min=EInt)?
		('and'? Max=EInt)?
		('where'? 'lowest'? 'means'? ','? first=EString)?
		('mean'? 'means'? mid=EString)?
		('and'? 'highest'? 'means'? last=EString)?
		('conditionals'? '(' Fork+=RatingFork ( "," Fork+=RatingFork)* ')' )?;

Choice returns Choice:
	name = ID ':'
	Description=EString;

ChoiceFork returns ChoiceFork:
		'If' On+=[Choice|EString] ( "," On+=[Choice|EString])*
		'then'? 'go to'  Questions+=[Question|EString] ( "," Questions+=[Question|EString])*  ;

EInt returns ecore::EInt:
	'-'? INT;

RatingFork returns RatingFork:
		('Min' Min=EInt)?
		('Max' Max=EInt)?
		'Questions' '(' Questions+=[Question|EString] ( "," Questions+=[Question|EString])* ')' ;

RankingSumFork returns RankingSumFork:

		'On' On+=[Choice|EString] ( "," On+=[Choice|EString])*
		('From' Max=EInt)?
		('To' Min=EInt)?
		'Questions'  Questions+=[Question|EString] ( "," Questions+=[Question|EString])*  ;

DichotomousFork returns DichotomousFork:
	'DichotomousFork'
	'Questions' Questions+=[Question|EString] ( "," Questions+=[Question|EString])*;
