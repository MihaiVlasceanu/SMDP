// automatically generated by Xtext
grammar dk.itu.mddp.eank.survey.Survey with org.eclipse.xtext.common.Terminals

import "platform:/resource/dk.itu.mddp.eank.project/model/SurveyModel.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'Model'
	'{'
		('surveys' '{' surveys+=Survey ( "," surveys+=Survey)* '}' )?
	'}';


Question returns Question:
	MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple;






Survey returns Survey:
	{Survey}
	'Survey'
	name=EString
	'{'
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MultipleChoice returns MultipleChoice:
	{MultipleChoice}
	(required?='required')?
	(isRequired?='isRequired')?
	'MultipleChoice'
	name=EString
	'{'
		('question' question=EString)?
		('other' other=EString)?
		('choice' '{' choice+=Choice ( "," choice+=Choice)* '}' )?
		('Fork' '{' Fork+=ChoiceFork ( "," Fork+=ChoiceFork)* '}' )?
	'}';

Open returns Open:
	{Open}
	(required?='required')?
	(isRequired?='isRequired')?
	'Open'
	name=EString
	'{'
		('question' question=EString)?
		('AnswerLength' AnswerLength=EString)?
	'}';

Rating_Impl returns Rating:
	{Rating}
	(required?='required')?
	(isRequired?='isRequired')?
	'Rating'
	name=EString
	'{'
		('question' question=EString)?
		('Min' Min=EInt)?
		('Max' Max=EInt)?
		('first' first=EString)?
		('last' last=EString)?
		('Fork' '{' Fork+=RatingFork ( "," Fork+=RatingFork)* '}' )?
	'}';

Ranking returns Ranking:
	(required?='required')?
	(isRequired?='isRequired')?
	'Ranking'
	name=EString
	'{'
		('question' question=EString)?
		'choices' '{' choices+=Choice ( "," choices+=Choice)* '}' 
		('Fork' '{' Fork+=RankingSumFork ( "," Fork+=RankingSumFork)* '}' )?
	'}';

Dichotomous returns Dichotomous:
	{Dichotomous}
	(required?='required')?
	(isRequired?='isRequired')?
	'Dichotomous'
	name=EString
	'{'
		('question' question=EString)?
		('onYes' onYes=DichotomousFork)?
		('onNo' onNo=DichotomousFork)?
	'}';

SumConstant returns SumConstant:
	{SumConstant}
	(required?='required')?
	(isRequired?='isRequired')?
	'SumConstant'
	name=EString
	'{'
		('question' question=EString)?
		('Constant' Constant=EInt)?
		('Choices' '(' Choices+=[Choice|EString] ( "," Choices+=[Choice|EString])* ')' )?
		('Fork' '{' Fork+=RankingSumFork ( "," Fork+=RankingSumFork)* '}' )?
	'}';

Staple returns Staple:
	{Staple}
	(required?='required')?
	(isRequired?='isRequired')?
	'Staple'
	name=EString
	'{'
		('question' question=EString)?
		('Min' Min=EInt)?
		('Max' Max=EInt)?
		('first' first=EString)?
		('last' last=EString)?
		('mid' mid=EString)?
		('Fork' '{' Fork+=RatingFork ( "," Fork+=RatingFork)* '}' )?
	'}';

Choice returns Choice:
	{Choice}
	'Choice'
	name=EString
	'{'
		('Description' Description=EString)?
	'}';

ChoiceFork returns ChoiceFork:
	'ChoiceFork'
	'{'
		'Questions' '(' Questions+=[Question|EString] ( "," Questions+=[Question|EString])* ')' 
		'On' '(' On+=[Choice|EString] ( "," On+=[Choice|EString])* ')' 
	'}';

EInt returns ecore::EInt:
	'-'? INT;

RatingFork returns RatingFork:
	'RatingFork'
	'{'
		('Min' Min=EInt)?
		('Max' Max=EInt)?
		'Questions' '(' Questions+=[Question|EString] ( "," Questions+=[Question|EString])* ')' 
	'}';

RankingSumFork returns RankingSumFork:
	'RankingSumFork'
	'{'
		('Max' Max=EInt)?
		('Min' Min=EInt)?
		'Questions' '(' Questions+=[Question|EString] ( "," Questions+=[Question|EString])* ')' 
		'On' '(' On+=[Choice|EString] ( "," On+=[Choice|EString])* ')' 
	'}';

DichotomousFork returns DichotomousFork:
	'DichotomousFork'
	'{'
		'Questions' '(' Questions+=[Question|EString] ( "," Questions+=[Question|EString])* ')' 
	'}';
